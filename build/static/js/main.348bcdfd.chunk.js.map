{"version":3,"sources":["logo.svg","viso/summary/SummaryView.js","viso/amGraph/amGraph.js","common/utilSvc.js","Localization/localizedStrings.js","viso/GraphComponent.js","viso/FindConnectionsComponent.js","viso/TimelineComponent.js","viso/dashboard/DashboardView.js","viso/dashboard/MiniDashboardView.js","common/constants.js","viso/gamifiedAmGraph/gamifiedGraph.js","viso/speedoMeter/Speedometer.js","viso/gamifiedStats/gamifiedStatsAuth.js","viso/gamifiedStats/gamifiedGraphStats.js","viso/GamifiedGraphComponent.js","viso/gamifiedTimeline/GamifiedTimeline.js","viso/dashboard/GamifiedDashboardView.js","viso/ChatBox.js","viso/ViewBlockOptionList.js","viso/UpvoteStatus.js","viso/ViewBlock.js","viso/VisoList.js","common/dbSvc.js","view/ViewBlockprobePublic.js","wrapper/errorBoundary/ErrorBoundary.js","wrapper/public/ViewBlockprobePublicWrapper.js","user-session/UserBlockprobes.js","view/shareBlockprobe/ShareBlockprobeView.js","view/BlockprobeSettings/LanguageSettings/LanguageSettings.js","view/BlockprobeSettings/BlockprobeSettings.js","view/Draft/DraftBlockEvidenceView.js","view/Draft/DraftBlockNumberView.js","view/Draft/Checkbox.js","view/Draft/MonthPicker/MonthPicker.js","view/DraftBlock.js","view/SingleBlock.js","view/Bulk/ocrComponent/OcrComponent.js","view/Bulk/articleLinkComponent/ArticleLinkComponent.js","view/Bulk/filterTextComponent/FilterTextComponent.js","view/Bulk/translateComponent/translateComponent.js","view/Bulk/BulkBlockEditable/BulkBlockEditable.js","view/Bulk/BulkDraftBlockComponent.js","view/EntityPane/EntityPane.js","view/ImagePane/ImagePane.js","view/Draft/SingleEntityView/SingleEntityView.js","view/Draft/AddEdgeView/AddEdgeView.js","view/Draft/AddEdgeView/AddStarEdgesView.js","view/Draft/AddEdgeView/AddSingleTopic.js","view/Draft/AddTimeView/AddTimeView.js","user-session/UserBlocksComponent.js","view/BpDetails/BpDetails.js","view/ViewBlockprobePrivate.js","user-session/userWall/UserWall.js","user-session/userNotif/UserNotifications.js","viso/gameList/singleGameElement/SingleGameElement.js","user-session/userGames/GameListPrivate/GameListPrivate.js","user-session/userGames/UserGames.js","user-session/UserSession.js","viso/gamifiedStats/gamifiedResults.js","viso/gamifiedStats/gamifiedResultsWrapper.js","view/viewWall/PublicWall.js","viso/gameList/GameListComponent.js","App.js","serviceWorker.js","index.js","media/well_done.mp3","media/try_again.mp3","user-session/backgrounds/Journalist.jpg","user-session/backgrounds/Teacher.jpg","user-session/backgrounds/lawmaker.jpg","user-session/icons/logo.png"],"names":["module","exports","SummaryViewComponent","props","state","summBlocks","summBlockIdx","isContentActive","getTitle","bind","getSummary","removeHashedIndex","clickChevron","clickSummaryBlock","ReactGA","initialize","a","startI","trim","length","i","charAt","substring","this","summaryBlocks","event","category","action","JSON","stringify","label","selectBlock","timeout","setInterval","isNullOrUndefined","currentIdx","currArrSize","Math","max","setState","scope","setTimeout","title","summary","forward","className","style","width","cursor","transition","onClick","transitionName","transitionAppear","transitionAppearTimeout","transitionEnter","transitionEnterTimeout","transitionLeave","transitionLeaveTimeout","React","Component","am4core","am4themes_animated","AmGraph","generateAmForceDirectedGraph","prepareData","chart","selectedLink","previousChart","parse","graph","data","newData","newEntry","image","imageDisabled","circleDisabled","isNotAll","push","am4plugins_forceDirected","series","dataFields","value","name","id","children","linkWith","nodes","template","text","tooltipText","valign","fill","dy","fontSize","minRadius","maxRadius","propertyFields","hidden","togglable","circle","disabled","outerCircle","icon","createChild","am4plugins_bullets","href","radius","strokeWidth","background","pointerLength","outlineCircle","adapter","add","target","parent","allNode","height","depth","angle","strokeOpacity","stroke","fillOpacity","centerStrength","manyBodyStrength","links","strength","interactionsEnabled","clickable","distance","events","on","link","selectEdge","source","currentText","node","selectNode","months","getShortenedListOfBlockTree","blockTree","bTree","count","allBlocks","currBlockPage","Object","keys","map","key","index","page","blocks","block","previousKey","actionType","bKey","undefined","getShortenedListOfImages","imageMapping","imageMap","countI","allImages","currImagePage","images","url","entity","imKey","getTextListForBulk","textList","curr","extractBlockIndex","aIndex","isAExist","num","isNaN","parseInt","parseFloat","getDateTimeString","timelineBlock","ans","blockDate","month","date","str","char","totalLength","newStr","len","String","appendCharToString","year","blockTime","temp","hours","minutes","isTitleHashtag","isEntitiesDollar","getEntities","start","end","split","j","isTitleSummary","startIndex","removeTitleHashtag","getBlocksText","entities","entityStr","toLowerCase","sortTimeline","timelineList","sort","b","a_ts","b_ts","bIndex","isBExist","sortBlocksCommon","timestamp","reverse","filterText","isCharacterNumeric","correctTextForSpeech","shouldUpdateText","restrictedChars","coalesceNumbers","numbers","nMap","Number","finalAns","forEach","coalesceBlockNumbers","nos","makeFirstLetterUppercase","toUpperCase","getEntityChange","ts","entityChanges","defaultEntity","change","changes","l","r","m","floor","deduplicateBlocks","blockList","modifyBlockEntities","currEntityMap","currBlock","currEntity","currEntityStr","newEntityStr","newEntity","newEntities","type","traverseGraphNode","nodeId","visited","islandCount","edges","edgeKey","island","getGraphIslandsAndValues","islands","languageCheck","lang","voice","vLang","includes","getTotalEdges","investigationGraph","totalEdges","isAcceptableChar","charA","acceptableStr","isEntityPartOfString","pos","indexOf","visualizationsNotFound","selectEntity","selectTwoEntities","selections","mindMap","mindMapTooltips","desc","gameifiedMindMapTooltips","gameifiedTimelineTooltips","timeline","timelineTooltips","isChrome","window","chrome","webstore","runtime","isIE","document","documentMode","GraphComponent","graphOptions","layout","hierarchical","arrows","to","enabled","scaleFactor","middle","from","color","graphEvents","multiSelectEntityList","currentSelectedBlocks","selectedNodes","openSelectedBlocks","wasAllOptionSelected","wasNoneOptionSelected","playStatus","languageSupportedPlay","copiedText","testVar","graphHelperMap","speech","handleAllAndNoneOptions","initializeGraphEvents","generateGraph","onSelectGraph","addBlocksForNodeCharacteristic","addBlocksForEdge","isValidBlock","clickBlockFromList","sortBlocks","AgregateNumberDisplay","generateAmGraph","toggleSelectedBlocksPane","resetScroll","initSpeech","playExistingSelection","pauseExistingSelection","resumeExistingSelection","stopExistingSelection","timeoutFn","timeInFn","graphRef","createRef","amount","current","offsetTop","setScrollToGraphList","getElementById","scrollTop","blocksToBeSelected","edge","blocksAdded","edgeBlockList","blockKey","newBlock","added","invGraph","edgekey","isPublic","charBlockList","nodeKey","context","select","isAllSelected","newGraph","nodesMap","selectedEntityLabels","currEntityKey","edgeMap","Utils","revMap","newId","newGraphHelper","to_id","from_id","options","evidence","require","evidenceList","evidenceLink","IsImageUrl","src","selectedNodesString","renderNumbers","number","replace","singleBlock","blockEntity","BlockEntity","renderBlockEvidences","evidences","blockEvidence","BlockEvidence","class","prevAllOption","prevNoneOption","showAll","showNone","someOptionIsEnabled","tempList","entityList","Speech","hasBrowserSupport","init","voices","selectedVoice","setVoice","pause","resume","speaking","cancel","toPlayText","selectedBlock","speak","queue","then","catch","e","console","error","nextProps","selectedOptionsStyles","backgroundColor","borderRadius","padding","maxWidth","wordWrap","optionsListStyles","renderBlocks","SingleBlock","aggrNums","marginBottom","marginTop","optionClicked","entityClicked","selectedBadgeClicked","isTextWrap","ref","onCopy","Locale","open","duration","transitions","FindConnectionsComponent","amGraph","firstEntitySelectList","secondEntitySelectList","generateEntityLists","getPathViaBfs","findConnections","findConnectionRef","startNode","destNode","st","blocksVisited","blockCount","hops","prevNode","currNodeKey","currNode","currHops","currblockCount","shouldUpdateEdgeNode","pathNodeKeys","list","pathEntity","rootElement","destElement","selectedEntityList","firstEntityList","secondEntityList","entityLabel","toLocaleLowerCase","firstEntityClicked","firstSelectedBadgeClicked","isSingleSelect","secondEntityClicked","secondSelectedBadgeClicked","TimelineComponent","isSpeechAvailable","selectTimelineBlock","dateTimeStr","marginLeft","marginRight","blockDateTime","iconStyle","timelineView","renderTimeline","DashboardViewComponent","adhocTooltip","flag","content","disableBeacon","mindmap","isSummaryBlocksAvailable","isGraphAvailable","isTimelineAvailable","showLocalTooltip","hideLocalTooltip","handleAdhocTooltipJoyrideCallback","tooltipType","status","STATUS","FINISHED","SKIPPED","paddingBottom","setNewVisualisation","onMouseEnter","styles","arrowColor","beaconSize","primaryColor","overlayColor","zIndex","steps","run","callback","isBlockprobeEmpty","textAlign","MiniDashboardViewComponent","langs","edenColors","GamifiedGraph","refData","edgeList","selectedEdges","prevLinksWith","currIndex","totalCnt","getDesiredLink","hasEdgeBeenSelected","shouldHide","nodeDisabled","hideNode","f","s","nodeMap","getNodesToBeDisplayed","showOnlyNodes","selected","isRefData","Const","linksWithList","nodeA","nodeB","linkList","numberOfNodes","innerWidth","getCenterStrength","getBodyStrength","setNodeVal","isEdgeSelected","setGameMessage","playNodeSound","linksWith","_dictionary","connectEdge","getEdgeList","reshuffleGraphNodes","node1","node2","values","index1","index2","canConnect","invalidateData","addSelectedEdgeToMap","setEntityStats","Speedometer","hand","range0","range1","generateSpeedometer","moveHand","am4charts","hiddenState","properties","opacity","innerRadius","axis","xAxes","min","strictMinMax","renderer","ticks","grid","labels","axisRanges","create","endValue","val","axisFill","hands","pin","showValue","newVal","cubicOut","GamifiedAuth","uiConfig","signInFlow","signInOptions","firebase","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","PhoneAuthProvider","callbacks","signInSuccess","signInSuccessWithAuthResult","authResult","redirectUrl","userId","stats","Date","now","bpId","entityStats","newStats","mistakes","softBlockprobe","docStr","collection","doc","set","getItemWrapper","signOut","finishSaving","defaultVal","localStorage","getItem","unregisterAuthObserver","onAuthStateChanged","user","uId","providerId","currentUser","providerData","phoneNumber","email","saveUserStats","firebaseAuth","GamifiedGraphStats","saveAuth","finishedSaving","renderSingleEntityMistakes","saveResults","score","renderEntityList","typeOfGame","totalScore","canSave","Button","variant","wellDone","UIfx","WellDoneMp3","volume","throttleMs","tryAgain","TryAgainMp3","GamifiedGraphComponent","stopGame","gameMessageFinished","gameNodeSelections","gameMessage","entityStatistics","clearGamifiedEntity","incrementScore","entityName","isCorrect","message","playSound","play","firstNode","secondNode","Alert","severity","GamifiedTimelineComponent","currentTimelineIndex","finishedBlocks","slideCard","random","incrementTimelineIndex","selectTime","increment","times","newTime","time","timeStr","timelineBlockIndex","setSlideAnimation","Paper","elevation","margin","Grid","container","direction","justify","alignItems","item","xs","md","lg","Slide","in","mountOnEnter","unmountOnExit","onExited","onEnter","Card","CardContent","Typography","component","gutterBottom","newProps","timeDisplay","seperateTimeline","singleTimelineCard","border","sm","singleBlockCard","GamifiedDashboardViewComponent","IconButton","users","0","1","2","customBubble","senderName","ChatBox","messages","useCustomBubble","curr_user","shajs","uIdHash","prevBlockId","prevBlockState","currRef","update","digest","getChatFeedFromDb","input","preventDefault","pushMessage","recipient","blockSubmitter","blockState","author","off","dataSnapshot","items","chatData","currId","Message","chatBubble","maxHeight","showSenderName","onSubmit","onMessageSubmit","placeholder","ViewBlockListComponent","addToStory","placement","showTooltip","commitToStoryTooltip","selectOption","renderReviewOptionList","renderSubmitterOptionList","getRandomReviewer","giveBlockToNextReviewer","renderSuccessfulOptionList","handleCommitJoyrideCallback","option","blockStr","bpID","remove","delete","oldKey","newBlockId","verificationHash","latestBlock","referenceBlock","committedBlock","newTitle","blockToRemove","softBlock","newKey","reviewerList","reviewersStr","bpDetails","reviewers","reviewersList","randomReviewer","reviewersMap","List","ListItem","button","Avatar","ListItemText","primary","canCommit","UpvoteStatusComponent","total","criterion","upVotes","ViewBlockComponent","chatList","reviewerRef","renderChat","renderOptions","renderUpvoteStatus","renderNumber","getReviewersStatusForBlock","modifyReviewerMap","isImageUrl","supportingDetails","dateTimeString","data-tip","data-for","numStr","blId","rMap","reviewerId","finishAddingBlockToStoryTooltip","refreshBlockprobe","closeSideBar","renderBlockEntities","renderBlockNumbers","blockNumber","renderDateTime","isPublicView","place","VisualizeOptionsListComponent","shouldEnableMultipleContributors","dashboard","shareStory","dashboardTooltip","shareStoryTooltip","newVisualisation","selectVisualisation","selectedVisualisation","selectNewVisualisation","permit","isViewOnly","writePostListToDb","postList","successFn","errorFn","allPosts","posts","currPostPage","post","get","snapshot","removeNotification","notification","nId","removeInviteStoryNotification","userIdHash","bId","addUserToBlockprobe","allPromises","userObj","role","firestoreWrite","ViewBlockprobePublicComponent","changeSelectedBlock","onSetSelectedBlockSidebarOpen","genesisBlockId","blockprobeTitle","bpDetailsLastTs","blockprobeSummary","modifyRef","blockStatus","summaryList","selectedBlockSidebarOpen","menuBarOpen","testList","isPageLoading","visulationType","pageview","onSetMenuBlockSidebarOpen","renderVisualisation","addEdge","createInvestigationGraph","isSummaryBlock","createSummaryList","generateMultiSelectEntityList","getDataWrapper","visualisation","tempState","timelineBlockStatus","entityMap","new","currTs","prevTs","prevKey","currKey","checkedChildren","childBlockId","traverseBlockTree","entity_i","entity_j","sList","entityKey","existingEntities","addBlocksToProbe","finalTimelineList","finalBlockList","getBlockprobe","langPromise","Promise","all","results","blockprobeSnapshot","imagesSnapshot","langSnapshot","createBlockprobe","empty","getImages","exists","MiniDashboardView","fonts","font","weights","subsets","fontFamily","fontWeight","GamifiedDashboardView","sidebar","onSetOpen","pullRight","defaultSidebarWidth","position","parentElement","renderFullDashboard","renderSingularPage","ErrorBoundary","info","errorTitle","toString","errorTotal","exception","description","fatal","ViewBlockprobePublicWrapper","match","params","viewType","Redirect","UserBlockprobesComponent","maxBlockprobeTitleChar","addBlockprobe","draftBlockprobe","toolTipSteps","createStoryStep","clickOnStoryStep","showToolTips","createStory","buildStorytooltip","addTitleAndSummary","clickOnStory","clickOnStoryEnabler","buildStory","isBlockprobeBeingCreated","isValidBlockprobe","renderSingleBlockprobeItem","addCancelBlockprobe","renderDraftBlockprobe","handleChange","startTooltipTour","handleCreateStoryJoyrideCallback","handleClickOnStoryJoyrideCallback","convertBlockprobeMapToList","blockprobeId","selectBlockprobe","blockprobe","selectedBlockprobe","secondary","firstBlock","details","active","isActive","nick","nickPhoneHash","userDetails","TextField","onChange","multiline","rowsMax","rows","textColor","shouldUpdate","blockProbe","isSubmit","showTooltips","script","createElement","scriptText","createTextNode","appendChild","head","scriptFb","scriptFbText","blockprobeMap","blockprobeTempList","blockprobeListRender","blockprobes","flexWrap","display","ShareBlockprobeComponent","urlPrefix","gameUrlPrefix","blocksUploaded","imageUploaded","didPublishBlocksInSession","didPublishImagesInSession","unpublishingBlocks","unpublishingImages","isBlockprobeAlreadyPublished","publicLink","socialMedia","renderShareScreen","unpublishStory","publishStory","addStoryToWall","removeStoryFromWall","isAnyOptionClicked","isStoryAlreadyAdded","bp","updatePosts","newPosts","gameUrl","FacebookShareButton","FacebookIcon","round","hashtag","WhatsappShareButton","WhatsappIcon","docs","LanguageSettingsComponent","firstLangSelectList","selectedLang","currentLangLabel","generateLangLists","canSubmit","submitLanguage","selectedEntity","selectedLangLabel","langSelected","firstLangClicked","Transition","forwardRef","BlockprobeSettingsComponent","changeCriterion","newCriterion","step","viewerId","contributorId","creatorId","prevCreatorId","selectedUser","creatorMessageId","addingUser","dialogType","dialog","userDialog","dialogText","renderBlockprobeSettings","modifyBlockProbeSettings","renderAddViewers","renderAddContributors","renderAddCreators","renderAccountSettings","renderUserList","renderUser","renderUserDialog","clickUser","removeUser","getMessage","toggleDialog","performAction","selectedUserId","softBlockprobeToRemove","coUsers","defunctBlockprobe","shouldModify","softBlockprobeToAdd","currMem","bpSnapshot","notifSnapshot","shaVal","newDetails","classes","Slider","DbUtils","renderStr","marginBotton","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","DraftBlockEvidenceView","isClicked","newEvidence","isImage","isImageUploading","getEvidenceViewOnly","clickEvidenceNotInDraft","getEvidenceDraft","removeEvidence","updateEvidence","cancelEvidenceAction","onDrop","uploadEvidenceImageToDb","deleteEvidenceImageFromDb","lastChar","picture","latestPicture","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","compressedFile","path","log","pathRef","put","getDownloadURL","maxRows","minRows","borderWidth","borderStyle","borderColor","paddingTop","minHeight","borderTop","overflow","DraftBlockNumberView","newNumber","renderViewOnlyNumber","getNumberDraft","clickNumberNotInDraft","cancelNumber","removeNumber","updateNumber","Checkbox","checked","isChecked","toggleChange","MonthPicker","monthList","newDate","monthClicked","selectedMonthBadgeClicked","validateMonth","generateMonthList","selectedMonth","DraftBlockComponent","DAY","addDate","addTime","deleteDraftBlockDialog","commitDraftBlockDialog","commit","selectedDateStyle","draftBlockTour","draftBlockTooltip","placementBeacon","datetime","changeDateStatus","changeTimeStatus","renderDate","renderTime","renderTimeOption","makeEntityUppercase","addEntityToList","handleKeyDown","addEvidence","addNumber","singleBlockEvidence","singleBlockNumber","commitDraftBlock","saveDraftBlock","submitDraftBlock","cancelDraftBlock","removeDraftBlock","populateEntitiesAndEvidencesToBlock","isDateChecked","toggleDateStyle","toggleDeleteBlockDialog","getDate","getMonth","getFullYear","currDate","hour","getHours","minute","getMinutes","oldEntities","draftBlock","oldEntitiesDict","consideredEntitiesDict","entityPane","entityArr","slice","isEntityAlreadyPresent","entityListIndex","hour24","oldEvidence","isUpdate","isDelete","newEv","oldNumber","newNum","evidenceType","updateBlock","setFullYear","setMonth","setDate","setHours","setMinutes","listItem","renderEvidenceList","renderNumberList","rowsMin","onKeyDown","minWidth","setSeconds","setMilliseconds","EditSingleBlock","SingleUserBlock","isBlockClicked","clickBlockInDraft","revertBlockInDraft","clickBlockNotInDraft","updateDraftBlock","isMultiSelect","multiSelectBlocks","selectedDraftBlockId","finishTooltip","isBlockSelectedInMultiselect","oldBlock","updateType","isNewBlock","addDraftBlock","commitBlockToBlockprobe","deleteNewBlock","deleteDraftBlock","renderDraftBlock","renderViewOnlyBlock","OcrComponent","loadingText","fileName","pictures","showPreview","functions","uploadOcrFileToDb","getText","clickSubmit","togglePreviewImages","URL","createObjectURL","ocrFunc","httpsCallable","finResult","textPromises","textPromise","addText","withIcon","buttonText","singleImage","imgExtension","maxFileSize","withPreview","ArticleLinkComponent","isValidLink","getArticleText","articleFunc","result","FilterTextComponent","delimiters","oldText","canUndo","isValidDelimter","undoOperation","toggleDelimiterPreview","setDelims","togglePreview","lDelim","rDelim","shouldInclude","prev2","prev1","delimText","nonDelimText","isNewlineBtwParas","shouldAdd","pop","TranslateTextComponent","oldTexts","canPreview","translateText","previewText","submitText","undoAction","translatedText","setTranslatedText","currText","updateText","translateFunc","BulkBlockEditable","html","delims","htmlToText","unmakeHtml","formatHtml","removeExtraEffects","getDelimiters","htmlStr","newHtml","fromString","RegExp","delim","BulkDraftBlockComponent","handleKeyPress","oldValue","translatedValue","isSavingBlocks","isLoadingText","isSavingText","openOcr","openArticleLink","openFilterText","openTranslateText","openConfirmDialog","placeholderOld","addBlocks","addBlocksTooltip","para","previewEditorType","textarea","sendMessage","getParas","formatParas","isValidNlpEntity","isDate","isLocation","isRepeatedNlpEntity","saveDraftInBulk","closeAdvancedTabs","toggleAdvancedTab","isAnyAdvancedTabOpened","reformText","deleteExistingBulkText","closeBulkDraft","saveBulkDraft","toggleSaveDialog","getBulkPreviewText","currentPara","allParas","newPara","body","paraBody","paraEntites","sentence","prev","nlpEntity","nlpItem","nounType","mentions","metadata","nlpKey","bulkBlocks","draftBlocks","concatSummaryText","nlpEntities","nlpCommonNounEntities","nlpDates","nlpLocations","entitiesFunc","salience","A","B","day","newDraftBlock","reduce","unique","o","some","obj","addDraftBlocksInBulk","bulkText","allDocs","deletePromises","deletePromise","writePromises","textPage","writePromise","cancelBulkDraftBlock","orderBy","focus","fontStyle","closeComponent","inputRef","tag","onKeyPress","onKeyUp","overflowY","EntityPaneView","haveEntitiesLoaded","entityPresent","cancelButton","initEntities","removeEntity","clickOkayButton","addEntitiesInBulk","closeEntityPane","isEntityPresent","canRemove","updateEntityPaneList","totalStr","entityPaneTooltip","filter","shouldFinishTooltips","ImagePaneView","selectedEntityUrl","changedEntities","uploadedImages","entityTabIndex","selectedTabIndex","hasUpdated","submitEntityImage","getImageOptions","getImageUrlFromFile","onChangeImageTab","removeImageFromDb","closeImagePane","isImagePresent","tasks","imageUploadtype","newImage","taskResult","selectedIndex","uploadFileToDb","lastIndex","onSelect","SingleEntityView","rename","isEntityNameChanged","renameEntity","deleteEntity","createBlockForEntityChange","fullBlock","newName","oldName","AddEdgeView","createFilterOptions","selectedEntities","confirmEdge","entityA","latestIndex","lastIndexDraftBlocks","getLatestIndex","Autocomplete","multiple","freeSolo","renderTags","getTagProps","Chip","newValue","renderInput","AddStarEdgesView","baseEntity","timeCurr","commitMultipleBlocksToBlockprobe","commitBlocksToBlockprobe","AddSingleTopicView","AddTimeView","confirmTime","UserBlocksComponent","displaySingleEntity","entityPaneList","successBlocks","toReviewBlocks","inReviewBlocks","blockStateMap","graphViewAddType","multiSelectedBlocks","imageUploading","blocksUploading","viewPublishLink","multiSelectDraftBlockStatus","isCreateBlockClicked","isCreateBulkBlockClicked","isEntityPaneOpen","isImagePaneOpen","commitBlock","selectedGraphNode","modifyBlockList","modifyBlockListWrapper","renderSingleBlock","renderSingleDraftBlock","renderBlockOptions","createBlock","createBulkBlock","cancelBulkBlock","openEntityPane","openImagePane","deleteMultipleDraftBlocks","commitMultipleDraftBlocks","updateStoryEntities","giveBlockToFirstReviewer","initEntityPane","setDashboardVisualisation","setShareVisualization","convertBlockMapToList","onSelectTab","toggleMultiSelect","toggleGraphOptionStyle","selectGraphNode","blockAuthor","currMap","blockIndex","newList","hasBeenRemoved","blockId","prevState","allEntitiesMap","allEntities","isSummary","toFixed","dummyBlock","currTime","args","entityPaneRef","runTransaction","transaction","isBulk","newDraftBlockId","onSnapshot","querySnapshot","docChanges","draftBlockId","currMultiSelectedBlocks","hasTooltipsFinished","tooltip","finishBuildingStoryTooltip","blockMap","blockTempList","graphNode","successBlocksList","successBlocksListRender","toReviewBlocksListRender","draftBlocksList","draftBlocksListRender","singleDraftBlocksListRender","inReviewBlocksListRender","AddSingleTopic","BpDetail","prevPropsValue","clickedOnEdit","limits","isValid","clickOnButton","newblock","ViewBlockprobePrivateComponent","langLoading","lastTitleIndex","isloading","menuClickFirst","preShareStory","preCommitToStory","commitToStory","viewDashboardView","bpDetailsDoc","bpUsersRef","bpLangRef","closeSelectedBlockSidebar","startAddBlockToStoryTooltip","finishOpenMenuForDashboard","finishDashboardView","startShowingShareStoryTooltip","finishShareStoryTooltip","writeShortBlocktree","getBlockTree","getLatestTimestamp","getLatestBlocks","buildBlocktree","commitSingleBlockToBlockprobe","prevTitle","currBlockprobe","modifyBlockprobe","loadingState","timestampLatest","latestTimestamp","where","latestBlocks","latestTime","userVal","unsub","unsubLang","task","lastTs","UserWall","visualizedBps","isEditSummary","newSummary","renderSinglePost","clickOnVisualizeButton","clickOnEdit","visMap","isPrivate","clickOnSave","postsRender","UserNotifications","selectedNotificationId","renderSingleNotification","renderStoryInviteNotifications","clickOnNotification","notifications","notificationId","notif","SingleGameListItemComponent","playGame","viewResults","spacing","CardActions","size","removeGame","GameListPrivate","isLoading","currGameList","addGameList","newGame","addGame","writeToDb","singleGameListItem","renderGameListFull","confirmGame","isValidGame","gameId","game","gameListId","games","displayList","shareUrl","return","returnNewGame","UserGames","areGameListsLoading","userGameLists","createGameList","draftGameList","selectGame","removeGameList","getList","toggleCreateGameList","renderGameLists","renderNewGameForm","isValidGameList","returnToGameLists","getGameLists","getGameListsShort","updateShortenedGameListsToDb","getNewGameListsTillThisSession","listenToGameListsDuringSession","gameLists","latestTs","allGameLists","currentGameLists","gameList","gameListSoft","gameListPublic","selectGameList","selectedUserGame","gameMap","userGamesTempList","userGamesRender","renderSingleUserGame","returnToGameList","UserSession","isUserSignedIn","showLogin","isWallOpened","isGameListOpened","isNotificationsOpened","selectedBlockprobeId","selectedGameListId","areBlockprobesLoading","landingPage","journalist","logo","JournalistBackground","police","politician","LawmakerBackground","teacher","TeacherBackground","currBackgroundIndex","allBackgrounds","tabValue","getUiConfig","getAndSetUser","loggedInView","loggedInContent","loggedOutView","clickLoginOption","getBlockprobes","getBlockprobesShort","getNewBlockprobesTillThisSession","listenToBlockprobesDuringSession","updateShortenedBlockprobesListToDb","createBlockprobeList","addBlockprobeToList","addNotificationToList","removeBlockprobeFromList","cueCardViewV2","returnToViewBlockprobes","getUserWall","getUserNotifications","buildUserWall","viewWall","viewNotifications","viewGameList","renderGeneralLoggedInView","handleTabChange","changeOpacity","onBackButtonPressed","listId","provider","defaultCountry","blockprobeDic","newBlockprobe","allBlockprobes","currentBlockprobePage","bpKey","userData","ID","setItem","removeItem","location","oldState","notificationNumber","AppBar","Toolbar","flexGrow","Badge","badgeContent","logout","querySelector","selectedStr","mainLogoList","MainLogo","currDetails","square","Tabs","indicatorColor","aria-label","Tab","GamifiedResultsComponent","topPerformance","latestPerformances","topTimelinePerformance","formatEntityStats","renderSinglePerformance","getData","allScores","queryTop","limit","queryTimelineTop","promises","resultTop","resultLatest","resultTimelineTop","topScores","scoreDetails","timelineTopScores","bpTitle","newEntityStats","gameType","isEntityStatsNewType","topPerformanceRender","performance","topTimelinePerformanceRender","GamifiedResultsWrapper","displayedUserId","isValidUserId","displayUserScore","PublicWallComponent","doesNotExist","opts","playerVars","autoplay","GameListComponent","videoId","onReady","_onReady","App","Switch","Route","exact","Boolean","hostname","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.348bcdfd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\nimport './SummaryView.css';\nimport ReactGA from 'react-ga';\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport { isNullOrUndefined } from 'util';\n\nclass SummaryViewComponent extends React.Component {\n\n    constructor(props){\n      super(props);\n      this.state = {\n          summBlocks :[\n            /*  {\n                  title:\"test 1\",\n                  summary:\"This is the test1 stuff.\"\n              },\n              {\n                title:\"test 2\",\n                summary:\"This is the test2 stuff.\"\n            }*/\n          ],\n          summBlockIdx: 0,\n          isContentActive: true\n      }\n      this.getTitle = this.getTitle.bind(this);\n      this.getSummary = this.getSummary.bind(this);  \n      this.removeHashedIndex = this.removeHashedIndex.bind(this);    \n      this.clickChevron = this.clickChevron.bind(this);\n      this.clickSummaryBlock = this.clickSummaryBlock.bind(this);\n      \n      ReactGA.initialize('UA-143383035-1');\n    }\n\n    removeHashedIndex(a){\n      a = a.trim();\n      var startI = 0;\n      if(a.length>0 && a[0]=='#'){\n          for(var i=1; i<a.length; i++){\n              startI = i;\n              if(a.charAt(i)==' '){\n                return a.substring(startI).trim();\n              }\n          } \n          return '';   \n      }\n      return a;\n  }\n\n  clickSummaryBlock(){\n    if(this.props.summaryBlocks && this.state.summBlockIdx < this.props.summaryBlocks.length\n       && this.state.summBlockIdx >=0){\n        ReactGA.event({\n          category: 'select_summaryBlock',\n          action: 'Select ' + JSON.stringify(this.props.summaryBlocks[this.state.summBlockIdx]),\n          label: JSON.stringify(this.props.summaryBlocks[this.state.summBlockIdx])\n        });\n        this.props.selectBlock(this.props.summaryBlocks[this.state.summBlockIdx]);\n      }\n  }\n  \n\n    componentDidMount() {\n        this.timeout = setInterval(() => {\n          if(!isNullOrUndefined(this.props.summaryBlocks)){\n            let currentIdx = this.state.summBlockIdx;\n            let currArrSize = Math.max(1,this.props.summaryBlocks.length);\n            this.setState({isContentActive: false});\n            const scope = this;\n            this.timeout = setTimeout(function() {\n              scope.setState({ \n                summBlockIdx: (currentIdx + 1)%(currArrSize),\n                isContentActive: true\n              });\n\n          },500);\n        }\n        }, 11000);\n\n\n      }\n\n      getTitle(){\n          if(isNullOrUndefined(this.props.summaryBlocks) || this.props.summaryBlocks.length==0)\n            return '';\n          return this.removeHashedIndex(this.props.summaryBlocks[this.state.summBlockIdx].title);\n      }\n\n      getSummary(){\n        if(isNullOrUndefined(this.props.summaryBlocks) || this.props.summaryBlocks.length==0)\n          return '';\n        return this.props.summaryBlocks[this.state.summBlockIdx].summary;\n    }\n\n    clickChevron(forward){\n      if(!isNullOrUndefined(this.props.summaryBlocks)){\n        let currentIdx = this.state.summBlockIdx;\n        let currArrSize = Math.max(1,this.props.summaryBlocks.length);\n        if(forward){\n          currentIdx = (currentIdx+1)%currArrSize;\n        }\n        else{\n          currentIdx = (currentIdx+currArrSize-1)%currArrSize;\n        }\n\n        this.setState({summBlockIdx: currentIdx});\n      }\n    }\n\n    render(){\n\n        return (\n          \n          <div className=\"summary-container\">\n              <div style={{width:'5%', cursor:'pointer', transition:'0.5s'}} >\n                  <ChevronLeft className='summaryContent-nav'\n                  onClick={() => { this.clickChevron(false)}}/>\n              </div>\n              <div\n              className = 'color-gradient summaryView-container' \n              onClick={() => { this.clickSummaryBlock()}}\n              >\n              <ReactCSSTransitionGroup transitionName=\"summaryContent\"\n                transitionAppear={true}\n                transitionAppearTimeout={500}\n                transitionEnter={true}\n                transitionEnterTimeout={500}\n                transitionLeave={true}\n                transitionLeaveTimeout={500}\n                >\n                {this.state.isContentActive?\n                        <div>\n                                <div className='summaryView-title'>{this.getTitle()}</div>\n                                <p className='summaryView-desc'>{this.getSummary()}</p>\n                        </div>\n                                :\n                                null              \n                }\n              </ReactCSSTransitionGroup>\n              </div>\n              <div style={{width:'5%', cursor:'pointer', transition:'0.5s'}}>\n                <ChevronRight className='summaryContent-nav' \n                onClick={() => { this.clickChevron(true)}}/>\n              </div>\n            </div>\n        );\n    }\n}\nexport default SummaryViewComponent;","import React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport * as am4plugins_forceDirected from \"@amcharts/amcharts4/plugins/forceDirected\"; \nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4plugins_bullets from \"@amcharts/amcharts4/plugins/bullets\";\n\nam4core.useTheme(am4themes_animated);\n\nclass AmGraph extends React.Component {\n\n    constructor(props){\n      super(props);\n      //graph\n      \n      this.generateAmForceDirectedGraph = this.generateAmForceDirectedGraph.bind(this);\n      this.prepareData = this.prepareData.bind(this);\n      this.chart = {};\n      this.selectedLink = null;\n\n      this.previousChart = JSON.parse(JSON.stringify(props.graph));\n    }\n\n    prepareData(data){\n        var newData = [];\n\n        for(var i=0; data && i<data.length; i++){\n            var newEntry = JSON.parse(JSON.stringify(data[i]));\n            if(newEntry.image && newEntry.image.length>0){\n                newEntry.imageDisabled = false;\n                newEntry.circleDisabled = true;\n            }\n            else{\n                newEntry.imageDisabled = true;\n                newEntry.circleDisabled = false;\n            }\n\n            if(newEntry.label == 'ALL'){\n                newEntry.isNotAll = false;\n                newEntry.imageDisabled = true;\n                newEntry.circleDisabled = true;\n            }\n            else{\n                newEntry.isNotAll = true;\n            }          \n\n            newData.push(newEntry);\n        }\n\n        return newData;\n    }\n\n    generateAmForceDirectedGraph(){\n        // Create chart\n        var chart = am4core.create(\"chartdiv\", am4plugins_forceDirected.ForceDirectedTree);\n\n        // Create series\n        var series = chart.series.push(new am4plugins_forceDirected.ForceDirectedSeries());\n\n\n       //console.log(graph);\n        series.data = this.prepareData(this.props.graph);\n \n        // Set up data fields\n        series.dataFields.value = \"value\";\n        series.dataFields.name = \"label\";\n        series.dataFields.id = \"id\";\n        series.dataFields.children = \"children\";\n        series.dataFields.linkWith = \"link\";\n\n        // Add labels\n        series.nodes.template.label.text = \"{name}\";\n        series.nodes.template.tooltipText = \"{name}\";\n\n      //  /*\n        series.nodes.template.label.valign = \"bottom\";\n        series.nodes.template.label.fill = am4core.color(\"#000\");\n        series.nodes.template.label.dy = -30;\n      //  */\n        /*\n        series.nodes.template.label.hideOversized = true;\n        series.nodes.template.label.truncate = true;\n        */\n\n        series.fontSize = 13;\n        series.minRadius = 10;\n        series.maxRadius = 10;\n        series.nodes.template.label.propertyFields.hidden = 'circleDisabled';\n        series.nodes.template.togglable = false;\n        \n         // Configure circles\n         series.nodes.template.circle.propertyFields.disabled = 'circleDisabled';\n         series.nodes.template.outerCircle.propertyFields.disabled = 'circleDisabled';\n\n        // Configure icons\n        var icon = series.nodes.template.createChild(am4plugins_bullets.PinBullet);\n        icon.image = new am4core.Image();\n        icon.image.propertyFields.href = \"image\";\n        icon.circle.radius = 25;\n        icon.circle.strokeWidth = 0;        \n        icon.background.pointerLength = 0;\n        icon.background.disabled = true;\n        \n        var outlineCircle = icon.createChild(am4core.Circle);\n        outlineCircle.adapter.add(\"radius\", function (radius, target) {\n            var circleBullet = target.parent;\n            return circleBullet.circle.radius + 2;\n        });\n        outlineCircle.propertyFields.disabled = 'imageDisabled';        \n\n        // Configure All node icon\n        var allNode = series.nodes.template.createChild(am4core.Rectangle3D);\n        allNode.width = 35;\n        allNode.height = 15;\n        allNode.depth = 35;\n        allNode.angle = 45;\n        allNode.strokeOpacity = 1;\n        allNode.strokeWidth = 1.25;\n        allNode.stroke = am4core.color('black');\n        allNode.fillOpacity = 0.85;\n        allNode.fill = am4core.color('rgb(240,240,240)');\n        allNode.propertyFields.disabled = 'isNotAll';          \n\n        series.centerStrength = 0.55;\n        series.manyBodyStrength = -38;\n        series.links.template.strength = 0.5;\n        series.links.template.strokeWidth = 5;\n\n        var scope = this;\n\n        series.links.template.interactionsEnabled = true;        \n        series.links.template.clickable = true;\n        series.links.template.distance = 8.5;\n        series.links.template.events.on(\"hit\", function (event) {                \n            var link = event.target;            \n            link.strokeWidth = 9;        \n            if(scope.selectedLink)\n                scope.selectedLink.strokeWidth = 5;\n            scope.selectedLink = link;    \n            scope.props.selectEdge(link.source.label.currentText, link.target.label.currentText);\n        });\n\n        series.nodes.template.events.on(\"hit\", function (event) {                \n            var node = event.target;      \n            if(scope.selectedLink)\n                scope.selectedLink.strokeWidth = 5;\n            scope.selectedLink = null;    \n            scope.props.selectNode(node.label.currentText);\n        });\n\n        this.chart =  chart;\n    }\n\n\n    componentDidMount() {\n      this.generateAmForceDirectedGraph();\n    }\n\n    componentDidUpdate(){\n        if(JSON.stringify(this.previousChart) != JSON.stringify(this.props.graph)){\n            this.generateAmForceDirectedGraph();\n            this.previousChart = JSON.parse(JSON.stringify(this.props.graph));\n        }\n    }\n\n    render(){\n        return(\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"100%\" }}></div>\n        );\n    }\n}\nexport default AmGraph;","import { isNullOrUndefined } from \"util\";\n\nlet months = ['Jan','Feb','March','April','May','June','July','Aug','Sep','Oct','Nov','Dec'];\n\nexport const getShortenedListOfBlockprobes = (blockprobes) => {\n    let allBlockprobes = [], currentBlockprobePage = [];\n    let count=0;\n    if(blockprobes!=null){\n        Object.keys(blockprobes).map((key, index) => {\n            if(count && count%100==0){\n                let page = {\n                    blockprobe: currentBlockprobePage\n                };\n                allBlockprobes.push(page);\n                currentBlockprobePage = [];\n            }\n            let blockprobe = blockprobes[key];\n            if(blockprobe!=null){  \n                Object.keys(blockprobe).map((bpKey) => {\n                    if(blockprobe[bpKey]==undefined){\n                        delete blockprobe[bpKey];\n                    }\n                });\n                currentBlockprobePage.push(blockprobe);\n                count++;\n            }\n        } \n        );\n    }\n    if(currentBlockprobePage.length > 0){\n        let page = {\n            blockprobe: currentBlockprobePage\n        };\n        allBlockprobes.push(page);\n        currentBlockprobePage = [];\n    }    \n    return allBlockprobes;\n}\n\nexport const getShortenedListOfGameLists = (gameLists) => {\n    let all = [], currentGameLists = [];\n    let count=0;\n    if(gameLists!=null){\n        Object.keys(gameLists).map((key, index) => {\n            if(count && count%100==0){\n                let page = {\n                    gameLists: currentGameLists\n                };\n                all.push(page);\n                currentGameLists = [];\n            }\n            let gameList = gameLists[key];\n            if(gameList!=null){  \n                currentGameLists.push(gameList);\n                count++;\n            }\n        } \n        );\n    }\n    if(currentGameLists.length > 0){\n        let page = {\n            gameLists: currentGameLists\n        };\n        all.push(page);\n        currentGameLists = [];\n    }    \n    return all;\n}\n\nexport const getShortenedListOfBlockTree = (blockTree) => {\n        let bTree = blockTree;\n        let count=0;\n        let allBlocks = [], currBlockPage = [];\n        if(bTree!=null){\n            Object.keys(bTree).map((key, index) => {\n                if(count && count%100 == 0){\n                    let page = {\n                        blocks: currBlockPage\n                    };\n                    allBlocks.push(page);\n                    currBlockPage = [];\n                }\n                let block = bTree[key];\n                if(block!=null){\n                    if(block.previousKey)\n                        block['parent']=block.previousKey;\n                    if(!block.children)\n                        block['children']=[];    \n                    if(block.actionType){  \n                        Object.keys(block).map((bKey) => {\n                            if(block[bKey]==undefined){\n                                delete block[bKey];\n                            }\n                        });   \n                        currBlockPage.push(block);\n                        count++;\n                    }\n                }\n            } \n            );\n        }\n        if(currBlockPage.length > 0){\n            let page = {\n                blocks: currBlockPage\n            };\n            allBlocks.push(page);\n            currBlockPage = [];\n        }\n\n        \n        return allBlocks;\n        \n}\n\nexport const getShortenedListOfImages = (imageMapping) => {\n    \n    //Add images\n    let imageMap = imageMapping;\n    let countI=0;\n    let allImages = [], currImagePage = [];\n    if(imageMap!=null){\n        Object.keys(imageMap).map((key, index) => {\n            if(countI && countI%200==0){\n                let page = {\n                    images: currImagePage\n                };\n                allImages.push(page);\n                currImagePage = [];\n            }\n            var image = {\n                url: imageMap[key],\n                entity: key\n            };\n            if(image!=null){   \n                Object.keys(image).map((imKey) => {\n                    if(image[imKey]==undefined){\n                        delete image[imKey];\n                    }\n                });                \n                currImagePage.push(image);\n                countI++;\n            }\n        } \n        );\n    }\n    if(currImagePage.length > 0){\n        let page = {\n            images: currImagePage\n        };\n        allImages.push(page);\n        currImagePage = [];\n    }\n    return allImages;\n}\n\nexport const getShortenedListOfPosts = (posts) => {    \n    let count=0;\n    let allPosts = [], currPostPage = [];\n    if(posts!=null){\n        for(let i=0; i<posts.length; i++){\n                if(count && count%100 == 0){\n                    let page = {\n                        posts: currPostPage\n                    };\n                    allPosts.push(page);\n                    currPostPage = [];\n                }\n                let post = posts[i];\n                if(!isNullOrUndefined(post)){\n                    currPostPage.push(post);\n                    count++;        \n                }\n            }\n    } \n    \n    if(currPostPage.length > 0){\n        let page = {\n            posts: currPostPage\n        };\n        allPosts.push(page);\n        currPostPage = [];\n    }\n       \n    return allPosts;    \n}\n\nexport const getTextListForBulk = (text) => {\n    let textList = [];\n    let  curr = '';\n    for(let i=0;!isNullOrUndefined(text) && i<text.length; i++){\n        curr += text[i];\n        if(i && i%10000 == 0){\n            textList.push(curr);\n            curr  = '';\n        }\n    }\n    if(curr.length>0)\n        textList.push(curr);\n        \n    return textList;\n}\n\nexport const  extractBlockIndex = (block)=>{\n    if(isNullOrUndefined(block))\n        return null;    \n    \n    let title = block.title;\n    if(isNullOrUndefined(title))\n        return null;\n\n    let a =  title.trim(), aIndex = 0;\n    let isAExist = false;\n    if(a.length>0 && a.charAt(0)==='#'){\n        var num = '';\n        for(var i=1; i<a.length && a[i]!=' '; i++){\n            \n            if((!isNaN(parseInt(a.charAt(i), 10))) || a[i]==='.'){\n                num += a.charAt(i);\n            }\n            else{\n                if(num.length > 0){\n                    aIndex = parseFloat(num);\n                    isAExist = true;\n                }\n            }\n        }\n        if(num.length > 0){\n            aIndex = parseFloat(num);\n            isAExist = true;\n        }    \n    }\n    if(isAExist)\n        return aIndex;\n    return null;\n}\n\nexport const validateNumber = (text) => {\n    for(let i=0; text && i<text.length; i++){\n        let lastChar = text[i];\n        if(!((lastChar>='1' && lastChar<='9') || lastChar=='0'))\n            return false;\n    }\n    return true;\n}\n\nexport const appendCharToString = (str, char, totalLength) => {\n    let newStr = '';\n    let len = Math.max(0,totalLength - str.length);\n    for(let i=0; i<len; i++){\n        newStr += String(char);\n    }\n    newStr += str;\n    return newStr;\n}\n\nexport const getDateTimeString = (timelineBlock) => {\n    var ans = \"\";\n    if(timelineBlock.blockDate!=null){      \n        if(!isNullOrUndefined(timelineBlock.blockDate.month))  \n            ans = ans + months[timelineBlock.blockDate.month] + \" \";\n        if(!isNullOrUndefined(timelineBlock.blockDate.date))\n            ans = ans + timelineBlock.blockDate.date + \", \";\n        ans = ans + appendCharToString(String(timelineBlock.blockDate.year),'0',4) + \"  \";\n\n        if(timelineBlock.blockTime!=null){\n            var temp = \"\";\n            if(timelineBlock.blockTime.hours < 10){\n                temp = \"0\"; \n            }\n            temp = temp + timelineBlock.blockTime.hours;\n            ans = ans + temp + \":\";\n\n            temp = \"\";\n            if(timelineBlock.blockTime.minutes < 10){\n                temp = \"0\"; \n            }\n            temp = temp + timelineBlock.blockTime.minutes;\n            ans = ans + temp;\n        }\n    }\n    return ans;    \n}\n\nexport const isTitleHashtag = (str)=>{\n    //str is string\n    if(!isNullOrUndefined(str)){\n        str = str.trim();\n        if(str.length>0 && str[0]=='#')\n            return true;\n    }\n    return false;\n}\n\nexport const isEntitiesDollar = (str)=>{\n    //str is string;\n    // return true for $ [.....  ]\n    if(!isNullOrUndefined(str)){\n        str = str.trim();\n        if(str.length>2 && str[0]=='$'){\n            let i=1;\n            while(i<str.length && str[i]==' ')\n                i++;\n            if(str[i]=='['){\n                while(i<str.length && str[i]!=']')\n                    i++;\n                if(i<str.length && str[i]==']')\n                    return true;\n            }            \n        }\n    }\n    return false;\n}\n\nexport const getEntities =  (str) =>{\n    //Assuming string is of  form $[...]\n    let i=0;\n    let ans = [];\n    if(isNullOrUndefined(str))\n        return ans;\n    let start=0, end=0;\n    while(i<str.length && str[i]!='['){\n        i++;\n    }\n    start =  i+1;\n    while(i<str.length && str[i]!=']'){\n        i++;\n    }\n    end = i;\n    if(end >= str.length){\n        return ans;\n    }\n\n    let newStr = str.substring(start,end);\n    ans = newStr.split(',');\n    for(let j=0; j<ans.length; j++){\n        ans[j] = ans[j].trim();\n    }\n    return ans;\n}\n\nexport const isTitleSummary = (str)=>{\n    //str is string\n    if(isTitleHashtag(str)){\n        str = str.trim();\n        let startIndex = 0;\n        while(startIndex<str.length && str[startIndex] != ' '){\n            if(str[startIndex] == 's' || str[startIndex] == 'S')\n                return true;\n            startIndex++;\n        }\n    }\n    return false;\n}\n\nexport const removeTitleHashtag = (str)=>{\n    //str is string\n    if(isTitleHashtag(str)){\n        str = str.trim();\n        let startIndex = 0;\n        while(startIndex<str.length && str[startIndex] != ' '){\n            startIndex++;\n        }\n        if(startIndex < str.length){\n            str = str.substring(startIndex+1);\n        }\n        else{\n            str = '';\n        }\n    }\n    return str;\n}\n\nexport const getBlocksText = (blocks)=>{\n    //str is string\n    let ans = '';\n    if(!isNullOrUndefined(blocks)){\n        for(let i=0; i<blocks.length; i++){\n            if(!isNullOrUndefined(blocks[i].title) && blocks[i].title.trim().length>0){\n                let strLeftover = removeTitleHashtag(blocks[i].title);\n                if(strLeftover.length>0)\n                    ans += '# '+ removeTitleHashtag(blocks[i].title) + '\\n';\n            }\n            if(!isNullOrUndefined(blocks[i].summary) && blocks[i].summary.trim().length>0){\n                ans += blocks[i].summary + '\\n';\n            }\n            if(!isNullOrUndefined(blocks[i].entities) && blocks[i].entities.length>0){\n                let entityStr = \"$[\";\n                for(let j=0; j<blocks[i].entities.length;j++){\n                    if(j!=0)\n                        entityStr += ',';\n                    entityStr += blocks[i].entities[j].title.toLowerCase();\n                }\n                entityStr += \"]\\n\";\n                ans += entityStr;\n            }\n            ans += \"\\n\";            \n        }\n    }\n    return ans;\n}\n\nexport const sortBlocksCommon = (a, b, a_ts = 0, b_ts = 0)=>{\n    a = a.trim();        \n    b = b.trim();\n\n    var aIndex = 0, bIndex = 0, isAExist = false, isBExist = false;\n    if(a.length>0 && a.charAt(0)==='#'){\n        var num = '';\n        for(var i=1; i<a.length; i++){\n            \n            if((!isNaN(parseInt(a.charAt(i), 10))) || a[i]==='.'){\n                num += a.charAt(i);\n            }\n            else{\n                if(num.length > 0){\n                    aIndex = parseFloat(num);\n                    isAExist = true;\n                }\n            }\n        }\n        if(num.length > 0){\n            aIndex = parseFloat(num);\n            isAExist = true;\n        }    \n    }\n\n    if(b.length>0 && b.charAt(0)==='#'){\n        var num = '';\n        for(var i=1; i<b.length; i++){\n            \n            if((!isNaN(parseInt(b.charAt(i), 10))) || b[i]==='.'){\n                num += b.charAt(i);\n            }\n            else{\n                if(num.length > 0){\n                    bIndex = parseFloat(num);\n                    isBExist = true;\n                }\n            }\n        }    \n        if(num.length > 0){\n            bIndex = parseFloat(num);\n            isBExist = true;\n        }\n    \n    }\n\n    // A comes after b\n    if(!isAExist && isBExist)\n        return 1;\n\n    // A comes before b\n    if(isAExist && !isBExist)\n        return -1;\n\n    // A comes before b\n    if(isAExist && isBExist){\n        if(aIndex > bIndex)\n            return 1;\n        return -1;\n    }\n\n    if(a_ts > b_ts)\n        return 1;\n    else if(b_ts > a_ts)\n        return -1;\n\n    if(a > b)\n        return 1;\n\n    return -1;\n}\n\nexport const sortTimeline =(timelineList)=>{\n    timelineList.sort(function(b,a){\n    if(a.blockDate.year!==b.blockDate.year)\n        return a.blockDate.year - b.blockDate.year; \n        \n    if(a.blockDate.month == null)\n        return 1;\n    else if(b.blockDate.month == null)\n        return -1;\n\n    if(a.blockDate.month!==b.blockDate.month)\n        return a.blockDate.month - b.blockDate.month;        \n\n    if(a.blockDate.date == null)\n        return 1;\n    else if(b.blockDate.date == null)\n        return -1;\n\n    if(a.blockDate.date!==b.blockDate.date)\n        return a.blockDate.date - b.blockDate.date;\n\n     if(b.blockTime == null &&  a.blockTime!=null){\n         return 1;\n         //a is greater than or equal to if b has no time\n     }\n     else if(a.blockTime == null &&  b.blockTime!=null){\n        return -1;\n        //a is greater than or equal to if b has no time\n    }\n     \n     if(a.blockTime!=null && b.blockTime!=null){\n         if(a.blockTime.hours!==b.blockTime.hours){\n             return a.blockTime.hours - b.blockTime.hours;\n         }\n         if(a.blockTime.minutes!==b.blockTime.minutes){\n            return a.blockTime.minutes - b.blockTime.minutes;\n        }\n     }\n\n     //a is not null and b is not null OR both are fully equal\n     return sortBlocksCommon(a.title,b.title,a.timestamp,b.timestamp);\n    });\n\n    timelineList.reverse();\n}\n\nexport const filterText = (text) => {\n    let ans = '';\n    for(let i=0; !isNullOrUndefined(text) && i<text.length; i++){\n        if((text[i]>='1' && text[i]<='9') || (text[i]>='a' && text[i]<='z')\n            || (text[i]>='A' && text[i]<='Z') || (text[i]=='0') || \n            (text[i]=='.') || (text[i]=='?') || (text[i]==',') || (text[i]=='\"') || (text[i]=='\\'')\n            || (text[i]==' ') || (text[i]=='/') || (text[i]=='\\n'))\n            {\n                ans += text[i];\n            }\n        else{\n            ans += ' ';\n        }\n    }\n    ans += '\\n\\n';\n    return ans;\n}\n\nexport const isCharacterNumeric = (text) => {\n    if(!((text >='1' && text<='9') || text=='0' || text=='.'))\n        return false;\n    return  true;\n}\n\nexport const isCharacterAlphabet = (text) => {\n    if(!((text >='a' && text<='z') || (text >='A' && text<='Z')))\n        return false;\n    return  true;\n}\n\nexport const isCharacterAcceptableText = (text) => {\n    if(text =='.' || text==',' || text ==' ' || text =='%' || isCharacterAlphabet(text) || isCharacterNumeric(text))\n        return true;\n    return false;\n}\n\nexport const isValidDelimiter = (text) => {\n    if(!isNullOrUndefined(text)){\n        if(text.length > 2)\n            return false;\n        for(let i=0; i<2; i++){\n            if(text[i]=='\\n' || text[i]=='\\t' || text[i]==' ')\n                return false;\n        }\n        if(text.length==2){\n            if(text[0]==text[1])\n                return false;\n        }\n    }\n    return true;\n}\n\nexport const correctTextForSpeech = (text) => {\n    let ans = '';\n    if(!isNullOrUndefined(text)){\n        if(text.length)\n            ans += text[0];\n        for(let i=1; i<text.length;i++){\n            if(text[i-1]=='.' || text[i-1]==','){\n                if(!isCharacterNumeric(text[i]) && text[i]!='.' && text[i]!=' '){\n                    ans += ' ';\n                }\n            }\n            ans += text[i];\n        }\n    }\n    ans = ans.trim();\n    return ans;\n}\n\nexport const filterTextBasedOnDelimter = (text, lDelim, rDelim, shouldInclude) => {\n    let prev2 = ' ';\n    let prev1 = ' ';\n    if(!isNullOrUndefined(text)){\n        let flag=0;\n        let delimText = '';\n        let nonDelimText =  '';\n        for(let i=0; i<text.length; i++){\n            let isNewlineBtwParas = false;\n            if(prev2!='\\n' && prev1=='\\n' && text[i]=='\\n')\n                isNewlineBtwParas = true;\n\n            let shouldAdd = true;\n            if(text[i]==lDelim){\n                if(flag==0)\n                {\n                    shouldAdd = false;\n                    nonDelimText += '\\n';\n                }\n                flag++;\n            }\n            else if(text[i]==rDelim){\n                if(flag==1){\n                    shouldAdd = false;\n                    delimText += '\\n';\n                }\n                if(flag>0){\n                    flag--;\n                }                \n            }\n\n            if(flag==0 && shouldAdd){\n                nonDelimText += text[i];\n                if(isNewlineBtwParas){\n                    delimText += '\\n\\n';\n                }\n            }\n            else if(shouldAdd){\n                delimText += text[i];\n                if(isNewlineBtwParas){\n                    nonDelimText += '\\n\\n';\n                }\n            }\n            prev2 = prev1;\n            prev1 = text[i];            \n        }\n        if(shouldInclude)\n            return delimText;\n        return nonDelimText;\n    }\n    return text;\n}\n\n\nexport const HtmlBasedOnDelimter = (text, lDelim, rDelim, shouldInclude) => {\n    if(!isNullOrUndefined(text)){\n        let flag=0;\n        let ans = '';\n        for(let i=0; i<text.length; i++){\n            if(text[i]==lDelim){\n                if(flag==0)\n                {\n                    ans += text[i];\n                    ans += '<b class=\"filterTextStyle\">';  \n                    flag++;\n                    continue;                  \n                }\n                flag++;               \n            }\n            else if(text[i]==rDelim){\n                if(flag==1){\n                    ans += '</b>';\n                }\n                if(flag>0){\n                    flag--;\n                }                \n            }\n            ans += text[i];         \n        }\n        return ans;\n    }\n    return text;\n}\n\nexport const shouldUpdateText = (str, restrictedChars)=>{\n    for(let i=0;!isNullOrUndefined(str) && i<str.length; i++){\n        for(let j=0; !isNullOrUndefined(restrictedChars) && j<restrictedChars.length; j++){\n            if(str[i]==restrictedChars[j])\n                return false;\n        }\n    }\n    return true;\n}\n\nexport const isNumber = (str)=>{\n\n    //exception for single dash\n    if(str.length==1 && str[0]=='-')\n        return true;\n\n    if(isNaN(str))\n        return false;\n    return true;\n}\n\nexport const coalesceNumbers = (numbers)=>{\n    let nMap = {};\n    for(let i=0;!isNullOrUndefined(numbers) && i<numbers.length; i++){\n        let key = numbers[i].key;\n        let value = numbers[i].value;\n        if(!(key in nMap)){\n            nMap[key] = 0;\n        }\n        if(!isNaN(Number(nMap[key])))\n            nMap[key] += Number(value);\n    }\n    let finalAns = [];\n    Object.keys(nMap).forEach((key) => {\n        finalAns.push({\n            key: key,\n            value: nMap[key]\n        });\n    })\n    return finalAns;\n}\n\nexport const coalesceBlockNumbers = (blocks)=>{\n    let nos = [];\n    for(let i=0; i<blocks.length;i++){\n        if(!isNullOrUndefined(blocks[i].numbers)){\n            for(let j=0; j<blocks[i].numbers.length;j++){\n                nos.push(blocks[i].numbers[j]);\n            }\n        }\n    }\n    nos = coalesceNumbers(nos);\n    return nos;\n}\n\nexport const makeFirstLetterUppercase = (str)=>{\n    if(isNullOrUndefined(str))\n        return '';\n    str = str.trim();\n    if(str.length==0)\n        return str;\n    let out = str.toUpperCase().charAt(0) + str.substring(1).toLowerCase(); \n    return out;\n}\n\nexport const getEntityChange = (entity, ts, entityChanges)=>{\n    let defaultEntity = {change: entity, ts: ts};\n    if(!(entity in entityChanges))\n        return defaultEntity;\n    \n    let changes = entityChanges[entity];\n    if(isNullOrUndefined(changes))\n        return defaultEntity;\n\n    //Binary search to find lowest\n    let l = 0, r = changes.length-1; \n    while(l<r){\n        let m = Math.floor(l + (r-l)/2);\n        if(changes[m].ts < ts){\n            l = m+1;\n        }\n        else{\n            r = m;\n        }\n    }\n\n    //handle border cases\n    while(l<changes.length && changes[l].ts < ts)\n        l++;\n    \n    if(l>=changes.length){\n        return defaultEntity;\n    }\n    return changes[l];\n}\n\nexport const deduplicateBlocks = (blockList)=>{\n    let ans = [];\n    for(let i=0; !isNullOrUndefined(blockList) && i<blockList.length; i++){\n        if(i==0 || (blockList[i].title != blockList[i-1].title) || (blockList[i].summary != blockList[i-1].summary))\n                ans.push(blockList[i]);\n    }\n    return ans;\n}\n\nexport const modifyBlockEntities = (blockList, blockTree, entityChanges)=>{\n    if(isNullOrUndefined(blockList) || isNullOrUndefined(blockTree)  || isNullOrUndefined(entityChanges))\n        return blockTree;\n\n    for(let i=0; i<blockList.length; i++){\n        let currEntityMap = {};\n        let currBlock = blockTree[blockList[i]];\n        if(!isNullOrUndefined(currBlock)){\n            let entities = currBlock.entities;\n            for(let j=0;!isNullOrUndefined(entities) && j<entities.length; j++){\n                let currEntity = entities[j];\n                if(!(currEntity.title in entityChanges)){\n                    //No change for this entity, add as is\n                    currEntityMap[currEntity.title] = '';\n                }\n                else{\n                    //some change for the entity\n                    let currEntityStr = currEntity.title;\n                    let ts = currBlock.timestamp;\n                    let newEntityStr = null; //dummy since they are not equal\n                    while(!isNullOrUndefined(currEntityStr)){\n                        // console.log(currEntityStr);\n                        // console.log(ts);\n                        let newEntity = getEntityChange(currEntityStr, ts, entityChanges);\n                        newEntityStr = newEntity.change;                        \n                        if(currEntityStr==newEntityStr)\n                            break;\n                        currEntityStr = newEntityStr;\n                        ts = newEntity.ts;\n                    }\n                    if(!isNullOrUndefined(newEntityStr)){\n                        currEntityMap[newEntityStr] = '';\n                    }\n                }\n            }\n        }\n        // console.log(currEntityMap);\n        let newEntities = [];\n        for(let entity in currEntityMap){\n            newEntities.push({\n                title: entity,\n                type: \"None\"\n            })\n        }\n        blockTree[blockList[i]].entities = newEntities;\n    }\n    return blockTree;\n}\n\nexport const traverseGraphNode = (graph, nodeId, visited, islandCount)=>{\n    let node = graph[nodeId];\n    let label = nodeId;\n    let edges ={};\n    if(label in visited)\n        return;\n    if(!isNullOrUndefined(node.edges)){\n        edges = node.edges;\n    }\n    visited[label] = {\n        island: islandCount,\n        count: Object.keys(edges).length\n    }\n\n    for(let edgeKey in edges){\n        traverseGraphNode(graph,edgeKey,visited,islandCount);   \n    }    \n}\n\nexport const getGraphIslandsAndValues = (graph)=>{\n    // console.log(graph);\n    if(isNullOrUndefined(graph))\n        return {};\n\n    let visited = {};\n    let islandCount = 0;\n    for(let key in graph){\n        if(!(key in visited)){\n            traverseGraphNode(graph,key,visited,islandCount);\n            islandCount++;        \n        }\n    }\n\n    // console.log(visited);\n    let islands =  {};\n    for(let key in visited){\n        let island = visited[key].island;\n        let count = visited[key].count;\n        if(!(island in islands)){\n            islands[island] = {\n                count: -1,\n                node: null\n            }\n        };\n        if(count > islands[island].count){\n            islands[island] = {\n                count: count,\n                node: key\n            }\n        }\n    }\n\n    return islands;\n}\n\nexport const languageCheck = (lang, voice)=>{\n\n    if(isNullOrUndefined(lang))\n        lang = 'en';\n    \n    if(isNullOrUndefined(voice))\n        return false;\n\n    let name = voice.name;\n    let vLang = voice.lang;\n\n    if(lang == 'en'){\n        if(name.toLowerCase().includes('eng') || name.toLowerCase().includes('catherine'))\n            return true;\n    }\n    else if(lang == 'hi'){\n        if(vLang.toLowerCase().includes('hi') || vLang.includes('हिंदी') \n            || name.includes('हिंदी') || name.toLowerCase().includes('hindi'))\n            return true;\n    }\n    return false;\n}\n\nexport const getTotalEdges = (investigationGraph)=>{\n    let totalEdges = 0;\n    if(isNullOrUndefined(investigationGraph))\n        return totalEdges;\n\n    for(let key in investigationGraph){\n        if(!isNullOrUndefined(investigationGraph[key].edges)){\n            totalEdges += Object.keys(investigationGraph[key].edges).length;\n        }\n    }\n    return totalEdges/2;\n}\n\nexport const isAcceptableChar = (charA, acceptableStr)=>{\n    for(let i=0; !isNullOrUndefined(acceptableStr) && !isNullOrUndefined(charA) && i<acceptableStr.length; i++){\n        if(charA == acceptableStr[i])\n            return true;\n    }\n    return false;\n} \n\nexport const isEntityPartOfString = (str,  entity)=>{\n    if(isNullOrUndefined(entity) || isNullOrUndefined(str) || entity.length == 0 || str.length == 0)\n        return false;\n\n    let  pos=0, i=-1;\n    while(pos!=-1){\n        pos = str.indexOf(entity, i + 1);\n        i = pos;      \n        if((i==0 || (isAcceptableChar(str[i-1],' ,.'))) && \n        (i+entity.length==str.length || (isAcceptableChar(str[i+entity.length],' ,.'))))\n            return true;\n    }\n    return false;\n}","export const visualizationsNotFound = {\n    'en': 'Visualizations not found',\n    'hi': 'नहीं मिला',\n    'ml': 'കാണ്മാനില്ല',\n    'mr': 'सापडले नाही',\n    'bn': 'ভিজ্যুয়ালাইজেশন পাওয়া যায় নি'\n}\n\nexport const selectEntity = {\n    'en': 'Select any entity/topic',\n    'hi': 'किसी भी इकाई / विषय को दबाएं',\n    'ml': 'ഏതെങ്കിലും എന്റിറ്റി / വിഷയം തിരഞ്ഞെടുക്കുക',\n    'mr': 'कोणतीही घटक / विषय निवडा',\n    'bn': 'যে কোনও সত্তা / বিষয় নির্বাচন করুন'\n};\n\nexport const selectTwoEntities = {\n    'en': 'Select two topics to connect',\n    'hi': 'दो विषयों का चयन करे',\n    'ml': 'രണ്ട് വിഷയങ്ങൾ തിരഞ്ഞെടുക്കുക',\n    'mr': 'दोन विषय निवडा',\n    'bn': 'দুটি বিষয় নির্বাচন করুন'\n};\n\nexport const selections = {\n    'en': 'Selections',\n    'hi': 'विषय',\n    'ml': 'തിരഞ്ഞെടുക്കലുകൾ',\n    'mr': 'निवडी',\n    'bn': 'নির্বাচন'\n}\n\nexport const mindMap = {\n    'en': 'Mindmap',\n    'hi': 'मन नक्शा',\n    'ml': 'മൈൻഡ്മാപ്പ്',\n    'mr': 'मनाचा नकाशा',\n    'bn': 'মাইন্ড মানচিত্র'\n}\n\nexport const mindMapTooltips = {\n    title:{\n        'en': 'Mindmap view',\n        'hi': 'मन नक्शा',\n        'ml': 'മൈൻഡ്മാപ്പ് കാഴ്ച',\n        'mr': 'मनाचा नकाशा',\n        'bn': 'মাইন্ড মানচিত্র'    \n    },\n    desc:{\n        'en': 'Visualise the story as a mindmap! Select any topic from the mindmap to read all about that topic.',\n        'hi': 'कहानी को मन-नक्शा के रूप में देखें! उस विषय के बारे में पढ़ने के लिए मन-नक्शा से किसी भी विषय को दबाएं।',\n        'ml': 'സ്റ്റോറി ഒരു മൈൻഡ് മാപ്പായി ദൃശ്യവൽക്കരിക്കുക! ആ വിഷയത്തെക്കുറിച്ച് എല്ലാം വായിക്കാൻ മൈൻഡ്മാപ്പിൽ നിന്ന് ഏതെങ്കിലും വിഷയം തിരഞ്ഞെടുക്കുക.',\n        'mr': 'कल्पित मनाने कल्पित कथा बनवा! त्या विषयाबद्दल सर्व वाचण्यासाठी मानसिकतामधून कोणताही विषय निवडा',\n        'bn': 'কাহিনীটিকে মন মানচিত্র হিসাবে ভিজ্যুয়ালাইজ করুন! সেই বিষয়টি সম্পর্কে সমস্ত কিছু পড়তে মনম্যাপ থেকে যে কোনও বিষয় নির্বাচন করুন।'    \n    }\n}\n\nexport const gameifiedMindMapTooltips = {\n    title:{\n        'en': 'Match the topics',\n        'hi': 'मन नक्शा',\n        'ml': 'മൈൻഡ്മാപ്പ് കാഴ്ച',\n        'mr': 'मनाचा नकाशा',\n        'bn': 'মাইন্ড মানচিত্র'    \n    },\n    desc:{\n        'en': 'Fill the connections in the mindmap! Select two nodes to try to connect them! Correct connection will increase your score.',\n        'hi': 'मन नक्शा में अंतराल भरें! उन्हें कनेक्ट करने का प्रयास करने के लिए दो नोड का चयन करें! सही कनेक्शन आपके स्कोर को बढ़ाएगा।',\n        'ml': 'മൈൻഡ്മാപ്പിലെ വിടവുകൾ പൂരിപ്പിക്കുക! അവ ബന്ധിപ്പിക്കാൻ ശ്രമിക്കുന്നതിന് രണ്ട് നോഡുകൾ തിരഞ്ഞെടുക്കുക! ശരിയായ കണക്ഷൻ നിങ്ങളുടെ സ്കോർ വർദ്ധിപ്പിക്കും.',\n        'mr': 'मनातील नकाशामधील अंतर भरा! त्यांना जोडण्याचा प्रयत्न करण्यासाठी दोन नोड निवडा! योग्य कनेक्शनमुळे आपली धावसंख्या वाढेल.',\n        'bn': 'শূন্যস্থান পূরণ করুন মনম্যাপে! দুটি সংযোগ স্থাপনের চেষ্টা করার জন্য দুটি নোড নির্বাচন করুন! সঠিক সংযোগ আপনার স্কোর বাড়িয়ে তুলবে।'    \n    }\n}\n\nexport const gameifiedTimelineTooltips = {\n    title:{\n        'en': 'Fill the dates',\n        'hi': 'मन नक्शा',\n        'ml': 'മൈൻഡ്മാപ്പ് കാഴ്ച',\n        'mr': 'मनाचा नकाशा',\n        'bn': 'মাইন্ড মানচিত্র'    \n    },\n    desc:{\n        'en': 'Fill the dates of the event in the cuecard! Select a date from the options! Correct selections will increase your score.',\n        'hi': 'मन नक्शा में अंतराल भरें! उन्हें कनेक्ट करने का प्रयास करने के लिए दो नोड का चयन करें! सही कनेक्शन आपके स्कोर को बढ़ाएगा।',\n        'ml': 'മൈൻഡ്മാപ്പിലെ വിടവുകൾ പൂരിപ്പിക്കുക! അവ ബന്ധിപ്പിക്കാൻ ശ്രമിക്കുന്നതിന് രണ്ട് നോഡുകൾ തിരഞ്ഞെടുക്കുക! ശരിയായ കണക്ഷൻ നിങ്ങളുടെ സ്കോർ വർദ്ധിപ്പിക്കും.',\n        'mr': 'मनातील नकाशामधील अंतर भरा! त्यांना जोडण्याचा प्रयत्न करण्यासाठी दोन नोड निवडा! योग्य कनेक्शनमुळे आपली धावसंख्या वाढेल.',\n        'bn': 'শূন্যস্থান পূরণ করুন মনম্যাপে! দুটি সংযোগ স্থাপনের চেষ্টা করার জন্য দুটি নোড নির্বাচন করুন! সঠিক সংযোগ আপনার স্কোর বাড়িয়ে তুলবে।'    \n    }\n}\n\nexport const timeline = {\n    'en': 'Timeline',\n    'hi': 'घटनाक्रम',\n    'ml': 'ടൈംലൈൻ',\n    'mr': 'टाइमलाइन',\n    'bn': 'সময়রেখা'\n}\n\nexport const timelineTooltips = {\n    title:{\n        'en': 'Timeline view',\n        'hi': 'घटनाक्रम',\n        'ml': 'ടൈംലൈൻ കാഴ്ച',\n        'mr': 'टाइमलाइन दृश्य',\n        'bn': 'সময়রেখা'    \n    },\n    desc:{\n        'en': 'Visualise the story as a timeline!',\n        'hi': 'एक घटनाक्रम के रूप में कहानी की कल्पना करो!',\n        'ml': 'സ്റ്റോറി ഒരു ടൈംലൈനായി ദൃശ്യവൽക്കരിക്കുക!',\n        'mr': 'टाइमलाइन म्हणून कथेचे दृश्य करा!',\n        'bn': 'একটি সময়রেখা হিসাবে গল্পটি ভিজ্যুয়ালাইজ করুন!'    \n    }\n}","import React, { Component } from 'react';\nimport  MultiSelectReact  from 'multi-select-react';\nimport { Button } from '@material-ui/core';\nimport Graph from \"react-graph-vis\";\nimport './GraphComponent.css';\nimport { timingSafeEqual } from 'crypto';\nimport { isNullOrUndefined } from 'util';\nimport { thatReturnsThis } from 'fbjs/lib/emptyFunction';\nimport Img from 'react-image';\nimport IsImageUrl from 'is-image-url';\nimport ReactGA from 'react-ga';\nimport AmGraph from './amGraph/amGraph';\nimport Expand from 'react-expand-animated';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport PlayArrow from '@material-ui/icons/PlayArrow';\nimport Pause from '@material-ui/icons/Pause';\nimport Stop from '@material-ui/icons/Stop';\nimport Speech from 'speak-tts';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport * as firebase from 'firebase';\nimport * as Utils from '../common/utilSvc';\nimport * as Locale from '../Localization/localizedStrings';\n\nconst isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);\nconst isIE = /*@cc_on!@*/false || !!document.documentMode;\n\nclass GraphComponent extends React.Component {\n\n    constructor(props){\n        //props: isPublic, selectNode\n      super(props);\n      this.state={\n        graph: {\n            nodes: [\n              ],\n            edges: [\n              ]\n          },\n        graphOptions: {\n            layout: {\n                hierarchical: false\n            },\n            edges: {\n                arrows: {\n                    to:     {enabled: false, scaleFactor:1, type:'arrow'},\n                    middle: {enabled: false, scaleFactor:1, type:'arrow'},\n                    from:   {enabled: false, scaleFactor:1, type:'arrow'}\n                  },\n                color: \"#000000\"\n            }        \n        },\n        graphEvents: {\n        },\n        multiSelectEntityList: [\n            {\n                value: true, \n                label: \"All\", \n                id: 0\n            },\n            {\n                value: false, \n                label: \"None\", \n                id: -1\n            }\n        ],\n        currentSelectedBlocks: [\n        ],\n        selectedNodes:[],\n        openSelectedBlocks: false,\n        wasAllOptionSelected: true,\n        wasNoneOptionSelected:false,\n        playStatus: 'end',\n        languageSupportedPlay: true,\n        copiedText: false,\n        testVar: -1,\n        }\n\n        this.graphHelperMap= {\n            nodes:{\n\n            },\n            edges:{\n\n            }\n          };\n\n        this.speech = null;\n\n        this.handleAllAndNoneOptions = this.handleAllAndNoneOptions.bind(this);\n        this.initializeGraphEvents = this.initializeGraphEvents.bind(this);\n        this.generateGraph = this.generateGraph.bind(this);\n        this.onSelectGraph = this.onSelectGraph.bind(this);\n        this.addBlocksForNodeCharacteristic = this.addBlocksForNodeCharacteristic.bind(this);\n        this.addBlocksForEdge = this.addBlocksForEdge.bind(this);\n        this.isValidBlock = this.isValidBlock.bind(this);\n        this.clickBlockFromList = this.clickBlockFromList.bind(this);\n        this.sortBlocks = this.sortBlocks.bind(this);\n        this.removeHashedIndex = this.removeHashedIndex.bind(this);\n        this.AgregateNumberDisplay = this.AgregateNumberDisplay.bind(this);\n\n        this.generateAmGraph = this.generateAmGraph.bind(this);\n        this.selectEdge = this.selectEdge.bind(this);\n        this.selectNode = this.selectNode.bind(this);\n        this.toggleSelectedBlocksPane = this.toggleSelectedBlocksPane.bind(this);\n        this.resetScroll = this.resetScroll.bind(this);\n\n        this.initSpeech = this.initSpeech.bind(this);\n        this.playExistingSelection = this.playExistingSelection.bind(this);\n        this.pauseExistingSelection = this.pauseExistingSelection.bind(this);\n        this.resumeExistingSelection = this.resumeExistingSelection.bind(this);\n        this.stopExistingSelection = this.stopExistingSelection.bind(this);\n        this.timeoutFn = this.timeoutFn.bind(this);\n        this.timeInFn = this.timeInFn.bind(this);\n \n        this.graphRef = React.createRef();\n\n        ReactGA.initialize('UA-143383035-1');  \n    }\n\n    resetScroll(){\n        let amount = null;\n        if(this.graphRef){\n            amount = this.graphRef.current.offsetTop;\n        }\n        if(this.props.setScrollToGraphList)\n            this.props.setScrollToGraphList(amount);\n\n        let blocksDisplay = document.getElementById('graph-selected-block-list');\n        blocksDisplay.scrollTop = 0;    \n    }\n\n    isValidBlock(block){\n        if(isNullOrUndefined(block.title))\n            return false;\n        return true;\n    }\n\n    selectEdge(from, to){\n\n        this.setState({\n            openSelectedBlocks: false\n        });\n\n        var blocksToBeSelected =[];\n        var blocksAdded = {};\n        var edge={\n            to: to,\n            from: from\n        };\n        this.addBlocksForEdge(edge, blocksToBeSelected, blocksAdded);\n        blocksToBeSelected.sort((a, b) => this.sortBlocks(a.title,b.title,a.timestamp,b.timestamp));\n\n        this.setState({\n            currentSelectedBlocks: blocksToBeSelected,\n            openSelectedBlocks: true,\n            selectedNodes: [from, to],\n            copiedText: false\n        });\n\n        ReactGA.event({\n            category: 'select_edge',\n            action: 'Select Edge from ' + String(from) +  \" to \" + String(to),\n            label: String(from) + \" to \" + String(to)\n          });\n\n        this.resetScroll();\n    }\n\n    //edg:from,to,\n    addBlocksForEdge(edge, blocksToBeSelected, blocksAdded){\n        if(isNullOrUndefined(this.props.investigationGraph[edge.from]) || \n            isNullOrUndefined(this.props.investigationGraph[edge.from]))\n            return;\n            \n        var edgeBlockList = this.props.investigationGraph[edge.from].edges[edge.to];\n\n        for(var i=0;i<edgeBlockList.length;i++){\n            const blockKey = edgeBlockList[i];\n            // console.log(blockKey);\n            if(!(blockKey in blocksAdded)){\n\n                // Add block if it is not already in list\n                const newBlock = this.props.blockTree[blockKey];\n\n                if(this.isValidBlock(newBlock))\n                {\n                    blocksToBeSelected.push(newBlock);\n                }\n                blocksAdded[blockKey]=true;\n            }\n        }\n\n    }\n\n    selectNode(node){\n        var blocksToBeSelected =[];\n        var blocksAdded = {};\n\n        this.setState({\n            openSelectedBlocks: false\n        });\n        \n        this.addBlocksForNodeCharacteristic(node, blocksToBeSelected, blocksAdded);\n\n        if(this.props.investigationGraph[node]){\n            var edges =  this.props.investigationGraph[node].edges;\n            var scope = this;\n            Object.keys(edges).forEach(function(edgeKey) {\n                    var edge={\n                        to: node,\n                        from: edgeKey\n                    };\n                    scope.addBlocksForEdge(edge, blocksToBeSelected, blocksAdded);           \n            });\n        }\n\n        if(node == \"ALL\"){\n            let added = {};\n            let invGraph = this.props.investigationGraph;\n            if(!isNullOrUndefined(invGraph)){\n                for(let key in invGraph){\n                    for(let j=0; !isNullOrUndefined(invGraph[key].char) && j<invGraph[key].char.length; j++){\n                        added[invGraph[key].char[j]] = true; \n                    }\n\n                    for(let edgekey in invGraph[key].edges){\n\n                        // console.log(invGraph[key].edges[edgekey]);\n                        for(let j=0;!isNullOrUndefined(invGraph[key].edges[edgekey]) && \n                                        j<invGraph[key].edges[edgekey].length; j++)\n                        {\n\n                            added[invGraph[key].edges[edgekey][j]] = true;\n                        }\n                    }\n                }\n\n                for(let blockKey in added){\n                    if(!isNullOrUndefined(this.props.blockTree) && !isNullOrUndefined(this.props.blockTree[blockKey]))\n                        blocksToBeSelected.push(this.props.blockTree[blockKey]);\n                }\n            }\n        }\n\n        blocksToBeSelected.sort((a, b) => this.sortBlocks(a.title,b.title));\n        \n        this.setState({\n            currentSelectedBlocks: blocksToBeSelected,\n            openSelectedBlocks: true,\n            selectedNodes: [node],\n            copiedText: false\n        });\n\n        ReactGA.event({\n            category: 'select_node',\n            action: 'Select Node '+ String(node),\n            label: String(node)\n          });\n\n        this.resetScroll();\n\n        if((isNullOrUndefined(this.props.isPublic) || !this.props.isPublic) && this.props.selectNode && node!='ALL')\n        {\n            this.props.selectNode(node);\n        }\n    }\n\n    addBlocksForNodeCharacteristic(node, blocksToBeSelected, blocksAdded){\n\n        if(!isNullOrUndefined(this.props.investigationGraph[node])){\n            var charBlockList = this.props.investigationGraph[node].char;\n\n            for(var i=0;i<charBlockList.length;i++){\n                const blockKey = charBlockList[i];\n\n                if(!(blockKey in blocksAdded)){\n\n                    // Add block if it is not already in list\n                    const newBlock = this.props.blockTree[blockKey];\n\n                    if(this.isValidBlock(newBlock))\n                    {\n                        blocksToBeSelected.push(newBlock);\n                    }\n                    blocksAdded[blockKey]=true;\n                }\n            }\n        }\n    }\n\n    sortBlocks(a, b, a_ts = 0, b_ts = 0){\n        a = a.trim();        \n        b = b.trim();\n\n        var aIndex = 0, bIndex = 0, isAExist = false, isBExist = false;\n        if(a.length>0 && a.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<a.length; i++){\n                \n                if((!isNaN(parseInt(a.charAt(i), 10))) || a[i]==='.'){\n                    num += a.charAt(i);\n                }\n                else{\n                    if(num.length > 0){\n                        aIndex = parseFloat(num);\n                        isAExist = true;\n                    }\n                }\n            }\n            if(num.length > 0){\n                aIndex = parseFloat(num);\n                isAExist = true;\n            }    \n        }\n\n        if(b.length>0 && b.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<b.length; i++){\n                \n                if((!isNaN(parseInt(b.charAt(i), 10))) || b[i]==='.'){\n                    num += b.charAt(i);\n                }\n                else{\n                    if(num.length > 0){\n                        bIndex = parseFloat(num);\n                        isBExist = true;\n                    }\n                }\n            }    \n            if(num.length > 0){\n                bIndex = parseFloat(num);\n                isBExist = true;\n            }\n        \n        }\n\n        // A comes after b\n        if(!isAExist && isBExist)\n            return 1;\n\n        // A comes before b\n        if(isAExist && !isBExist)\n            return -1;\n\n        // A comes before b\n        if(isAExist && isBExist){\n            if(aIndex > bIndex)\n                return 1;\n            return -1;\n        }\n\n        if(a_ts > b_ts)\n            return 1;\n        else if(b_ts > a_ts)\n            return -1;\n\n        if(a > b)\n            return 1;\n\n        return -1;\n    }\n\n    onSelectGraph(event){\n\n        this.setState({\n            openSelectedBlocks: false\n        });\n\n        var { nodes, edges } = event;\n        \n      /*  \n        console.log(\"Selected nodes:\");\n        console.log(nodes);        \n        console.log(\"Selected edges:\");\n        console.log(edges);\n     */\n       \n        var blocksToBeSelected = [];\n        var blocksAdded = {};\n\n        if(!isNullOrUndefined(edges)){\n            for(var i=0;i<edges.length;i++){\n                var edgeKey = edges[i];\n                var edge = this.graphHelperMap.edges[edgeKey];\n                this.addBlocksForEdge(edge, blocksToBeSelected, blocksAdded);\n            }\n        }\n\n        if(!isNullOrUndefined(nodes)){\n            for(var i=0;i<nodes.length;i++){\n                var nodeKey = nodes[i];\n                var node = this.graphHelperMap.nodes[nodeKey];\n                this.addBlocksForNodeCharacteristic(node, blocksToBeSelected, blocksAdded);\n            }\n        }\n        //console.log(blocksToBeSelected);\n\n        blocksToBeSelected.sort((a, b) => this.sortBlocks(a.title,b.title,a.timestamp,b.timestamp));\n\n        this.setState({\n            currentSelectedBlocks: blocksToBeSelected,\n            openSelectedBlocks: true\n        });\n    }\n\n    initializeGraphEvents(){\n        const context = this;\n        var events = {\n            \n            select: function(event) {\n                context.onSelectGraph(event);\n            }\n    \n        }\n\n        this.setState({\n            graphEvents: events\n        })\n    }\n\n    generateAmGraph(){\n        var isAllSelected = this.props.multiSelectEntityList[0].value;\n        var newGraph = [];\n        var nodesMap = {};\n\n        if(!this.props.multiSelectEntityList[1].value)\n        {\n            //If None is not selected only display graph\n            var selectedEntityLabels = {};\n\n            var count=0;\n            for(var i=2; i<this.props.multiSelectEntityList.length;i++){\n                var currEntity = this.props.multiSelectEntityList[i];\n                if(currEntity.value || isAllSelected){\n                    //selected Node\n                    selectedEntityLabels[currEntity.label]=count;\n                    \n                    var image = null;\n                    if(this.props.imageMapping){\n                        //Add image\n                        if(currEntity.label in this.props.imageMapping){\n                            image = this.props.imageMapping[currEntity.label];\n                        }\n                    }\n\n                    if(this.props.investigationGraph[currEntity.label]){\n                        //Add Node\n                        newGraph.push({\n                            id:count,\n                            label:currEntity.label,\n                            link: [],\n                            image: image\n                        });\n                        nodesMap[count] = currEntity.label;\n\n\n                        //Add edge\n                        var currEntityKey = currEntity.label;\n\n                        if(!isNullOrUndefined(this.props.investigationGraph)\n                        && !isNullOrUndefined(this.props.investigationGraph[currEntityKey])){\n                            var edgeMap = this.props.investigationGraph[currEntityKey].edges;\n                            Object.keys(edgeMap).forEach(function(edgeKey) {\n                                if(edgeKey in selectedEntityLabels){\n                                    //edge is a selection, add it\n                                    //console.log(nodesMap[selectedEntityLabels[edgeKey]]);\n                                    newGraph[selectedEntityLabels[edgeKey]].link.push(count);\n                                }\n                            });\n                        }\n                        count++;\n                    }                    \n                }\n            }\n            let islands = Utils.getGraphIslandsAndValues(this.props.investigationGraph);\n            if(Object.keys(islands).length>0 && this.props.multiSelectEntityList[0].value){\n                newGraph.push({\n                    id:count,\n                    label:'ALL',\n                    link: [],\n                    image: null\n                });\n\n                let revMap = {};\n                for(let i=0; i<newGraph.length; i++){\n                    revMap[newGraph[i].label] = newGraph[i].id;\n                }\n\n                for(let key in islands){\n                    let newId = revMap[islands[key].node];\n                    if(!isNullOrUndefined(newId)){\n                        newGraph[count].link.push(newId);\n                    } \n                }\n                count++;\n            }\n            //console.log(newGraph);\n        }\n\n        var newGraphHelper = {\n            nodes: nodesMap,\n            edges: {}\n        }\n\n        return(\n            <div className=\"graph-main\">\n                <AmGraph \n                        graph={newGraph}  \n                        selectEdge = {this.selectEdge}    \n                        selectNode = {this.selectNode}                    \n                        />\n            </div>\n        );\n\n    }\n\n    generateGraph(){\n        var isAllSelected = this.props.multiSelectEntityList[0].value;\n        var newGraph = {\n            nodes: [],\n            edges: []\n        };\n        var nodesMap = {};\n\n        if(!this.props.multiSelectEntityList[1].value)\n        {\n            //If None is not selected only display graph\n            var selectedEntityLabels = {};\n\n            var count=0;\n            for(var i=2; i<this.props.multiSelectEntityList.length;i++){\n                var currEntity = this.props.multiSelectEntityList[i];\n                if(currEntity.value || isAllSelected){\n                    //selected Node\n                    selectedEntityLabels[currEntity.label]=count;\n                    \n                    //Add Node\n                    newGraph.nodes.push({\n                        id:count,\n                        label:currEntity.label\n                    });\n                    nodesMap[count] = currEntity.label;\n\n                    //Add edge\n                    var currEntityKey = currEntity.label;\n\n                    if(!isNullOrUndefined(this.props.investigationGraph)\n                    && !isNullOrUndefined(this.props.investigationGraph[currEntityKey])){\n                        var edgeMap = this.props.investigationGraph[currEntityKey].edges;\n                        Object.keys(edgeMap).forEach(function(edgeKey) {\n                            if(edgeKey in selectedEntityLabels){\n                                //edge is a selection, add it\n                                newGraph.edges.push({\n                                    from: selectedEntityLabels[edgeKey],\n                                    to: count,\n                                    id: selectedEntityLabels[edgeKey]+'-'+count\n                                });\n                            }\n                        });\n                    }\n                    count++;\n                }\n            }\n        }\n\n        var newGraphHelper = {\n            nodes: nodesMap,\n            edges: {}\n        }\n\n        for(var i=0;i<newGraph.edges.length;i++){\n            var edge = newGraph.edges[i];\n            var to_id = nodesMap[edge.to];\n            var from_id = nodesMap[edge.from];\n            newGraphHelper.edges[edge.id] = {from:from_id, to:to_id};\n        }\n\n        this.graphHelperMap= newGraphHelper \n        //console.log(this.state.graphHelperMap);\n\n        const context = this;\n        var graphEvents = {\n            \n            select: function(event) {\n                context.onSelectGraph(event);\n            }\n    \n        }\n\n        return(\n            <div className=\"graph-main\">\n                <Graph \n                        graph={newGraph} \n                        options={this.state.graphOptions} \n                        events={graphEvents} \n                        />\n            </div>\n        );\n    }\n\n    removeHashedIndex(a){\n        a = a.trim();\n        var startI = 0;\n        if(a.length>0 && a[0]=='#'){\n            for(var i=1; i<a.length; i++){\n                startI = i;\n                if(a.charAt(i)==' '){\n                    return a.substring(startI).trim();\n                }\n            } \n            return '';   \n        }\n        return a;\n    }\n\n    BlockEntity(entity){\n        return(\n        <span className=\"graph-block-entity\">\n            {entity.title}\n        </span>\n        );   \n    }\n\n    BlockEvidence(evidence, index){\n        const WebView = require('react-electron-web-view');\n        let evidenceList = [evidence.evidenceLink];\n        let isImageUrl = IsImageUrl(evidence.evidenceLink);\n        if(isImageUrl){\n            return (\n                <div className='graph-block-evidence'>\n                        <Img src={evidenceList} className=\"graph-block-evidence-image\"></Img>\n                </div>\n            );\n        }\n        return(\n                    null\n        );\n    } \n\n    AgregateNumberDisplay(numbers, selectedNodesString){\n\n        let renderNumbers = '';\n        if(!isNullOrUndefined(numbers) && numbers.length>0){\n            renderNumbers = numbers.map((number) => \n             <span><span className=\"graph-content-number-key\">Total {number.key}: </span> \n                <b className=\"graph-content-number-value\">{number.value}</b> <br/></span>\n            );   \n        }\n\n        if(!isNullOrUndefined(selectedNodesString))\n            selectedNodesString = selectedNodesString.replace(':', '');\n        if(renderNumbers != ''){\n            return (\n                <div className=\"graph-block-para-div\">\n                    <h4 className=\"graph-block-title\">Statistics for {selectedNodesString}</h4>\n                    <div className=\"graph-content-container\">\n                        <p className=\"graph-block-text\">\n                            {renderNumbers}\n                        </p> \n                    </div>\n                    \n                </div>\n            );    \n        }\n\n        return null;\n    }\n\n    SingleBlock(singleBlock){\n        \n        /*\n         Create render template for the entities\n         */\n        var renderBlockEntities = '';\n        if(singleBlock.entities!=null && singleBlock.entities.length>0){            \n            renderBlockEntities = singleBlock.entities.map((blockEntity) => \n               this.BlockEntity(blockEntity)\n           );            \n       }\n\n       var renderBlockEvidences=\"\";\n       if(singleBlock.evidences!=null && singleBlock.evidences.length>0){            \n        renderBlockEvidences = singleBlock.evidences.map((blockEvidence, index) => \n           this.BlockEvidence(blockEvidence, index)\n       );            \n       }\n\n       let renderNumbers = null;\n       if(!isNullOrUndefined(singleBlock.numbers) && singleBlock.numbers.length>0){\n           let numbers = singleBlock.numbers;\n            renderNumbers = numbers.map((number) => \n            <span><span className=\"graph-content-number-key\">{number.key}: </span> \n            <b className=\"graph-content-number-value\">{number.value}</b> <br/></span>\n        ); \n       }\n\n        return(\n            <div className=\"graph-block-para-div\"\n            onClick={() => { this.clickBlockFromList(singleBlock)}}>\n                <h4 className=\"graph-block-title\">{this.removeHashedIndex(singleBlock.title)}</h4>\n                <div className=\"graph-content-container\">\n                    <p className=\"graph-block-text\">\n                        {singleBlock.summary}\n                    </p>\n                    <p className=\"graph-block-text\">\n                        {renderNumbers}\n                    </p> \n                    <div class=\"graph-block-evidence-container\">\n                        {renderBlockEvidences}                       \n                    </div>\n                </div> \n            </div>\n            );\n\n     /*   return(\n        <div className=\"graph-block-div\"\n        onClick={() => { this.clickBlockFromList(singleBlock)}}>\n            <h4 className=\"graph-block-title\">{this.removeHashedIndex(singleBlock.title)}</h4>\n            <p className=\"graph-block-text\">\n                {singleBlock.summary}\n            </p>                        \n        </div>\n        );\n        */\n    }\n\n    handleAllAndNoneOptions(){\n        var prevAllOption = this.state.wasAllOptionSelected;\n        var prevNoneOption = this.state.wasNoneOptionSelected;\n        var showAll = false;\n        var showNone = false;\n        var someOptionIsEnabled = false;\n        var tempList = this.props.multiSelectEntityList;\n\n        for(var i=0; i<tempList.length; i++){\n            if(tempList[i].value==true){\n                if(tempList[i].id == 0){\n                    // All\n                    showAll = true;\n                }\n                else if(tempList[i].id == -1){\n                    //None\n                    showNone = true;\n                }\n                else{\n                    //Other element\n                    someOptionIsEnabled = true;\n\n                    if((showAll && prevAllOption) || (showNone && prevNoneOption)){\n                        //All/None option selected before, so no need now\n                        showAll = false;\n                        showNone = false;\n                        break;\n                    }\n                    else if(showNone || showAll){\n                        //All/None option not selected before but selected now, \n                        // remove all other values\n                        tempList[i].value=false;                        \n                    }\n                }\n            }\n        }\n\n        if(showAll && !prevAllOption){\n            showNone = false;\n        }\n        if(showNone && !prevNoneOption){\n            showAll = false;\n        }\n        if(!showAll && !showNone && !someOptionIsEnabled){\n            \n            //No option is clicked\n            showNone = true;\n        }\n\n        tempList[0].value = showAll;\n        tempList[1].value = showNone;\n        this.setState({\n            multiSelectEntityList: tempList,\n            wasAllOptionSelected: showAll,\n            wasNoneOptionSelected: showNone\n        });\n    }\n\n    entityClicked(entityList) {\n        this.setState({ multiSelectEntityList: entityList });\n        this.handleAllAndNoneOptions();\n    }\n    \n    selectedBadgeClicked(entityList) {\n        this.setState({ multiSelectEntityList: entityList });\n        this.handleAllAndNoneOptions();\n    }\n\n    clickBlockFromList(block){\n        this.props.selectBlock(block);\n    }\n\n    async initSpeech(){\n        try{\n            this.speech = new Speech();\n            if(this.speech.hasBrowserSupport()) { // returns a boolean\n                // console.log(\"speech synthesis supported\")\n            }\n            let data = await this.speech.init();            \n            let voices =  data.voices;\n            let selectedVoice = -1;\n            // firebase.database().ref('Testing/lang/').set(this.props.lang);\n            for(let i=0; !isNullOrUndefined(voices) && i<voices.length; i++){\n                // firebase.database().ref('Testing/dataVal/'+String(i)).set(voices[i].name);\n                let name = voices[i].name;\n                if(Utils.languageCheck(this.props.lang, voices[i])) \n                {\n                    selectedVoice = i;\n                    break;\n                }\n            }\n            if(selectedVoice != -1){\n                //firebase.database().ref('Testing/selectedDataVal').set(voices[selectedVoice].name);\n                await this.speech.setVoice(voices[selectedVoice].name);\n                this.setState({\n                    languageSupportedPlay: true\n                });\n            }\n            else{\n                this.setState({\n                    languageSupportedPlay: false\n                });\n            }\n        }\n        catch{}\n    }\n\n    async timeoutFn(){  \n        if(this.state.playStatus == 'start' && !isNullOrUndefined(this.speech) && isChrome){\n            await this.speech.pause();\n            await this.speech.resume();     \n        }     \n    }\n\n    timeInFn(){\n        const scope = this;\n        this.timeout = setInterval(() => {            \n            this.timeoutFn();                \n          }, 8500);\n    }\n\n    async componentDidMount(){\n        this.initializeGraphEvents();\n        await this.initSpeech();\n\n        if(isChrome)\n            this.timeInFn();\n    }\n\n    toggleSelectedBlocksPane(){        \n        this.setState({\n            openSelectedBlocks: !this.state.openSelectedBlocks\n        });        \n    }\n\n    async pauseExistingSelection(){\n        if(!isNullOrUndefined(this.speech) && this.speech.speaking())\n        {\n            await this.speech.pause();\n            this.setState({\n                playStatus: 'paused'\n            });\n        }            \n    }\n\n    async resumeExistingSelection(){\n        if(!isNullOrUndefined(this.speech)){\n            await this.speech.resume();\n            this.setState({\n                playStatus: 'start'\n            });\n        }        \n    }\n\n    async stopExistingSelection(){\n        if(!isNullOrUndefined(this.speech)){\n            await this.speech.cancel();\n            this.setState({\n                playStatus: 'end'\n            });    \n        }\n    }\n    \n    async playExistingSelection(){\n        if(!isNullOrUndefined(this.speech)){\n            if(this.speech.speaking())\n                await this.speech.cancel();\n          \n            let selectedNodesString = ': ';\n            for(let i=0; !isNullOrUndefined(this.state.selectedNodes) && i<this.state.selectedNodes.length; i++){\n                selectedNodesString += this.state.selectedNodes[i] + ', ';\n            }\n            if(selectedNodesString.length > 0)\n                selectedNodesString = selectedNodesString.substring(0,selectedNodesString.length - 2);\n            ReactGA.event({\n                category: 'playSound',\n                action: 'PlaySound ' + selectedNodesString,\n                label: 'PlaySound ' + selectedNodesString\n            });\n\n            let toPlayText = '';\n            let numbers = Utils.coalesceBlockNumbers(this.state.currentSelectedBlocks);\n            if(!isNullOrUndefined(numbers) && numbers.length>0){\n                toPlayText += 'Statistics for ' + selectedNodesString + '. ';\n            }\n            for(let i=0; !isNullOrUndefined(numbers) && i<numbers.length;i++){\n                toPlayText += ('Total ' + numbers[i].key + \": \" + String(numbers[i].value)+ \". \");\n            }\n            let currBlocks = Utils.deduplicateBlocks(this.state.currentSelectedBlocks);\n            currBlocks.map((selectedBlock) => \n                {\n                    let title = this.removeHashedIndex(selectedBlock.title);\n                    let summary = selectedBlock.summary;\n                    if(!isNullOrUndefined(title) && title.length>0)\n                        toPlayText += (Utils.correctTextForSpeech(title) + '. ');\n                    toPlayText += Utils.correctTextForSpeech(summary);\n                    toPlayText  += '. ';\n                    for(let i=0; !isNullOrUndefined(selectedBlock.numbers) && i<selectedBlock.numbers.length;i++){\n                        toPlayText += (selectedBlock.numbers[i].key + \": \" + \n                            String(selectedBlock.numbers[i].value)+ \". \");\n                    }\n                }\n            );\n            this.setState({\n                playStatus: 'start'\n            });\n            this.speech.speak({\n                text: toPlayText,\n                queue: false// ,  // current speech will be interrupted,\n                /* listeners: {\n                    onstart: () => {\n                        console.log(\"Start utterance\")\n                    },\n                    onend: () => {\n                        console.log(\"End utterance\")\n                    },\n                    onresume: () => {\n                        console.log(\"Resume utterance\")\n                    },\n                    onboundary: (event) => {\n                        console.log(event.name + ' boundary reached after ' + event.elapsedTime + ' milliseconds.')\n                    }\n                }*/\n            }).then(() => {\n                this.setState({\n                    playStatus: 'end'\n                });\n                //console.log('here');\n            }).catch(e => {\n                console.error(\"An error occurred :\", e)\n            });\n            \n        }\n    }\n\n    async componentWillUnmount(){\n        if(!isNullOrUndefined(this.speech)){\n            await this.speech.cancel();\n        }\n    }\n\n    async componentWillReceiveProps(nextProps){\n        if(this.props.lang != nextProps.lang && !isNullOrUndefined(this.speech)){\n            let data = await this.speech.init();            \n            let voices =  data.voices;\n            let selectedVoice = -1;\n            for(let i=0; !isNullOrUndefined(voices) && i<voices.length; i++){\n                // firebase.database().ref('Testing/dataVal/'+String(i)).set(voices[i].name);\n                let name = voices[i].name;\n                if(Utils.languageCheck(this.props.lang, voices[i])) \n                {\n                    selectedVoice = i;\n                    break;\n                }\n            }\n            if(selectedVoice != -1){\n                //firebase.database().ref('Testing/dataVal').set(voices[selectedVoice].name);\n                await this.speech.setVoice(voices[selectedVoice].name);\n                this.setState({\n                    languageSupportedPlay: true\n                });\n            }\n            else{\n                this.setState({\n                    languageSupportedPlay: false\n                });\n            }\n        }\n    }\n\n    render(){\n\n        let lang = this.props.lang;\n        if(isNullOrUndefined(lang))\n            lang ='en';\n\n        const selectedOptionsStyles = {\n            color: \"white\",\n            backgroundColor: \"rgb(117, 106, 214)\",\n            borderRadius:\"20px\",\n            fontSize:'0.6em',\n            padding:'10px',\n            maxWidth: '92%',\n            wordWrap: 'break-word'\n        };\n        const optionsListStyles = {\n            backgroundColor: \"darkcyan\",\n            color: \"white\",\n\n        };\n        const transitions = [\"height\", \"opacity\", \"background\"];\n\n        let currBlocks = Utils.deduplicateBlocks(this.state.currentSelectedBlocks);\n\n        var renderBlocks = currBlocks.map((selectedBlock) => \n               this.SingleBlock(selectedBlock)\n           );  \n           \n        let blocksString = Utils.getBlocksText(this.state.currentSelectedBlocks);\n        \n        let selectedNodesString = ': ';\n        for(let i=0; i<this.state.selectedNodes.length; i++){\n            selectedNodesString += this.state.selectedNodes[i] + ', ';\n        }\n        if(selectedNodesString.length > 0)\n            selectedNodesString = selectedNodesString.substring(0,selectedNodesString.length - 2);\n        \n        let numbers = Utils.coalesceBlockNumbers(this.state.currentSelectedBlocks);\n        let aggrNums = this.AgregateNumberDisplay(numbers,selectedNodesString);\n        //console.log(numbers);\n\n        /*\n            {this.state.playStatus == 'paused' && !isChrome?\n                <a onClick={this.resumeExistingSelection} className=\"soundIcon\">\n                    <PlayArrow />\n                </a>\n                :\n                null\n            }\n\n            {this.state.playStatus == 'start' && !isChrome? \n                <a onClick={this.pauseExistingSelection} className=\"soundIcon\">\n                    <Pause />\n                </a>\n                :\n                null\n            } \n        */\n       \n        return (\n            <div>\n                {this.props.isPublic == undefined || !this.props.isPublic?\n                    <div className='filter-container'>                \n                    \n                        <div className=\"dropdown-container only-large-screen\">\n                            <MultiSelectReact \n                            options={this.props.multiSelectEntityList}\n                            optionClicked={this.entityClicked.bind(this)}\n                            selectedBadgeClicked={this.selectedBadgeClicked.bind(this)}\n                            selectedOptionsStyles={selectedOptionsStyles}\n                            optionsListStyles={optionsListStyles} \n                            isTextWrap={false} \n                            />\n                        </div>\n\n                    </div>\n                    :\n                    <div className=\"dropdown-container only-large-screen\" style={{marginBottom: '1em', marginTop:'0'}}>\n                        <MultiSelectReact \n                        options={this.props.multiSelectEntityList}\n                        optionClicked={this.entityClicked.bind(this)}\n                        selectedBadgeClicked={this.selectedBadgeClicked.bind(this)}\n                        selectedOptionsStyles={selectedOptionsStyles}\n                        optionsListStyles={optionsListStyles} \n                        isTextWrap={false} \n                        />\n                    </div>\n\n                }\n                        {this.state.copiedText?\n                            <div className=\"copiedTextContainer\">\n                                <p className=\"copiedTextValue\">Text has been copied in the block format. Paste it in another story.</p>\n                            </div>\n                            :\n                            null\n                        }\n                \n                        {this.state.currentSelectedBlocks.length >= 0? \n                        <div className=\"graph-block-list\" ref={this.graphRef}>\n                            {selectedNodesString.length>0 && !isIE && !isNullOrUndefined(this.speech) && this.state.languageSupportedPlay?\n                                <div className='graph-block-list-sound'>\n                                        {this.state.playStatus == 'end'?\n                                            <a onClick={this.playExistingSelection} className=\"soundIcon\">\n                                                <PlayArrow />\n                                            </a>\n                                            :\n                                            null\n                                        }                                       \n\n                                        {(this.state.playStatus == 'start' || this.state.playStatus == 'paused')?\n                                            <a onClick={this.stopExistingSelection} className=\"soundIcon\">\n                                                <Stop />\n                                            </a>\n                                            :\n                                            null\n                                        }\n                                    \n                                </div>\n                                :\n                                null\n                            }\n                            {(this.props.isPublic == undefined || !this.props.isPublic) && selectedNodesString.length>0?\n                                    <CopyToClipboard text={Utils.getBlocksText(this.state.currentSelectedBlocks)}\n                                    onCopy={() => this.setState({copiedText: true})}>\n                                        <div className=\"copyBlockText\">Copy the text as draft</div>\n                                    </CopyToClipboard>\n                                    :\n                                    null\n                                }\n                            <div className='graph-block-list-title' onClick={this.toggleSelectedBlocksPane}>                                \n                                {selectedNodesString.length>0?\n                                    <span>{Locale.selections[lang]}</span>\n                                    :\n                                    <span>{Locale.selectEntity[lang]}</span>\n                                }                                                                \n                                <span>{selectedNodesString}</span>                                \n                                <span>\n                                    {this.state.openSelectedBlocks?\n                                        <ExpandLess className={selectedNodesString.length>0?\"graph-block-list-title-icon\":\"displayNone\"}/>\n                                        :\n                                        <ExpandMore className={selectedNodesString.length>0?\"graph-block-list-title-icon\":\"displayNone\"}/>\n                                    }\n                                </span>\n                            </div> \n                            <Expand \n                                open={this.state.openSelectedBlocks}\n                                duration={400}\n                                transitions={transitions}>\n                                <div className='graph-block-list-container' id=\"graph-selected-block-list\">\n                                    {aggrNums}\n                                    {renderBlocks}\n                                </div>\n                            </Expand>\n                        </div>                      \n                        :\n                        null}\n                        {this.generateAmGraph()/*this.generateGraph()*/}                        \n                                        \n            </div>\n        );\n    }\n\n}  \nexport default GraphComponent;","import React, { Component } from 'react';\nimport  MultiSelectReact  from 'multi-select-react';\nimport { Button, withStyles } from '@material-ui/core';\nimport Graph from \"react-graph-vis\";\nimport Img from 'react-image';\nimport './GraphComponent.css';\nimport { timingSafeEqual } from 'crypto';\nimport { isNullOrUndefined } from 'util';\nimport { thatReturnsThis } from 'fbjs/lib/emptyFunction';\nimport IsImageUrl from 'is-image-url';\n\nimport AmGraph from './amGraph/amGraph';\nimport Expand from 'react-expand-animated';\n\nclass FindConnectionsComponent extends React.Component {\n\n    constructor(props){\n      super(props);\n      this.state={\n        amGraph:{},\n        graph: {\n            nodes: [\n              ],\n            edges: [\n              ]\n          },\n        graphHelperMap: {\n            nodes:{\n\n            },\n            edges:{\n\n            }\n          },\n        graphOptions: {\n            layout: {\n                hierarchical: false\n            },\n            edges: {\n                arrows: {\n                    to:     {enabled: false, scaleFactor:1, type:'arrow'},\n                    middle: {enabled: false, scaleFactor:1, type:'arrow'},\n                    from:   {enabled: false, scaleFactor:1, type:'arrow'}\n                  },\n                color: \"#000000\"\n            }        \n        },\n        graphEvents: {\n        },\n        firstEntitySelectList: [\n            {\n                value: true, \n                label: \"None\", \n                id: -1\n            }\n        ],\n        secondEntitySelectList: [\n            {\n                value: true, \n                label: \"None\", \n                id: -1\n            }\n        ],\n        currentSelectedBlocks: [\n        ],\n        selectedNodes:[],\n        openSelectedBlocks: false,\n        wasAllOptionSelected: true,\n        wasNoneOptionSelected:false,\n        testVar: -1\n        }\n\n        this.initializeGraphEvents = this.initializeGraphEvents.bind(this);\n        this.generateEntityLists = this.generateEntityLists.bind(this);\n        this.generateGraph = this.generateGraph.bind(this);\n        this.getPathViaBfs = this.getPathViaBfs.bind(this);\n        this.findConnections = this.findConnections.bind(this);\n        this.onSelectGraph = this.onSelectGraph.bind(this);\n        this.addBlocksForNodeCharacteristic = this.addBlocksForNodeCharacteristic.bind(this);\n        this.addBlocksForEdge = this.addBlocksForEdge.bind(this);\n        this.isValidBlock = this.isValidBlock.bind(this);\n        this.clickBlockFromList = this.clickBlockFromList.bind(this);\n        this.sortBlocks = this.sortBlocks.bind(this);\n        this.removeHashedIndex = this.removeHashedIndex.bind(this);\n\n        this.generateAmGraph = this.generateAmGraph.bind(this);\n        this.selectEdge = this.selectEdge.bind(this);\n        this.selectNode = this.selectNode.bind(this);\n        this.toggleSelectedBlocksPane = this.toggleSelectedBlocksPane.bind(this);\n        this.resetScroll = this.resetScroll.bind(this);\n\n        this.findConnectionRef = React.createRef();\n    }\n\n    resetScroll(){\n        let amount = null;\n        if(this.findConnectionRef){\n            amount = this.findConnectionRef.current.offsetTop;\n        }\n        if(this.props.setScrollToGraphList)\n            this.props.setScrollToGraphList(amount);\n    }\n\n    isValidBlock(block){\n        if(isNullOrUndefined(block.title) || block.title=='')\n            return false;\n        return true;\n    }\n\n    selectEdge(from, to){\n        this.setState({\n            openSelectedBlocks: false\n        });\n\n        var blocksToBeSelected =[];\n        var blocksAdded = {};\n        var edge={\n            to: to,\n            from: from\n        };\n        this.addBlocksForEdge(edge, blocksToBeSelected, blocksAdded);\n        blocksToBeSelected.sort((a, b) => this.sortBlocks(a.title,b.title,a.timestamp,b.timestamp));\n\n        this.setState({\n            currentSelectedBlocks: blocksToBeSelected,\n            openSelectedBlocks: true,\n            selectedNodes: [from, to]\n        });\n\n        this.resetScroll();\n    }\n\n    addBlocksForEdge(edge, blocksToBeSelected, blocksAdded){\n        var edgeBlockList = this.props.investigationGraph[edge.from].edges[edge.to];\n\n        for(var i=0;i<edgeBlockList.length;i++){\n            const blockKey = edgeBlockList[i];\n            if(!(blockKey in blocksAdded)){\n\n                // Add block if it is not already in list\n                const newBlock = this.props.blockTree[blockKey];\n\n                if(this.isValidBlock(newBlock))\n                {\n                    blocksToBeSelected.push(newBlock);\n                }\n                blocksAdded[blockKey]=true;\n            }\n        }\n\n    }\n\n    selectNode(node){\n\n        this.setState({\n            openSelectedBlocks: false\n        });\n\n        var blocksToBeSelected =[];\n        var blocksAdded = {};\n        \n        this.addBlocksForNodeCharacteristic(node, blocksToBeSelected, blocksAdded);\n\n        var edges =  this.props.investigationGraph[node].edges;\n        var scope = this;\n        Object.keys(edges).forEach(function(edgeKey) {\n                var edge={\n                    to: node,\n                    from: edgeKey\n                };\n                scope.addBlocksForEdge(edge, blocksToBeSelected, blocksAdded);           \n        });\n\n        blocksToBeSelected.sort((a, b) => this.sortBlocks(a.title,b.title,a.timestamp,b.timestamp));\n\n        this.setState({\n            currentSelectedBlocks: blocksToBeSelected,\n            openSelectedBlocks: true,\n            selectedNodes: [node]\n        });\n\n        this.resetScroll();\n    }\n\n    addBlocksForNodeCharacteristic(node, blocksToBeSelected, blocksAdded){\n        var charBlockList = this.props.investigationGraph[node].char;\n\n        for(var i=0;i<charBlockList.length;i++){\n            const blockKey = charBlockList[i];\n\n            if(!(blockKey in blocksAdded)){\n\n                // Add block if it is not already in list\n                const newBlock = this.props.blockTree[blockKey];\n\n                if(this.isValidBlock(newBlock))\n                {\n                    blocksToBeSelected.push(newBlock);\n                }\n                blocksAdded[blockKey]=true;\n            }\n        }\n    }\n\n    sortBlocks(a, b, a_ts = 0, b_ts = 0){\n        a = a.trim();        \n        b = b.trim();\n\n        var aIndex = 0, bIndex = 0, isAExist = false, isBExist = false;\n        if(a.length>0 && a.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<a.length; i++){\n                \n                if((!isNaN(parseInt(a.charAt(i), 10))) || a[i]==='.'){\n                    num += a.charAt(i);\n                }\n                else{\n                    if(num.length > 0){\n                        aIndex = parseFloat(num);\n                        isAExist = true;\n                    }\n                }\n            }\n            if(num.length > 0){\n                aIndex = parseFloat(num);\n                isAExist = true;\n            }    \n        }\n\n        if(b.length>0 && b.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<b.length; i++){\n                \n                if((!isNaN(parseInt(b.charAt(i), 10))) || b[i]==='.'){\n                    num += b.charAt(i);\n                }\n                else{\n                    if(num.length > 0){\n                        bIndex = parseFloat(num);\n                        isBExist = true;\n                    }\n                }\n            }    \n            if(num.length > 0){\n                bIndex = parseFloat(num);\n                isBExist = true;\n            }\n        \n        }\n\n        // A comes after b\n        if(!isAExist && isBExist)\n            return 1;\n\n        // A comes before b\n        if(isAExist && !isBExist)\n            return -1;\n\n        // A comes before b\n        if(isAExist && isBExist){\n            if(aIndex > bIndex)\n                return 1;\n            return -1;\n        }\n\n        if(a_ts > b_ts)\n            return 1;\n        else if(b_ts > a_ts)\n            return -1;\n\n        if(a > b)\n            return 1;\n\n        return -1;\n    }\n\n    onSelectGraph(event){\n\n        this.setState({\n            openSelectedBlocks: false\n        });\n        \n        var { nodes, edges } = event;\n        var blocksToBeSelected = [];\n        var blocksAdded = {};\n\n        if(!isNullOrUndefined(edges)){\n            for(var i=0;i<edges.length;i++){\n                var edgeKey = edges[i];\n                var edge = this.state.graphHelperMap.edges[edgeKey];\n                this.addBlocksForEdge(edge, blocksToBeSelected, blocksAdded);\n            }\n        }\n\n        if(!isNullOrUndefined(nodes)){\n            for(var i=0;i<nodes.length;i++){\n                var nodeKey = nodes[i];\n                var node = this.state.graphHelperMap.nodes[nodeKey];\n                this.addBlocksForNodeCharacteristic(node, blocksToBeSelected, blocksAdded);\n            }\n        }\n\n        this.setState({\n            currentSelectedBlocks: blocksToBeSelected,\n            openSelectedBlocks: true\n        });\n    }\n\n    initializeGraphEvents(){\n        const context = this;\n        var events = {\n            \n            select: function(event) {\n                context.onSelectGraph(event);\n            }\n    \n        }\n\n        this.setState({\n            graphEvents: events\n        })\n    }\n\n    getPathViaBfs(startNode, destNode){\n        \n        //st has attributes \n        var st=[];\n\n        //blocksVisited has detail here such as blockCount, hops and prevDetail\n        var blocksVisited = {};\n\n        //init map and st\n        blocksVisited[startNode]={\n            id: startNode,\n            blockCount: 0,\n            hops: 0,\n            prevNode: ''\n        };\n        st.push(startNode);\n\n        var invGraph = this.props.investigationGraph;\n        var i =0;\n        while(1){\n            if(i >= st.length || st[i]==destNode)\n                break;\n\n            \n            var currNodeKey = st[i];\n            var currNode = blocksVisited[currNodeKey];\n            var currHops = currNode.hops;\n            var currblockCount = currNode.blockCount;\n\n            //get edges\n            var edgeMap = invGraph[currNodeKey].edges;\n            Object.keys(edgeMap).forEach(function(edgeKey) {\n\n                var shouldUpdateEdgeNode = false;\n\n                if(!(edgeKey in blocksVisited)){\n                    shouldUpdateEdgeNode = true;\n\n                    //first time visiting Node. push to stack \n                    st.push(edgeKey);\n                }\n                else{\n                    if( (\n                        //New hops is lesser than existing\n                        blocksVisited[edgeKey].hops > currHops+1\n                        ) || \n                        (\n                            //Hops equal but new block count more than existing\n                            (blocksVisited[edgeKey].hops == currHops+1)\n                            &&\n                            (currblockCount + \n                                invGraph[currNodeKey].edges[edgeKey].length \n                                > blocksVisited[edgeKey].blockCount) \n                        )\n                    ){\n                        shouldUpdateEdgeNode = true;\n                    }\n                }\n\n                if(shouldUpdateEdgeNode){\n                    blocksVisited[edgeKey] = {\n                        id: edgeKey,\n                        blockCount: currblockCount + invGraph[currNodeKey].edges[edgeKey].length,\n                        hops: currHops + 1,\n                        prevNode: currNodeKey\n                    };\n                }\n                \n            });\n            \n            i++;\n        }\n\n        var pathNodeKeys = {};;\n        var curr = destNode;\n        while((curr in blocksVisited) && (curr!=startNode)){\n            pathNodeKeys[curr]=true;\n            curr = blocksVisited[curr].prevNode;\n        }\n\n        //console.log(\"PathNodeKeys\");\n        //console.log(pathNodeKeys);\n\n        var list=[];\n        if(curr==startNode){\n            //path found\n\n            pathNodeKeys[startNode]=true;\n\n            for(var i=1; i<this.state.firstEntitySelectList.length;i++){\n                if(this.state.firstEntitySelectList[i].label in pathNodeKeys){\n                    //Entity in path\n                    var pathEntity = {\n                        value: true,\n                        label: this.state.firstEntitySelectList[i].label,\n                        id: this.state.firstEntitySelectList[i].id\n                    };\n                    list.push(pathEntity);\n                }\n            }\n        }\n\n        return list;\n\n    }\n\n    findConnections(){\n\n        var rootElement = {};\n        var destElement = {};\n        var list = [];\n        for(var i=1; i<this.state.firstEntitySelectList.length;i++){\n            if(this.state.firstEntitySelectList[i].value){\n                rootElement = this.state.firstEntitySelectList[i];\n            }\n        }\n\n        for(var i=1; i<this.state.secondEntitySelectList.length;i++){\n            if(this.state.secondEntitySelectList[i].value){\n                destElement = this.state.secondEntitySelectList[i];\n            }\n        }\n\n        //do bfs here\n        list = this.getPathViaBfs(rootElement.label, destElement.label);\n\n        if(list.length == 0){\n            list.push(rootElement);\n            list.push(destElement);\n        }\n\n        return list;\n\n    }\n\n    async generateAmGraph(){\n        var newGraph = [];\n        var nodesMap = {};\n\n        var selectedEntityList = this.findConnections();\n        //console.log(selectedEntityList);\n\n        if(selectedEntityList.length >= 2)\n        {\n            //If None is not selected only display graph\n            var selectedEntityLabels = {};\n\n            var count=0;\n            for(var i=0; i<selectedEntityList.length;i++){\n                var currEntity = selectedEntityList[i];\n                if(currEntity.value){\n                    //selected Node\n                    selectedEntityLabels[currEntity.label]=count;\n\n                    var image = null;\n                    if(this.props.imageMapping){\n                        //Add image\n                        if(currEntity.label in this.props.imageMapping){\n                            image = this.props.imageMapping[currEntity.label];\n                        }\n                    }\n                    \n                    //Add Node\n                    newGraph.push({\n                        id:count,\n                        label:currEntity.label,\n                        link: [],\n                        image: image\n                    });\n                    nodesMap[count] = currEntity.label;\n\n                    //Add edge\n                    var currEntityKey = currEntity.label;\n\n                    if(!isNullOrUndefined(this.props.investigationGraph)\n                    && !isNullOrUndefined(this.props.investigationGraph[currEntityKey])){\n                        var edgeMap = this.props.investigationGraph[currEntityKey].edges;\n                        Object.keys(edgeMap).forEach(function(edgeKey) {\n                            if(edgeKey in selectedEntityLabels){\n                                //edge is a selection, add it\n                                //console.log(nodesMap[selectedEntityLabels[edgeKey]]);\n                                newGraph[selectedEntityLabels[edgeKey]].link.push(count);\n                            }\n                        });\n                    }\n                    count++;\n                }\n            }\n        }        \n\n        var newGraphHelper = {\n            nodes: nodesMap,\n            edges: {}\n        }\n\n        this.setState({amGraph:newGraph});\n    }\n\n    async generateGraph(){\n        var newGraph = {\n            nodes: [],\n            edges: []\n        };\n        var nodesMap = {};\n\n        var selectedEntityList = this.findConnections();\n\n        if(selectedEntityList.length >= 2)\n        {\n            //If None is not selected only display graph\n            var selectedEntityLabels = {};\n\n            var count=0;\n            for(var i=0; i<selectedEntityList.length;i++){\n                var currEntity = selectedEntityList[i];\n                if(currEntity.value){\n                    //selected Node\n                    selectedEntityLabels[currEntity.label]=count;\n                    \n                    //Add Node\n                    newGraph.nodes.push({\n                        id:count,\n                        label:currEntity.label\n                    });\n                    nodesMap[count] = currEntity.label;\n\n                    //Add edge\n                    var currEntityKey = currEntity.label;\n                    var edgeMap = this.props.investigationGraph[currEntityKey].edges;\n                    Object.keys(edgeMap).forEach(function(edgeKey) {\n                        if(edgeKey in selectedEntityLabels){\n                            //edge is a selection, add it\n                            newGraph.edges.push({\n                                from: selectedEntityLabels[edgeKey],\n                                to: count,\n                                id: selectedEntityLabels[edgeKey]+'-'+count\n                            });\n                        }\n                    });\n                    count++;\n                }\n            }\n        }\n\n        var newGraphHelper = {\n            nodes: nodesMap,\n            edges: {}\n        }\n\n        for(var i=0;i<newGraph.edges.length;i++){\n            var edge = newGraph.edges[i];\n            var to_id = nodesMap[edge.to];\n            var from_id = nodesMap[edge.from];\n            newGraphHelper.edges[edge.id] = {from:from_id, to:to_id};\n        }\n\n        await this.setState({\n            graph: newGraph,\n            graphHelperMap: newGraphHelper \n        });\n\n    }\n\n    generateEntityLists(){\n        var count = 1;\n        var firstEntityList = this.state.firstEntitySelectList;\n        var secondEntityList = this.state.secondEntitySelectList;\n        Object.keys(this.props.investigationGraph).forEach(function(entityLabel) {\n            firstEntityList.push({                \n                    value: false, \n                    label: entityLabel, \n                    id: count             \n            });\n            secondEntityList.push({                \n                value: false, \n                label: entityLabel, \n                id: count             \n            });\n            count++;\n        });\n\n        firstEntityList.sort(function(a,b){\n            if(a.label.toLocaleLowerCase() == 'none')\n                return -1;\n            if(b.label.toLocaleLowerCase() == 'none')\n                return 1;\n            if(a.label.toLocaleLowerCase() < b.label.toLocaleLowerCase())\n                return -1;\n            return 1;\n        });\n        secondEntityList.sort(function(a,b){\n            if(a.label.toLocaleLowerCase() == 'none')\n                return -1;\n            if(b.label.toLocaleLowerCase() == 'none')\n                return 1;\n            if(a.label.toLocaleLowerCase() < b.label.toLocaleLowerCase())\n                return -1;\n            return 1;\n        });\n\n\n        this.setState({\n            firstEntitySelectList: firstEntityList,\n            secondEntitySelectList: secondEntityList\n        });\n    }\n\n    removeHashedIndex(a){\n        a = a.trim();\n        var startI = 0;\n        if(a.length>0 && a[0]=='#'){\n            for(var i=1; i<a.length; i++){\n                startI = i;\n                if(a.charAt(i)==' '){\n                    return a.substring(startI).trim();\n                }\n            } \n            return '';   \n        }\n        return a;\n    }\n\n    BlockEntity(entity){\n        return(\n        <span className=\"graph-block-entity\">\n            {entity.title}\n        </span>\n        );  \n    }\n\n    BlockEvidence(evidence, index){\n        const WebView = require('react-electron-web-view');\n        let evidenceList = [evidence.evidenceLink];\n        let isImageUrl = IsImageUrl(evidence.evidenceLink);\n        if(isImageUrl){\n            return (\n                <div className='graph-block-evidence'>\n                        <Img src={evidenceList} className=\"graph-block-evidence-image\"></Img>\n                </div>\n            );\n        }\n        return(\n                    null\n        );\n    } \n\n    SingleBlock(singleBlock){\n        \n        /*\n         Create render template for the entities\n         */\n        var renderBlockEntities = '';\n        if(singleBlock.entities!=null && singleBlock.entities.length>0){            \n            renderBlockEntities = singleBlock.entities.map((blockEntity) => \n               this.BlockEntity(blockEntity)\n           );            \n       }\n\n       var renderBlockEvidences=\"\";\n       if(singleBlock.evidences!=null && singleBlock.evidences.length>0){            \n        renderBlockEvidences = singleBlock.evidences.map((blockEvidence, index) => \n           this.BlockEvidence(blockEvidence, index)\n       );            \n       }\n\n       return(\n        <div className=\"graph-block-para-div\"\n        onClick={() => { this.clickBlockFromList(singleBlock)}}>\n            <h4 className=\"graph-block-title\">{this.removeHashedIndex(singleBlock.title)}</h4>\n            <div className=\"graph-content-container\">\n                    <p className=\"graph-block-text\">\n                        {singleBlock.summary}\n                    </p> \n                    <div class=\"graph-block-evidence-container\">\n                        {renderBlockEvidences}                       \n                    </div>\n            </div>                    \n        </div>\n        );\n    }\n\n\n\n    firstEntityClicked(entityList) {\n        this.setState({ firstEntitySelectList: entityList });\n    }\n    \n    firstSelectedBadgeClicked(entityList) {\n        this.setState({ firstEntitySelectList: entityList });\n    }\n\n    secondEntityClicked(entityList) {\n        this.setState({ secondEntitySelectList: entityList });\n    }\n    \n    secondSelectedBadgeClicked(entityList) {\n        this.setState({ secondEntitySelectList: entityList });\n    }\n\n    clickBlockFromList(block){\n        this.props.selectBlock(block);\n    }\n\n    componentDidMount(){\n        this.initializeGraphEvents();\n        this.generateEntityLists();\n        this.generateGraph();\n\n    }\n\n    toggleSelectedBlocksPane(){\n        this.setState({\n            openSelectedBlocks: !this.state.openSelectedBlocks\n        });        \n    }\n\n    render(){\n\n\n        const selectedOptionsStyles = {\n            color: \"white\",\n            backgroundColor: \"rgb(117, 106, 214)\",\n            borderRadius:\"20px\",\n            fontSize:'0.6em',\n            padding:'10px',\n            maxWidth: '92%',\n            wordWrap: 'break-word'\n        };\n        const optionsListStyles = {\n            backgroundColor: \"darkcyan\",\n            color: \"white\",\n\n        };\n        const transitions = [\"height\", \"opacity\", \"background\"];\n\n        var renderBlocks = this.state.currentSelectedBlocks.map((selectedBlock) => \n               this.SingleBlock(selectedBlock)\n           );     \n           \n        let selectedNodesString = ': ';\n        for(let i=0; i<this.state.selectedNodes.length; i++){\n            selectedNodesString += this.state.selectedNodes[i] + ', ';\n        }\n        if(selectedNodesString.length > 0)\n            selectedNodesString = selectedNodesString.substring(0,selectedNodesString.length - 2);\n        \n        return (\n            <div>\n                <div className='filter-container'>                \n                \n                    <div className=\"find-connections-dropdown-container\">\n                        <MultiSelectReact \n                        options={this.state.firstEntitySelectList}\n                        optionClicked={this.firstEntityClicked.bind(this)}\n                        selectedBadgeClicked={this.firstSelectedBadgeClicked.bind(this)}\n                        selectedOptionsStyles={selectedOptionsStyles}\n                        optionsListStyles={optionsListStyles} \n                        isSingleSelect={true}\n                        isTextWrap={false} \n                        />\n                        \n                    </div>\n\n                    <div className=\"find-connections-dropdown-container\">\n                        <MultiSelectReact \n                        options={this.state.secondEntitySelectList}\n                        optionClicked={this.secondEntityClicked.bind(this)}\n                        selectedBadgeClicked={this.secondSelectedBadgeClicked.bind(this)}\n                        selectedOptionsStyles={selectedOptionsStyles}\n                        optionsListStyles={optionsListStyles} \n                        isSingleSelect={true}\n                        isTextWrap={false} \n                        />    \n                    </div>\n\n                    <button className=\"filterButton\" onClick={this.generateAmGraph}>Find Connection</button>\n                </div>\n                                           \n                    {this.state.currentSelectedBlocks.length >= 0? \n                        <div className=\"graph-block-list\">\n                            <div className='graph-block-list-title' onClick={this.toggleSelectedBlocksPane} ref={this.findConnectionRef}>\n                                <span>Graph selections</span>  \n                                <span>{selectedNodesString}</span>\n                            </div> \n                            <Expand \n                                open={this.state.openSelectedBlocks}\n                                duration={1000}\n                                transitions={transitions}>\n                                <div className='graph-block-list-container' id=\"graph-selected-block-list\">\n                                    {renderBlocks}\n                                </div>\n                            </Expand>\n                        </div>                      \n                        :\n                        null}                      \n                    <div className=\"graph-main\">\n                        <AmGraph \n                                graph={this.state.amGraph}  \n                                selectEdge = {this.selectEdge}    \n                                selectNode = {this.selectNode}                    \n                                />\n                    </div>  \n            </div>\n        );\n    }\n\n}\nexport default FindConnectionsComponent;\n\n\n/* <div className=\"graph-main\">\n                        <Graph \n                                 graph={this.state.graph} \n                                 options={this.state.graphOptions} \n                                 events={this.state.graphEvents} \n                                />\n                    </div> */","import React, { Component } from 'react';\nimport './TimelineComponent.css';\nimport { VerticalTimeline, VerticalTimelineElement }  from 'react-vertical-timeline-component';\nimport Img from 'react-image';\nimport ReactGA from 'react-ga';\nimport PlayArrow from '@material-ui/icons/PlayArrow';\nimport Pause from '@material-ui/icons/Pause';\nimport Stop from '@material-ui/icons/Stop';\nimport Speech from 'speak-tts';\nimport  * as  Utils from '../common/utilSvc';\nimport 'react-vertical-timeline-component/style.min.css';\nimport { isNullOrUndefined } from 'util';\n\nconst isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);\nconst isIE = /*@cc_on!@*/false || !!document.documentMode;\n\nclass TimelineComponent extends React.Component {\n\n    constructor(props){\n      super(props);\n\n      this.state = {\n          playStatus: 'end',\n          isSpeechAvailable: false\n      }\n\n      this.speech = null;\n      \n      this.selectTimelineBlock = this.selectTimelineBlock.bind(this);\n      this.removeHashedIndex = this.removeHashedIndex.bind(this);\n\n    this.initSpeech = this.initSpeech.bind(this);\n    this.playExistingSelection = this.playExistingSelection.bind(this);\n    this.stopExistingSelection = this.stopExistingSelection.bind(this);\n    this.timeoutFn = this.timeoutFn.bind(this);\n    this.timeInFn = this.timeInFn.bind(this);\n\n      ReactGA.initialize('UA-143383035-1');  \n    }\n\n    async timeoutFn(){  \n        if(this.state.playStatus == 'start' && !isNullOrUndefined(this.speech) && isChrome){\n            await this.speech.pause();\n            await this.speech.resume();     \n        }     \n    }\n\n    timeInFn(){\n        const scope = this;\n        this.timeout = setInterval(() => {            \n            this.timeoutFn();                \n          }, 8500);\n    }\n\n    async initSpeech(){\n        try{\n            this.speech = new Speech();\n            if(this.speech.hasBrowserSupport()) { // returns a boolean\n                // console.log(\"speech synthesis supported\")\n            }\n            let data = await this.speech.init();  \n            \n            if(!isNullOrUndefined(data)){\n                this.setState({\n                    isSpeechAvailable: true\n                });\n            }\n            \n            let voices =  data.voices;\n            let selectedVoice = -1;\n            for(let i=0; !isNullOrUndefined(voices) && i<voices.length; i++){\n                if(selectedVoice == -1)\n                    selectedVoice = i;\n                // firebase.database().ref('Testing/dataVal/'+String(i)).set(voices[i].name);\n                let name = voices[i].name;\n                if(name.toLowerCase().includes('eng') || name.toLowerCase().includes('catherine')) \n                {\n                    selectedVoice = i;\n                    break;\n                }\n            }\n            if(selectedVoice != -1){\n                //firebase.database().ref('Testing/dataVal').set(voices[selectedVoice].name);\n                await this.speech.setVoice(voices[selectedVoice].name);\n            }\n        }\n        catch{}\n    }\n\n    async stopExistingSelection(){\n        if(!isNullOrUndefined(this.speech)){\n            await this.speech.cancel();\n            this.setState({\n                playStatus: 'end'\n            });    \n        }\n    }\n\n    async playExistingSelection(){\n        if(!isNullOrUndefined(this.speech)){\n            if(this.speech.speaking())\n                await this.speech.cancel();\n          \n            let selectedNodesString = 'timeline';\n            ReactGA.event({\n                category: 'playSound',\n                action: 'PlaySound ' + selectedNodesString,\n                label: 'PlaySound ' + selectedNodesString\n            });\n\n            let toPlayText = '';\n            this.props.timeline.map((selectedBlock) => \n                {\n                    let dateTimeStr = Utils.getDateTimeString(selectedBlock);\n                    let title = this.removeHashedIndex(selectedBlock.title);\n                    let summary = selectedBlock.summary;\n\n                    if(!isNullOrUndefined(selectedBlock.blockDate) && isNullOrUndefined(selectedBlock.blockDate.month)){\n                        dateTimeStr = 'Year ' + dateTimeStr;\n                    }\n\n                    if(!isNullOrUndefined(dateTimeStr) && dateTimeStr.length>0){\n                        toPlayText += dateTimeStr + \". \";\n                    }\n                    if(!isNullOrUndefined(title) && title.length>0)\n                        toPlayText += (Utils.correctTextForSpeech(title) + '. ');\n                    toPlayText += Utils.correctTextForSpeech(summary);\n                    toPlayText  += '. ';\n                    for(let i=0; !isNullOrUndefined(selectedBlock.numbers) && i<selectedBlock.numbers.length;i++){\n                        toPlayText += (selectedBlock.numbers[i].key + \": \" + \n                            String(selectedBlock.numbers[i].value)+ \". \");\n                    }\n                }\n            );\n            this.setState({\n                playStatus: 'start'\n            });\n            this.speech.speak({\n                text: toPlayText,\n                queue: false\n            }).then(() => {\n                this.setState({\n                    playStatus: 'end'\n                });\n                //console.log('here');\n            }).catch(e => {\n                console.error(\"An error occurred :\", e)\n            });\n            \n        }\n    }\n\n    async componentDidMount(){\n        await this.initSpeech();\n\n        if(isChrome)\n            this.timeInFn();\n    }\n\n    async componentWillUnmount(){\n        if(!isNullOrUndefined(this.speech)){\n            await this.speech.cancel();\n        }\n    }\n\n    BlockEvidence(evidence, index){\n        const WebView = require('react-electron-web-view');\n        var evidenceList = [evidence.evidenceLink];\n        return(\n            <div >\n                <Img src={evidenceList}\n                style={{width:'80%',marginLeft: '10%', marginRight: '10%'}}></Img>\n            </div>\n        );\n    } \n\n    BlockEntity(entity){\n      return(\n      <span className=\"timeline-block-entity\">\n          {entity.title}\n      </span>\n      );  \n     }\n\n     removeHashedIndex(a){\n        if(a){        \n            a = a.trim();\n            var startI = 0;\n            if(a.length>0 && a[0]=='#'){\n                for(var i=1; i<a.length; i++){\n                    startI = i;\n                    if(a.charAt(i)==' '){\n                        return a.substring(startI).trim();\n                    }\n                } \n                return '';   \n            }\n            return a;\n        }\n        return '';\n    }\n\n     selectTimelineBlock(block){\n        //console.log(block);\n\n        ReactGA.event({\n            category: 'select_timeline_block',\n            action: 'Select ' + JSON.stringify(block),\n            label: JSON.stringify(block)\n          });\n          \n        this.props.selectBlock(block);\n     }\n     \n     renderTimeline(timelineBlock, index){\n         /*\n         Create render template for the entities\n         */\n        var renderBlockEntities = '';\n        if(timelineBlock.entities!=null && timelineBlock.entities.length>0){            \n             renderBlockEntities = timelineBlock.entities.map((blockEntity) => \n                this.BlockEntity(blockEntity)\n            );            \n        } \n        \n        var renderBlockEvidences=\"\";\n        if(timelineBlock.evidences && timelineBlock.evidences.length>0){            \n            renderBlockEvidences = timelineBlock.evidences.map((blockEvidence, index) => \n            this.BlockEvidence(blockEvidence, index)\n        );            \n        }\n\n       //TODO add function here to get DateTime\n       const blockDateTime = Utils.getDateTimeString(timelineBlock);\n       var backgroundColor = 'rgb(33, 150, 243)';\n   \n       if(index%3===1)\n       {\n            backgroundColor = 'rgb(243, 33, 150)';\n       }\n       else if(index%3===2)\n       {\n            backgroundColor = 'rgb(243, 33, 25)';\n       }\n\n       let renderNumbers = null;\n       if(!isNullOrUndefined(timelineBlock.numbers) && timelineBlock.numbers.length>0){\n           let numbers = timelineBlock.numbers;\n            renderNumbers = numbers.map((number) => \n            <span><span className=\"graph-content-number-key\">{number.key}: </span> \n            <b className=\"graph-content-number-value\">{number.value}</b> <br/></span>\n        ); \n       }\n\n       return (\n         <VerticalTimelineElement\n            className=\"vertical-timeline-element--work\"\n            date={blockDateTime}\n            iconStyle={{ background: backgroundColor, color: '#fff' }}         \n        >\n       <div onClick={() => { this.selectTimelineBlock(timelineBlock)}} className=\"timeline-block-container\">\n            \n            {this.removeHashedIndex(timelineBlock.title).length > 0? \n                        <h4 className=\"vertical-timeline-element-title timeline-block-title timeline-block-text\">{this.removeHashedIndex(timelineBlock.title)}</h4>\n                        :\n                        null\n            }\n            <p className=\"timeline-block-text\">\n                {timelineBlock.summary}\n            </p>\n            <p className=\"timeline-block-text\">\n                {renderNumbers}\n            </p>\n\n            {renderBlockEvidences.length !== ''?\n                        <div>\n                            {renderBlockEvidences}\n                        </div>\n                        :\n                        null}        \n\n        </div>\n          \n       </VerticalTimelineElement>\n       );\n     }\n\n    render() {\n\n      const timelineView = this.props.timeline.map((timelineBlock, index) => \n      this.renderTimeline(timelineBlock, index)\n    );\n      return (\n          <div>\n              {!isIE && this.state.isSpeechAvailable?\n                <div className='timeline-block-list-sound timeline-view-container-width'>\n                    {this.state.playStatus == 'end'?\n                        <a onClick={this.playExistingSelection} className=\"soundIcon\">\n                            <PlayArrow />\n                        </a>\n                        :\n                        null\n                    }                                       \n\n                    {(this.state.playStatus == 'start' || this.state.playStatus == 'paused')?\n                        <a onClick={this.stopExistingSelection} className=\"soundIcon\">\n                            <Stop />\n                        </a>\n                        :\n                        null\n                    }    \n                </div>\n                :\n                null\n            }\n            \n            <div style={{background:'lightblue'}} className=\"timeline-view-container timeline-view-container-width\" id=\"timeline-view-container-id\">\n                <VerticalTimeline> \n                    {timelineView}\n                    <VerticalTimelineElement\n                        iconStyle={{ background: 'rgb(16, 204, 82)', color: '#fff' }}\n                    />\n                </VerticalTimeline>\n            </div>\n            <div className=\"dummyTimelineView timeline-view-container-width\"></div>\n          </div>\n      );\n    }\n  }\n  export default TimelineComponent;","import React, { Component } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport Joyride,{ ACTIONS, EVENTS, STATUS } from 'react-joyride';\nimport Info from '@material-ui/icons/Info';\nimport \"react-tabs/style/react-tabs.css\";\nimport './DashboardView.css';\nimport SummaryViewComponent from \"../summary/SummaryView\";\nimport GraphComponent from \"../GraphComponent\";\nimport FindConnectionsComponent from \"../FindConnectionsComponent\";\nimport TimelineComponent from \"../TimelineComponent\";\nimport * as Locale from \"../../Localization/localizedStrings\";\nimport { isNullOrUndefined } from 'util';\n\nclass DashboardViewComponent extends React.Component {\n\n    constructor(props){\n      super(props);\n     //lang is necessary\n\n      this.state={\n          key: 'graph',\n          adhocTooltip:{\n            timeline:{\n                flag: false,\n                text: [\n                    {\n                        title: Locale.timelineTooltips.title[props.lang],\n                        target: '.tooltipTimeline',\n                        content: Locale.timelineTooltips.desc[props.lang],\n                        disableBeacon: true\n                    }\n                ]\n            },\n            mindmap:{\n                flag: false,\n                text: [\n                    {\n                        title: Locale.mindMapTooltips.title[props.lang],\n                        target: '.tooltipMindmap',\n                        content: Locale.mindMapTooltips.desc[props.lang],\n                        disableBeacon: true\n                    }\n                ]\n            }\n        }\n      }\n      this.isSummaryBlocksAvailable = this.isSummaryBlocksAvailable.bind(this);\n      this.isGraphAvailable = this.isGraphAvailable.bind(this);\n      this.isTimelineAvailable = this.isTimelineAvailable.bind(this);\n      this.showLocalTooltip = this.showLocalTooltip.bind(this);\n      this.hideLocalTooltip = this.hideLocalTooltip.bind(this);\n      this.handleAdhocTooltipJoyrideCallback = this.handleAdhocTooltipJoyrideCallback.bind(this);\n\n    }\n\n    showLocalTooltip(type){\n        var adhocTooltip = this.state.adhocTooltip;\n       if(type=='timeline'){\n           adhocTooltip.timeline.flag = true;\n       }\n       else if(type=='mindmap'){\n           adhocTooltip.mindmap.flag = true;\n       }\n       this.setState({adhocTooltip: adhocTooltip});\n    }\n\n    hideLocalTooltip(type){\n        var adhocTooltip = this.state.adhocTooltip;\n        if(type=='timeline'){\n           adhocTooltip.timeline.flag = false;\n       }\n        else if(type=='mindmap'){\n           adhocTooltip.mindmap.flag = false;\n       }\n        this.setState({adhocTooltip: adhocTooltip});\n    }\n\n    handleAdhocTooltipJoyrideCallback(data, tooltipType){\n        const {action,index,status,type} = data;\n        if([STATUS.FINISHED, STATUS.SKIPPED].includes(status)){\n            this.hideLocalTooltip(tooltipType);\n        }\n    }\n\n    isSummaryBlocksAvailable(){\n        if(isNullOrUndefined(this.props.summaryBlocks) || this.props.summaryBlocks.length==0)\n            return false;\n        return true;\n    }\n\n    isGraphAvailable(){\n        if(isNullOrUndefined(this.props.investigationGraph) || Object.keys(this.props.investigationGraph).length==0)\n            return false;\n        return true;\n    }\n\n    isTimelineAvailable(){\n        if(this.props.timeline && this.props.timeline.length > 0)\n            return true;\n        return false;\n    }\n\n    isBlockprobeEmpty(){\n        if(!this.isTimelineAvailable() && !this.isGraphAvailable() && !this.isSummaryBlocksAvailable()){\n            return true;\n        }\n        return false;\n    }\n\n    render(){\n        let lang = this.props.lang;\n        if(isNullOrUndefined(lang))\n            lang = 'en';\n\n        return (\n            <div style={{paddingBottom:'15px'}}>\n\n                {this.props.setNewVisualisation?\n                    <div className=\"shareTooltipTextContainer\">\n                        <p className='contributeOptionText'>Click on the menu (top-left) and choose <a className='tooltip-selection' onClick={() => this.props.setNewVisualisation('contributions')}>Contribute</a> to resume working.</p>\n                        <p className='contributeOptionText'>Click on the menu (top-left) and choose <a className='tooltip-selection' onClick={() => this.props.setNewVisualisation('publish_blockprobe')}>Share</a> to share.</p>\n                    </div>\n                    :\n                    null\n                }\n\n                {this.isSummaryBlocksAvailable()?\n                    <div>\n                        <SummaryViewComponent\n                                summaryBlocks = {this.props.summaryBlocks}\n                                selectBlock={this.props.selectBlock}/>\n                    </div>\n                            :\n                    null\n                }\n                \n                {this.isGraphAvailable()?\n                    <div>\n                        <div className=\"dashboard-section-heading graph-heading\">{Locale.mindMap[lang]}\n                        <a className='tooltipMindmap tooltips-dashboard' \n                            onMouseEnter={() => this.showLocalTooltip('mindmap')}\n                            onClick={(e)=>{this.showLocalTooltip('mindmap')}} >\n                            <Info style={{fontSize:'19px'}}/>\n                        </a>\n                        <Joyride\n                        styles={{\n                            options: {\n                            arrowColor: '#e3ffeb',\n                            beaconSize: '4em',\n                            primaryColor: '#05878B',\n                            backgroundColor: '#e3ffeb',\n                            overlayColor: 'rgba(10,10,10, 0.4)',\n                            width: 900,\n                            zIndex: 1000,\n                            }\n                            }}\n                            steps={this.state.adhocTooltip.mindmap.text}\n                            run = {this.state.adhocTooltip.mindmap.flag}\n                            callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'mindmap')}}                    \n                            />  \n                        </div>\n                                                \n                                <GraphComponent blockTree={this.props.blockTree} \n                                    investigationGraph={this.props.investigationGraph}\n                                    selectBlock={this.props.selectBlock}\n                                    imageMapping = {this.props.imageMapping}\n                                    setScrollToGraphList ={this.props.setScrollToGraphList}\n                                    multiSelectEntityList = {this.props.multiSelectEntityList}\n                                    isPublic = {this.props.isPublic}\n                                    lang = {this.props.lang}/>\n                       \n                    </div>\n                    :\n                    null\n                } \n\n\n\n                {this.isTimelineAvailable()?\n\n                    <div>\n                        <div className=\"dashboard-section-heading timeline-heading\" style={{marginBottom:'0 !important'}}>{Locale.timeline[lang]}\n                        <a className='tooltipTimeline tooltips-dashboard' \n                            onMouseEnter={() => this.showLocalTooltip('timeline')}\n                            onClick={(e)=>{this.showLocalTooltip('timeline')}} >\n                            <Info style={{fontSize:'19px'}}/>\n                        </a>\n                        <Joyride\n                        styles={{\n                            options: {\n                            arrowColor: '#e3ffeb',\n                            beaconSize: '4em',\n                            primaryColor: '#05878B',\n                            backgroundColor: '#e3ffeb',\n                            overlayColor: 'rgba(10,10,10, 0.4)',\n                            width: 900,\n                            zIndex: 1000,\n                            }\n                            }}\n                            steps={this.state.adhocTooltip.timeline.text}\n                            run = {this.state.adhocTooltip.timeline.flag}\n                            callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'timeline')}}                    \n                            />  \n                        </div> \n                            <TimelineComponent \n                                timeline={this.props.timeline} \n                                selectBlock={this.props.selectBlock}/>\n                    </div>\n                        :\n                        null\n                }\n                \n\n                {this.isBlockprobeEmpty()?\n                    <div className=\"dashboard-section-heading graph-heading\" style={{textAlign: 'center'}}>\n                        {Locale.visualizationsNotFound[lang]}\n                    </div>\n                    :\n                    null\n                }         \n                \n            </div>\n        );\n    }\n}\nexport default DashboardViewComponent;\n\n/*\n <TabPanel>\n                        <FindConnectionsComponent blockTree={this.props.blockTree} \n                            investigationGraph={this.props.investigationGraph}\n                            imageMapping = {this.props.imageMapping}\n                            selectBlock={this.props.selectBlock}\n                            setScrollToGraphList ={this.props.setScrollToGraphList}\n                        />\n                    </TabPanel>\n\n\n\n                     \n\n\n                {this.isGraphAvailable() || this.isTimelineAvailable()?\n                    <div className=\"dashboard-section-heading graph-heading\">Visualisations</div>\n                    :\n                    null\n                }\n                <Tabs style={{marginTop:'15px'}}>\n                    <TabList>\n                        {this.isGraphAvailable()?\n                            <Tab>Mindmap</Tab>\n                            :\n                            null\n                        }\n\n                        {this.isTimelineAvailable()?\n                            <Tab>Timeline</Tab>\n                            :\n                            null\n                        }\n                    </TabList>   \n                    \n                    {this.isGraphAvailable()?\n                        <TabPanel>\n                            <GraphComponent blockTree={this.props.blockTree} \n                                investigationGraph={this.props.investigationGraph}\n                                selectBlock={this.props.selectBlock}\n                                imageMapping = {this.props.imageMapping}\n                                setScrollToGraphList ={this.props.setScrollToGraphList}\n                                multiSelectEntityList = {this.props.multiSelectEntityList}/>\n                        </TabPanel>\n                        :\n                        null}             \n\n                    {this.isTimelineAvailable()?\n                        <TabPanel>\n                            <TimelineComponent \n                                timeline={this.props.timeline} \n                                selectBlock={this.props.selectBlock}/>\n                        </TabPanel>\n                        :\n                        null}                     \n\n                </Tabs>         \n\n                    */","import React, { Component } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport Joyride,{ ACTIONS, EVENTS, STATUS } from 'react-joyride';\nimport Info from '@material-ui/icons/Info';\nimport \"react-tabs/style/react-tabs.css\";\nimport './DashboardView.css';\nimport SummaryViewComponent from \"../summary/SummaryView\";\nimport GraphComponent from \"../GraphComponent\";\nimport FindConnectionsComponent from \"../FindConnectionsComponent\";\nimport TimelineComponent from \"../TimelineComponent\";\nimport { isNullOrUndefined } from 'util';\n\nclass MiniDashboardViewComponent extends React.Component {\n\n    constructor(props){\n      super(props);\n      this.state={\n          key: 'graph',\n          adhocTooltip:{\n            timeline:{\n                flag: false,\n                text: [\n                    {\n                        title: 'Timeline view',\n                        target: '.tooltipTimeline',\n                        content: 'Visualise the story as a timeline!',\n                        disableBeacon: true\n                    }\n                ]\n            },\n            mindmap:{\n                flag: false,\n                text: [\n                    {\n                        title: 'Mindmap view',\n                        target: '.tooltipMindmap',\n                        content: 'Visualise the story as a mindmap! Select any topic from the mindmap to read all about that topic.',\n                        disableBeacon: true\n                    }\n                ]\n            }\n        }\n      }\n      this.isSummaryBlocksAvailable = this.isSummaryBlocksAvailable.bind(this);\n      this.isGraphAvailable = this.isGraphAvailable.bind(this);\n      this.isTimelineAvailable = this.isTimelineAvailable.bind(this);\n      this.showLocalTooltip = this.showLocalTooltip.bind(this);\n      this.hideLocalTooltip = this.hideLocalTooltip.bind(this);\n      this.handleAdhocTooltipJoyrideCallback = this.handleAdhocTooltipJoyrideCallback.bind(this);\n    }\n\n    showLocalTooltip(type){\n        var adhocTooltip = this.state.adhocTooltip;\n       if(type=='timeline'){\n           adhocTooltip.timeline.flag = true;\n       }\n       else if(type=='mindmap'){\n           adhocTooltip.mindmap.flag = true;\n       }\n       this.setState({adhocTooltip: adhocTooltip});\n    }\n\n    hideLocalTooltip(type){\n        var adhocTooltip = this.state.adhocTooltip;\n        if(type=='timeline'){\n           adhocTooltip.timeline.flag = false;\n       }\n        else if(type=='mindmap'){\n           adhocTooltip.mindmap.flag = false;\n       }\n        this.setState({adhocTooltip: adhocTooltip});\n    }\n\n    handleAdhocTooltipJoyrideCallback(data, tooltipType){\n        const {action,index,status,type} = data;\n        if([STATUS.FINISHED, STATUS.SKIPPED].includes(status)){\n            this.hideLocalTooltip(tooltipType);\n        }\n    }\n\n    isSummaryBlocksAvailable(){\n        if(isNullOrUndefined(this.props.summaryBlocks) || this.props.summaryBlocks.length==0)\n            return false;\n        return true;\n    }\n\n    isGraphAvailable(){\n        if(isNullOrUndefined(this.props.investigationGraph) || Object.keys(this.props.investigationGraph).length==0)\n            return false;\n        return true;\n    }\n\n    isTimelineAvailable(){\n        if(this.props.timeline && this.props.timeline.length > 0)\n            return true;\n        return false;\n    }\n\n    isBlockprobeEmpty(){\n        if(!this.isTimelineAvailable() && !this.isGraphAvailable() && !this.isSummaryBlocksAvailable()){\n            return true;\n        }\n        return false;\n    }\n\n    render(){\n        return (\n            <div style={{paddingBottom:'15px'}}>\n\n                <Tabs style={{marginTop:'10px'}}>\n                    <TabList>\n                        {this.isGraphAvailable()?\n                            <Tab>Mindmap</Tab>\n                            :\n                            null}\n                        {this.isTimelineAvailable()?\n                            <Tab>Timeline</Tab>\n                            :\n                            null}\n\n                        {this.isSummaryBlocksAvailable()?\n                            <Tab>Summary</Tab>\n                            :\n                            null}\n                    </TabList>\n\n                    \n                        {this.isGraphAvailable()?\n                           <TabPanel>\n                            <div>\n                                    <GraphComponent blockTree={this.props.blockTree} \n                                        investigationGraph={this.props.investigationGraph}\n                                        selectBlock={this.props.selectBlock}\n                                        imageMapping = {this.props.imageMapping}\n                                        setScrollToGraphList ={this.props.setScrollToGraphList}\n                                        multiSelectEntityList = {this.props.multiSelectEntityList}\n                                        isPublic = {this.props.isPublic}\n                                        lang = {this.props.lang}/>\n                                </div>\n                            </TabPanel>\n                            :\n                            null\n                             }\n\n\n                    \n                        {this.isTimelineAvailable()?\n                            <TabPanel>\n                                <div>\n                                    <TimelineComponent \n                                        timeline={this.props.timeline} \n                                        selectBlock={this.props.selectBlock}/>\n                                </div>\n                            </TabPanel>\n                            :\n                            null\n                            }\n                    \n\n                    \n                        {this.isSummaryBlocksAvailable()?\n                            <TabPanel>\n                                <div>                            \n                                    <SummaryViewComponent\n                                        summaryBlocks = {this.props.summaryBlocks}\n                                        selectBlock={this.props.selectBlock}/>\n                                </div>\n                            </TabPanel>\n                            :\n                            null\n                            }             \n                </Tabs>               \n                              \n\n                {this.isBlockprobeEmpty()?\n                    <div className=\"dashboard-section-heading graph-heading\" style={{textAlign: 'center'}}>\n                        Visualizations not found\n                    </div>\n                    :\n                    null\n                }         \n                \n            </div>\n        );\n    }\n}\nexport default MiniDashboardViewComponent;\n\n/*\n <TabPanel>\n                        <FindConnectionsComponent blockTree={this.props.blockTree} \n                            investigationGraph={this.props.investigationGraph}\n                            imageMapping = {this.props.imageMapping}\n                            selectBlock={this.props.selectBlock}\n                            setScrollToGraphList ={this.props.setScrollToGraphList}\n                        />\n                    </TabPanel>\n                    */","import { isNullOrUndefined } from \"util\";\n\nexport const maxUsers = 25;\n\nexport const langs = [\n    {\n        id: 'en',\n        label: 'English'\n    },\n    {\n        id: 'hi',\n        label: 'Hindi'\n    },\n    {\n        id: 'ml',\n        label: 'Malayalam'\n    },\n    {\n        id: 'mr',\n        label: 'Marathi'\n    },\n    {\n        id: 'bn',\n        label: 'Bengali'\n    }\n];\n\nexport const edenColors = [\n    '#556efd',\n    '#e43c84',\n    '#ed4442',\n    '#46237a',\n    '#3ddc97'\n]\n\nexport const blockprobeUrl = \"https://blprobe.com\";\n\nexport const maxGameListChar = 100;\n\nexport const maxLengthOfGamelist = 20;\n\nexport const nodesMinPossible = 6;\nexport const nodesToBeDisplayed = 26;\nexport const reshuffleCriteria = 0.4;","import React, { Component } from 'react';\nimport ReactGA from 'react-ga';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport * as am4plugins_forceDirected from \"@amcharts/amcharts4/plugins/forceDirected\"; \nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4plugins_bullets from \"@amcharts/amcharts4/plugins/bullets\";\nimport * as Const from '../../common/constants';\nimport { isNullOrUndefined } from 'util';\n\nam4core.useTheme(am4themes_animated);\n\nclass GamifiedGraph extends React.Component {\n\n    constructor(props){\n      super(props);\n      //graph, selectedNodes\n      \n      this.generateAmForceDirectedGraph = this.generateAmForceDirectedGraph.bind(this);\n      this.prepareData = this.prepareData.bind(this);\n      this.chart = {};\n      this.data = [];\n      this.refData = [];\n      this.edgeList = [];\n      this.selectedEdges={};\n      this.selectedLink = null;\n      this.prevNode = null;\n      this.prevLinksWith = null;\n      this.currIndex = 0;\n      this.count = 0;\n      this.totalCnt = 0;\n\n      this.previousChart = JSON.parse(JSON.stringify(props.graph));\n\n      this.getDesiredLink = this.getDesiredLink.bind(this);\n      this.hasEdgeBeenSelected = this.hasEdgeBeenSelected.bind(this);\n\n      ReactGA.initialize('UA-143383035-1');  \n    }\n\n    hideNode(list, index, shouldHide){\n        list[index].nodeDisabled = shouldHide;\n    }\n\n    showOnlyNodes(list, nodes){\n        for(let i=0; !isNullOrUndefined(list) && i<list.length; i++){\n            if(list[i].label in nodes)\n                this.hideNode(list,i,false);\n            else\n                this.hideNode(list,i,true);\n        }\n    }\n\n    getNodesToBeDisplayed(){\n        let edgeList = this.edgeList;\n        let nodes = {};\n        if(edgeList.length <= 0)\n            return nodes;\n        let len = edgeList.length;\n\n        let totalCnt = 0;\n        let i = (this.currIndex)%len;\n        while(1){\n            i = (i+1)%len;\n            if(!this.hasEdgeBeenSelected(edgeList[i].f,edgeList[i].s)){\n                nodes[edgeList[i].f]='';\n                nodes[edgeList[i].s]='';   \n                totalCnt++;\n            }\n            if(Object.keys(nodes).length == Const.nodesToBeDisplayed)\n                break;            \n\n            if(i==(this.currIndex%len))\n                break;\n        }\n        this.currIndex = i;\n\n        while((Object.keys(nodes).length < Const.nodesMinPossible))\n        {\n            i = (i+1)%len;\n            //Dummy nodes                        \n            if(this.hasEdgeBeenSelected(edgeList[i].f,edgeList[i].s)){\n                nodes[edgeList[i].f]='';\n                nodes[edgeList[i].s]='';                   \n            }\n            if(i==(this.currIndex%len))\n                break;\n        }\n        this.count = 0;\n        this.totalCnt = totalCnt;\n        return nodes;\n    }\n\n    reshuffleGraphNodes(data){\n        let nodeMap = this.getNodesToBeDisplayed();\n        //console.log(nodeMap);\n        this.showOnlyNodes(data,nodeMap);\n    }\n\n    getEdgeList(data){\n        var edgeList = [];\n\n        for(var i=0; data && i<data.length; i++){\n            var newEntry = JSON.parse(JSON.stringify(data[i]));\n            if(!(newEntry.label == 'ALL')){\n                if(newEntry.link){\n                    for(let j=0; j<newEntry.link.length; j++){\n                        edgeList.push({\n                            f: newEntry.label,\n                            s: data[newEntry.link[j]].label,\n                            selected: false\n                        })\n                    }\n                }\n            }\n        }\n        return edgeList;\n    }\n\n    prepareData(data, isRefData){\n        var newData = [];\n\n        for(var i=0; data && i<data.length; i++){\n            var newEntry = JSON.parse(JSON.stringify(data[i]));\n            if(newEntry.image && newEntry.image.length>0){\n                newEntry.imageDisabled = false;\n                newEntry.circleDisabled = true;\n            }\n            else{\n                newEntry.imageDisabled = true;\n                newEntry.circleDisabled = false;\n            }\n\n            newEntry.color = am4core.color(Const.edenColors[(i%(Const.edenColors.length))]);\n            if(newEntry.label == 'ALL'){\n                newEntry.isNotAll = false;\n                newEntry.imageDisabled = true;\n                newEntry.circleDisabled = true;\n            }\n            else{\n                newEntry.isNotAll = true;\n            }         \n            \n            if(!isRefData)\n                delete newEntry['link'];\n\n            if(!(newEntry.label == 'ALL')){\n                newData.push(newEntry);\n            }\n        }\n\n        return newData;\n    }\n\n    getDesiredLink(linksWithList, nodeA, nodeB){\n        for(let i=0; !isNullOrUndefined(linksWithList) && i<linksWithList.length; i++){\n            let linkList = linksWithList[i];\n            if(!isNullOrUndefined(linkList)){\n                for(let key in linkList){\n                    let link = linkList[key];\n                    let source = link.source.label.currentText; \n                    let target = link.target.label.currentText;\n                    if(source != target && ((source==nodeA && target == nodeB) || (source==nodeB && target == nodeA))){\n                        return link;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    hasEdgeBeenSelected(nodeA, nodeB){\n        if(isNullOrUndefined(nodeA) || isNullOrUndefined(nodeB))\n            return;\n\n        if((String(nodeA + ',_CCC_,' + nodeB) in this.selectedEdges) || (String(nodeB + ',_CCC_,' + nodeA) in this.selectedEdges))\n            return true;\n        return false;\n    }\n\n    addSelectedEdgeToMap(nodeA, nodeB){\n        this.selectedEdges[String(nodeA + ',_CCC_,' + nodeB)] = true;\n    }\n\n    getCenterStrength(numberOfNodes){\n        // Assume linear\n        return (0.2772727 + (0.022727)*numberOfNodes);\n    }\n\n    getBodyStrength(numberOfNodes){\n        //Assume linear\n        return (0.170454*numberOfNodes - 40.04545); \n    }\n\n    generateAmForceDirectedGraph(data){\n        // Create chart\n        var chart = am4core.create(\"chartdiv\", am4plugins_forceDirected.ForceDirectedTree);\n\n        // Create series\n        var series = chart.series.push(new am4plugins_forceDirected.ForceDirectedSeries());\n\n        let numberOfNodes = this.data.length;\n\n       //console.log(graph);\n        series.data = this.data;\n \n        // Set up data fields\n        series.dataFields.value = \"value\";\n        series.dataFields.name = \"label\";\n        series.dataFields.id = \"id\";\n        series.dataFields.children = \"children\";\n        series.dataFields.linkWith = \"link\";\n        series.dataFields.color = \"color\";\n\n        // Add labels\n        series.nodes.template.label.text = \"{name}\";\n        series.nodes.template.tooltipText = \"{name}\";\n        series.nodes.template.id = \"{id}\";\n\n      //  /*\n        series.nodes.template.label.valign = \"bottom\";\n        series.nodes.template.label.fill = am4core.color(\"#000\");\n        series.nodes.template.label.dy = -30;\n      //  */\n        /*\n        series.nodes.template.label.hideOversized = true;\n        series.nodes.template.label.truncate = true;\n        */\n\n        series.fontSize = 13;\n        series.minRadius = 10;\n        series.maxRadius = 10;\n        series.propertyFields.fill = \"color\";\n        series.nodes.template.label.propertyFields.hidden = 'circleDisabled';\n        series.nodes.template.togglable = false;\n        series.nodes.template.propertyFields.disabled = \"nodeDisabled\";\n        \n         // Configure circles\n         series.nodes.template.circle.propertyFields.disabled = 'circleDisabled';\n         series.nodes.template.outerCircle.propertyFields.disabled = 'circleDisabled';\n\n        // Configure icons\n        var icon = series.nodes.template.createChild(am4plugins_bullets.PinBullet);\n        icon.image = new am4core.Image();\n        icon.image.propertyFields.href = \"image\";\n        icon.circle.radius = 25;\n        icon.circle.strokeWidth = 0;        \n        icon.background.pointerLength = 0;\n        icon.background.disabled = true;\n\n        if(window.innerWidth > 600){\n            icon.background.radius = 35;\n            icon.circle.radius = 35;\n        }\n        \n        var outlineCircle = icon.createChild(am4core.Circle);\n        outlineCircle.propertyFields.fill = \"color\";\n        outlineCircle.adapter.add(\"radius\", function (radius, target) {\n            var circleBullet = target.parent;\n            return circleBullet.circle.radius + 2;\n        });\n        outlineCircle.propertyFields.disabled = 'imageDisabled';        \n\n        // Configure All node icon\n        var allNode = series.nodes.template.createChild(am4core.Rectangle3D);\n        allNode.width = 35;\n        allNode.height = 15;\n        allNode.depth = 35;\n        allNode.angle = 45;\n        allNode.strokeOpacity = 1;\n        allNode.strokeWidth = 1.25;\n        allNode.stroke = am4core.color('black');\n        allNode.fillOpacity = 0.85;\n        allNode.fill = am4core.color('rgb(240,240,240)');\n        allNode.propertyFields.disabled = 'isNotAll';          \n\n        series.centerStrength = this.getCenterStrength(numberOfNodes);\n        series.manyBodyStrength = this.getBodyStrength(numberOfNodes);\n        series.links.template.strength = 0.5;\n        series.links.template.strokeWidth = 5;\n\n        var scope = this;\n\n        series.links.template.interactionsEnabled = true;        \n        series.links.template.clickable = true;\n        series.links.template.distance = 8.5;\n        series.links.template.events.on(\"hit\", function (event) {                \n            var link = event.target;  \n            if(!scope.hasEdgeBeenSelected(link.source.label.currentText, link.target.label.currentText))\n                return;\n            link.strokeWidth = 9;        \n            if(scope.selectedLink)\n                scope.selectedLink.strokeWidth = 5;          \n            scope.selectedLink = link;\n            scope.props.selectEdge(link.source.label.currentText, link.target.label.currentText);            \n        });\n\n        \n\n        series.nodes.template.events.on(\"hit\", function (event) {\n            if(scope.props.disabled){\n                return;\n            }\n\n            if(scope.selectedLink)\n                scope.selectedLink.strokeWidth = 5;\n            let prevNode = scope.props.selectedNodes['f'];\n            let currNode = scope.props.selectedNodes['s'];\n            var node = event.target;\n            if(currNode != null){\n                //Something already  was selected. Clear the whole thing\n                scope.props.setNodeVal('s',null);\n                scope.props.setNodeVal('f',null);\n                prevNode = null;\n                currNode = null;\n            }                \n            let isEdgeSelected = false;\n            if(!isNullOrUndefined(prevNode) && !isNullOrUndefined(prevNode.label))\n                isEdgeSelected = scope.hasEdgeBeenSelected(node.label.currentText, prevNode.label.currentText);\n            if(!isNullOrUndefined(prevNode) && !isEdgeSelected && prevNode != node){\n                let linksWith = node.linksWith;\n                if(!isNullOrUndefined(linksWith))\n                    linksWith = linksWith._dictionary;\n                else\n                    linksWith = {};\n\n                // console.log(linksWith); \n                // console.log(scope.prevLinksWith);  \n                \n                let link = scope.getDesiredLink([linksWith,scope.prevLinksWith], node.label.currentText, prevNode.label.currentText);\n                // console.log(link);\n                if(!isNullOrUndefined(link)){\n                    link.strokeWidth = 5;\n                }\n                else{\n                    //Wrong link\n                    scope.connectEdge(node.label.currentText, prevNode.label.currentText);                  \n                }\n                scope.props.setNodeVal('s',node);\n                //prevNode = null;\n                scope.prevLinksWith = null;\n            }\n            else{\n                if(prevNode == node){\n                    //Tell user to pick another node!\n                }\n                                \n                if(isEdgeSelected){\n                    //Tell user that edge has already been made!\n                    scope.props.setGameMessage('alreadySelected');\n                    scope.props.setNodeVal('s',node);\n                }\n                else{\n                    scope.props.setNodeVal('f',node);\n                    scope.props.playNodeSound(node.label.currentText);\n                }\n                \n                if(!isNullOrUndefined(node.linksWith))\n                    scope.prevLinksWith = node.linksWith._dictionary;\n                else\n                    scope.prevLinksWith = {}; \n            }\n        });\n\n        this.chart =  chart;\n    }\n\n\n    componentDidMount() {\n        this.data = this.prepareData(this.props.graph, false);\n        this.edgeList = this.getEdgeList(this.props.graph);\n        this.refData = this.prepareData(this.props.graph, true);\n        if(Object.keys(this.data).length > Const.nodesToBeDisplayed)\n            this.reshuffleGraphNodes(this.data);\n        this.generateAmForceDirectedGraph();\n    }\n\n    componentDidUpdate(){\n        if(JSON.stringify(this.previousChart) != JSON.stringify(this.props.graph)){\n            this.generateAmForceDirectedGraph();\n            this.previousChart = JSON.parse(JSON.stringify(this.props.graph));\n        }\n    }\n\n    connectEdge(node1, node2){       \n        let data = this.chart.series.values[0].data;\n        let index1 =-1, index2 = -1;\n        let canConnect = false;\n\n        for(let i=0; i<data.length; i++){\n            if(data[i].label == node1){\n                index1 = i;\n            }\n            else if(data[i].label == node2){\n                index2 = i;\n            }\n        }\n\n        if(index1!=-1 && index2!=-1){\n            for(let i=0; !isNullOrUndefined(this.refData) && !isNullOrUndefined(this.refData[index1].link) \n            && i<this.refData[index1].link.length; i++){\n                if(this.refData[index1].link[i] == index2){\n                    canConnect = true;                    \n                }\n            }\n\n            for(let i=0; !isNullOrUndefined(this.refData) && !isNullOrUndefined(this.refData[index2].link) \n            && i<this.refData[index2].link.length; i++){\n                if(this.refData[index2].link[i] == index1){\n                    canConnect = true;                    \n                }\n            }\n        }\n\n        let scope = this;\n        if(canConnect){\n            if(!('link' in data[index1])){\n                data[index1].link = [];\n            }\n            data[index1].link.push(index2);\n            if(Object.keys(this.data).length > Const.nodesToBeDisplayed && this.count > Math.floor(Const.reshuffleCriteria*this.totalCnt))\n                this.reshuffleGraphNodes(data);\n            this.data = data;\n\n            this.chart.series.values[0].invalidateData();\n            if(!isNullOrUndefined(node1) && !isNullOrUndefined(node2)){\n                scope.addSelectedEdgeToMap(node1, node2);\n                scope.props.selectEdge(node1, node2);\n                scope.props.setGameMessage('successLink');\n                this.count = this.count+1; \n                ReactGA.event({\n                    category: 'connect_edge',\n                    action: 'Connect ' + String(node1) +  \", \" + String(node2),\n                    label: String(node1) + \", \" + String(node2)\n                  });               \n            }\n        }\n        else{\n            scope.props.setGameMessage('failLink');\n            scope.props.setEntityStats(node1,false);\n            scope.props.setEntityStats(node2,false);\n        }\n    }\n\n    render(){\n        return(\n            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"100%\" }}></div>\n        );\n    }\n}\nexport default GamifiedGraph;","import React, { Component } from 'react';\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport * as am4plugins_forceDirected from \"@amcharts/amcharts4/plugins/forceDirected\"; \nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport * as am4plugins_bullets from \"@amcharts/amcharts4/plugins/bullets\";\nimport { isNullOrUndefined } from 'util';\n\nam4core.useTheme(am4themes_animated);\n\nclass Speedometer extends React.Component {\n\n    constructor(props){\n      super(props);\n      //id, min, max, val, color\n\n      this.chart = null;\n      this.hand = null;\n      this.range0 = null;\n      this.range1 = null;\n\n      this.generateSpeedometer = this.generateSpeedometer.bind(this);\n      this.moveHand = this.moveHand.bind(this);\n    }\n\n    generateSpeedometer(){\n        var chart = am4core.create(this.props.id, am4charts.GaugeChart);\n        chart.hiddenState.properties.opacity = 0; // this makes initial fade in effect\n        chart.radius = am4core.percent(100);\n        chart.innerRadius = am4core.percent(87);\n\n        var axis = chart.xAxes.push(new am4charts.ValueAxis());\n        axis.min = this.props.min;\n        axis.max = this.props.max;\n        axis.strictMinMax = true;\n        axis.renderer.ticks.template.disabled = true;\n        axis.renderer.grid.template.disabled = true;\n        axis.renderer.labels.template.disabled = true;\n\n        var colorSet = new am4core.ColorSet();\n\n        var range0 = axis.axisRanges.create();\n        range0.value = this.props.min;\n        range0.endValue = this.props.val;\n        range0.axisFill.fillOpacity = 1;\n        range0.axisFill.fill = am4core.color('#556efd');\n        if(!isNullOrUndefined(this.props.color)){\n            range0.axisFill.fill = am4core.color(this.props.color);\n        }\n        range0.axisFill.zIndex = - 1;\n\n        var range1 = axis.axisRanges.create();\n        range1.value = this.props.val;\n        range1.endValue = this.props.max;\n        range1.axisFill.fillOpacity = 1;\n        range1.axisFill.fill = am4core.color('#999999');\n        range1.axisFill.zIndex = -1;\n\n        var hand = chart.hands.push(new am4charts.ClockHand());\n        hand.pin.disabled = false;\n        hand.strokeWidth = 0;\n        hand.fill = am4core.color(\"#556efd\");\n        if(!isNullOrUndefined(this.props.color)){\n            hand.fill = am4core.color(this.props.color);\n        }\n        hand.showValue(Math.min(Math.max(this.props.val, this.props.min), this.props.max));\n\n        this.chart = chart;\n        this.hand = hand;\n        this.range0 = range0;\n        this.range1 = range1;\n\n    }\n\n    moveHand(newVal){\n        if(isNullOrUndefined(this.chart) || isNullOrUndefined(this.hand) || \n        isNullOrUndefined(this.range0) || isNullOrUndefined(this.range1))\n            return ;\n        this.chart.setTimeout(randomValue, 500);\n        let scope = this;\n        function randomValue() {\n            scope.hand.showValue(Math.min(Math.max(newVal, scope.props.min), scope.props.max),1000, am4core.ease.cubicOut);\n            scope.range0.endValue = newVal;\n            scope.range1.value = newVal;\n        }\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(this.props.val != nextProps.val){\n            this.moveHand(nextProps.val);\n        }\n    }\n\n    componentDidMount(){\n        this.generateSpeedometer();\n    }\n\n    render(){\n        return(\n            <div id={this.props.id} style={{ width: \"100%\", height: \"100%\" }}></div>\n        );\n    }\n}\nexport default Speedometer;","import React, { Component } from 'react';\nimport StyleFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport { isNullOrUndefined } from 'util';\nimport * as firebase from 'firebase';\nimport './gamifiedStatsAuth.css';\n\nclass GamifiedAuth extends React.Component {\n    constructor(props) {\n      super(props);\n      //stats, type (graphGame), \n\n    }\n\n    uiConfig = {\n        signInFlow: \"popup\",\n        signInOptions: [\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n            firebase.auth.EmailAuthProvider.PROVIDER_ID,\n            firebase.auth.PhoneAuthProvider.PROVIDER_ID\n        ],\n        callbacks:{\n          signInSuccess: () => false,\n          signInSuccessWithAuthResult: function(authResult, redirectUrl) {\n            \n            //...\n            }      \n        }\n    }\n\n    async saveUserStats(userId){\n        //Add it\n         // console.log(userId);\n         // console.log(this.props.stats);\n        let type = this.props.type;\n        let stats = JSON.parse(JSON.stringify(this.props.stats));\n        let timestamp = Date.now();\n        stats['ts'] = timestamp;\n        stats['bpId'] = this.props.bpId;\n        stats['userId'] = userId;\n        stats['bpTitle'] = this.props.title;\n\n        let entityStats = this.props.stats['entityStats'];\n        let newStats = {};\n        for(let entity in entityStats){\n            newStats[entity] = {\n                entity: entity,\n                mistakes: entityStats[entity] \n            }\n        }\n        stats['entityStats'] = newStats;\n        //console.log(stats);\n\n        let softBlockprobe = {\n            bpId: this.props.bpId,\n            ts: timestamp,\n            title: this.props.title\n        };\n\n        let docStr = this.props.bpId + '_' + String(timestamp);\n        if(type == 'timeline'){\n            docStr = docStr + '_ts';\n            stats.bpId = stats.bpId + \"_ts\";\n        }\n        await firebase.firestore().collection('Users').doc(userId)\n        .collection('gameScores').doc(docStr).set(stats);\n        await firebase.firestore().collection('Users').doc(userId)\n        .collection('gameBlockprobes').doc(this.props.bpId).set(softBlockprobe);\n\n        if(!(this.getItemWrapper('isUserSignedIn', false)))\n            await firebase.auth().signOut();\n        this.props.finishSaving(userId);\n    }\n\n    getItemWrapper(key, defaultVal){\n        if(!isNullOrUndefined(localStorage.getItem(key))){\n            return localStorage.getItem(key);\n        }\n        return defaultVal;\n    }\n\n    componentDidMount(){\n        this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(user =>{\n            let uId = null, providerId = null;\n            if(!isNullOrUndefined(firebase.auth().currentUser) && \n            !isNullOrUndefined(firebase.auth().currentUser.providerData) &&\n            firebase.auth().currentUser.providerData.length>0){\n                providerId = firebase.auth().currentUser.providerData[0].providerId;\n            }\n            if(providerId==\"phone\"){\n                uId = firebase.auth().currentUser.phoneNumber;\n            }\n            else if(providerId=='google.com'){\n                uId = firebase.auth().currentUser.email;\n            }\n            else if(providerId=='password'){\n                uId = firebase.auth().currentUser.email;\n            }            \n        // console.log(firebase.auth().currentUser);\n\n            if(!!user && !isNullOrUndefined(firebase.auth().currentUser)){     \n                if(!isNullOrUndefined(uId))           \n                    this.saveUserStats(uId); \n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this.unregisterAuthObserver();\n    }\n\n    render(){\n        return (\n            <div>\n                <div className='StatsAuthTitle'>Sign in to save</div>\n                <div className='StatsAuthLoginContainer'>                                       \n                    <StyleFirebaseAuth\n                    uiConfig={this.uiConfig}\n                    firebaseAuth={firebase.auth()}                            \n                    />\n                </div>\n            </div>\n        );\n    }\n}\nexport default GamifiedAuth;","import React, { Component } from 'react';\nimport ReactGA from 'react-ga';\nimport Speedometer from '../speedoMeter/Speedometer';\nimport { Button } from '@material-ui/core';\nimport GamifiedAuth from './gamifiedStatsAuth';\nimport Paper from '@material-ui/core/Paper';\nimport './gamifiedGraphStats.css';\nimport { isNull, isNullOrUndefined } from 'util';\n\nclass GamifiedGraphStats extends React.Component {\n    constructor(props) {\n      super(props);\n      //stats, canSave, id, type\n      this.state = {\n          saveAuth: false,\n          finishedSaving:  false,\n          uId: null\n      }\n\n      this.renderSingleEntityMistakes = this.renderSingleEntityMistakes.bind(this);\n      this.saveResults = this.saveResults.bind(this);\n      this.finishSaving = this.finishSaving.bind(this);\n\n      ReactGA.initialize('UA-143383035-1');\n    }\n\n    renderSingleEntityMistakes(entity, mistakes){\n        return (\n            <div className=\"statsEntityMistakesContainer\"> \n                <span className=\"statsEntityText\">{entity} : </span><span className=\"statsMistakes\">{String(mistakes)}</span> \n            </div>\n        )\n    }\n\n    saveResults(){\n        ReactGA.event({\n            category: 'saveResult',\n            action: this.props.id + ' ' + this.props.bpId,\n            label: this.props.id + ' ' + this.props.bpId\n          }); \n\n        this.setState({\n            saveAuth: true,\n            finishedSaving: false,\n            uId: null\n        });\n    }\n\n    finishSaving(uId){\n        this.setState({\n            saveAuth: false,\n            finishedSaving: true,\n            uId: uId  \n        });\n    }\n\n    componentDidMount(){\n        if(this.props.stats){\n            ReactGA.event({\n                category: 'finishedGame',\n                action: this.props.id + ' ' + this.props.bpId,\n                label: 'Score:' + String(this.props.stats.score)\n              }); \n        }\n    }\n\n    render(){\n        let entityList = [];\n        for(let entity in this.props.stats.entityStats){\n            entityList.push({\n                entity: entity,\n                mistakes: this.props.stats.entityStats[entity]\n            });\n        }\n        entityList.sort(function(a,b){ return a.mistakes - b.mistakes });\n\n        let renderEntityList = entityList.map((entity) => {\n            return this.renderSingleEntityMistakes(entity.entity, entity.mistakes);\n        })\n\n        let id = 'speedometer_rand';\n        if(!isNullOrUndefined(this.props.id))\n            id = this.props.id;\n\n        let typeOfGame = 'graphGame';\n        let color = '#556efd';\n        if(!isNullOrUndefined(this.props.type) && this.props.type == \"timeline\"){\n            typeOfGame = 'timeline';\n            color = '#46237a';\n        }\n\n        return (\n            <div class=\"statsContainer\">\n                <div className=\"statsTitle\">Game results</div>\n                <div className=\"statsAmchartContainer\">\n                                <Speedometer \n                                    id={id}\n                                    val={this.props.stats.score}\n                                    min={0}\n                                    max={this.props.stats.totalScore}\n                                    color={color}/>\n                            </div>\n\n                <div className=\"statsScoreText\">Score: <span className={\"statsScoreVal \" + (typeOfGame == \"graphGame\"?\"color-graph \":\"\")\n                        + (typeOfGame == \"timeline\"?\"color-timeline \":\"\")}>{this.props.stats.score}</span>\n                <span className=\"statsTotalScoreVal\">/{this.props.stats.totalScore}</span></div>\n\n                {(isNullOrUndefined(this.props.type) || this.props.type=='graph') && entityList.length > 0?\n                    <div className=\"statsMistakesContainer\">\n                        <div className=\"statsMistakesTitle\">Mistakes</div>\n                        <div className=\"statsMistakesContent\">\n                            {renderEntityList}\n                        </div>\n                    </div>\n                    :\n                    null\n                }\n\n                <div className=\"statsMistakesOptions\">\n                    {this.props.canSave && !this.state.finishedSaving?\n                        <Button \n                        variant=\"contained\" \n                        className=\"statsSaveButton\"\n                        onClick={() => { this.saveResults()}}\n                        >Save results</Button>\n                        :\n                        null\n                    }\n                </div>\n                <div>\n                    {this.state.finishedSaving?\n                        <p className=\"statsSavedMessage\">Your results have been saved to the account {this.state.uId}!</p>\n                        :\n                        null\n                    }                    \n                </div>\n                {this.state.saveAuth?\n                    <GamifiedAuth \n                        stats={this.props.stats}\n                        finishSaving={this.finishSaving}\n                        bpId={this.props.bpId}\n                        title={this.props.title}\n                        type={typeOfGame}/>\n                        :\n                    null\n                }\n\n                                \n            </div>\n        );\n    }\n}\nexport default GamifiedGraphStats;","import React, { Component } from 'react';\nimport  MultiSelectReact  from 'multi-select-react';\nimport { Button } from '@material-ui/core';\nimport Graph from \"react-graph-vis\";\nimport Alert from '@material-ui/lab/Alert';\nimport './GraphComponent.css';\nimport { timingSafeEqual } from 'crypto';\nimport { isNullOrUndefined } from 'util';\nimport { thatReturnsThis } from 'fbjs/lib/emptyFunction';\nimport Img from 'react-image';\nimport IsImageUrl from 'is-image-url';\nimport ReactGA from 'react-ga';\nimport AmGraph from './amGraph/amGraph';\nimport GamifiedGraph from './gamifiedAmGraph/gamifiedGraph';\nimport Speedometer from './speedoMeter/Speedometer';\nimport Expand from 'react-expand-animated';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport PlayArrow from '@material-ui/icons/PlayArrow';\nimport Pause from '@material-ui/icons/Pause';\nimport Stop from '@material-ui/icons/Stop';\nimport GamifiedGraphStats from './gamifiedStats/gamifiedGraphStats';\nimport Speech from 'speak-tts';\nimport UIfx from 'uifx';\nimport WellDoneMp3 from  '../media/well_done.mp3';\nimport TryAgainMp3 from '../media/try_again.mp3';\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\nimport * as firebase from 'firebase';\nimport * as Utils from '../common/utilSvc';\nimport * as Locale from '../Localization/localizedStrings';\n\nconst isChrome = !!window.chrome && (!!window.chrome.webstore || !!window.chrome.runtime);\nconst isIE = /*@cc_on!@*/false || !!document.documentMode;\n\nconst wellDone = new UIfx(\n    WellDoneMp3,\n    {\n      volume: 0.65, // number between 0.0 ~ 1.0\n      throttleMs: 100\n    }\n);\nconst tryAgain = new UIfx(\n    TryAgainMp3,\n    {\n      volume: 0.65, // number between 0.0 ~ 1.0\n      throttleMs: 100\n    }\n);\n\nclass GamifiedGraphComponent extends React.Component {\n\n    constructor(props){\n        //props: isPublic, selectNode\n      super(props);\n      this.state={\n        graph: {\n            nodes: [\n              ],\n            edges: [\n              ]\n          },\n        stopGame: false,\n        stats: {\n            score: 0,\n            entityStats: {},\n            totalScore: 0\n        },\n        graphOptions: {\n            layout: {\n                hierarchical: false\n            },\n            edges: {\n                arrows: {\n                    to:     {enabled: false, scaleFactor:1, type:'arrow'},\n                    middle: {enabled: false, scaleFactor:1, type:'arrow'},\n                    from:   {enabled: false, scaleFactor:1, type:'arrow'}\n                  },\n                color: \"#000000\"\n            }        \n        },\n        graphEvents: {\n        },\n        multiSelectEntityList: [\n            {\n                value: true, \n                label: \"All\", \n                id: 0\n            },\n            {\n                value: false, \n                label: \"None\", \n                id: -1\n            }\n        ],\n        currentSelectedBlocks: [\n        ],\n        selectedNodes:[],\n        openSelectedBlocks: false,\n        wasAllOptionSelected: true,\n        wasNoneOptionSelected:false,\n        playStatus: 'end',\n        languageSupportedPlay: true,\n        copiedText: false,\n        score: 0,\n        totalScore: Utils.getTotalEdges(props.investigationGraph),\n        gameMessageFinished: 'Congratulations! You did it!',\n        testVar: -1,\n        gameNodeSelections: {\n            f: null,\n            s: null   \n        },\n        gameMessage: null  //Edge selected or already selected or wrong\n        }\n\n        this.graphHelperMap= {\n            nodes:{\n\n            },\n            edges:{\n\n            }\n          };\n\n        this.entityStatistics = {};\n        this.speech = null;\n        this.prevNode = null;\n\n        this.handleAllAndNoneOptions = this.handleAllAndNoneOptions.bind(this);\n        this.initializeGraphEvents = this.initializeGraphEvents.bind(this);\n        this.generateGraph = this.generateGraph.bind(this);\n        this.onSelectGraph = this.onSelectGraph.bind(this);\n        this.addBlocksForNodeCharacteristic = this.addBlocksForNodeCharacteristic.bind(this);\n        this.addBlocksForEdge = this.addBlocksForEdge.bind(this);\n        this.isValidBlock = this.isValidBlock.bind(this);\n        this.clickBlockFromList = this.clickBlockFromList.bind(this);\n        this.sortBlocks = this.sortBlocks.bind(this);\n        this.removeHashedIndex = this.removeHashedIndex.bind(this);\n        this.AgregateNumberDisplay = this.AgregateNumberDisplay.bind(this);\n\n        this.generateAmGraph = this.generateAmGraph.bind(this);\n        this.selectEdge = this.selectEdge.bind(this);\n        this.selectNode = this.selectNode.bind(this);\n        this.toggleSelectedBlocksPane = this.toggleSelectedBlocksPane.bind(this);\n        this.resetScroll = this.resetScroll.bind(this);\n\n        this.initSpeech = this.initSpeech.bind(this);\n        this.playNodeSound = this.playNodeSound.bind(this);\n        this.playExistingSelection = this.playExistingSelection.bind(this);\n        this.pauseExistingSelection = this.pauseExistingSelection.bind(this);\n        this.resumeExistingSelection = this.resumeExistingSelection.bind(this);\n        this.stopExistingSelection = this.stopExistingSelection.bind(this);\n        this.timeoutFn = this.timeoutFn.bind(this);\n        this.timeInFn = this.timeInFn.bind(this);\n\n        this.setNodeVal = this.setNodeVal.bind(this);\n        this.clearGamifiedEntity = this.clearGamifiedEntity.bind(this);\n        this.BlockEntity = this.BlockEntity.bind(this);\n        this.setGameMessage = this.setGameMessage.bind(this);\n        this.incrementScore = this.incrementScore.bind(this);\n        this.setEntityStats = this.setEntityStats.bind(this);\n        this.stopGame = this.stopGame.bind(this);\n        \n        this.graphRef = React.createRef();\n\n        ReactGA.initialize('UA-143383035-1');  \n    }\n\n    incrementScore(){        \n        this.setState({\n            score: this.state.score + 1\n        });\n    }\n\n    setEntityStats(entityName, isCorrect){\n        if(!isCorrect){\n            if(!(entityName in this.entityStatistics)){\n                this.entityStatistics[entityName] = 0;\n            }\n            this.entityStatistics[entityName] = this.entityStatistics[entityName] + 1;\n        }\n    }\n\n    setGameMessage(type){\n        let message = null;\n        if(type == 'alreadySelected')\n        {\n            if(this.props.playSound)\n                tryAgain.play();\n            message = \"This connection has already been made. Try another one!\";\n        }\n        else if(type == 'successLink'){\n            if(this.props.playSound)\n                wellDone.play();\n            message = \"Yes! You got it right!\";\n            this.incrementScore();\n        }\n        else if(type == 'failLink'){\n            if(this.props.playSound)\n                tryAgain.play();\n            message = \"No! You got it wrong! These topics are not connected\";\n        }\n        this.setState({\n            gameMessage: message\n        });\n    }\n\n    setNodeVal(type,node){\n        //type: f,s\n        let gameNodeSelections = this.state.gameNodeSelections;\n        gameNodeSelections[type] = node;\n        if(node==null && this.state.gameMessage!=null){\n            this.setState({\n                gameMessage: null\n            });\n        }\n\n        this.setState({\n            gameNodeSelections:gameNodeSelections\n        });\n    }\n\n    clearGamifiedEntity(type){\n        //type: f,s\n        let gameNodeSelections = this.state.gameNodeSelections;\n        gameNodeSelections[type] = null;\n\n        if(type=='f'){\n            gameNodeSelections['f'] = gameNodeSelections['s'];\n            gameNodeSelections['s'] = null;\n        }\n\n        this.setState({\n            gameNodeSelections:gameNodeSelections,\n            gameMessage: null\n        });\n    }\n\n    resetScroll(){\n        let amount = null;\n        if(this.graphRef){\n            amount = this.graphRef.current.offsetTop;\n        }\n        if(this.props.setScrollToGraphList)\n            this.props.setScrollToGraphList(amount);\n\n        let blocksDisplay = document.getElementById('graph-selected-block-list');\n        blocksDisplay.scrollTop = 0;    \n    }\n\n    isValidBlock(block){\n        if(isNullOrUndefined(block.title))\n            return false;\n        return true;\n    }\n\n    selectEdge(from, to){\n\n        this.setState({\n            openSelectedBlocks: false\n        });\n\n        var blocksToBeSelected =[];\n        var blocksAdded = {};\n        var edge={\n            to: to,\n            from: from\n        };\n        this.addBlocksForEdge(edge, blocksToBeSelected, blocksAdded);\n        blocksToBeSelected.sort((a, b) => this.sortBlocks(a.title,b.title,a.timestamp,b.timestamp));\n\n        this.setState({\n            currentSelectedBlocks: blocksToBeSelected,\n            openSelectedBlocks: true,\n            selectedNodes: [from, to],\n            copiedText: false\n        });\n\n        this.resetScroll();\n    }\n\n    //edg:from,to,\n    addBlocksForEdge(edge, blocksToBeSelected, blocksAdded){\n        if(isNullOrUndefined(this.props.investigationGraph[edge.from]) || \n            isNullOrUndefined(this.props.investigationGraph[edge.from]))\n            return;\n            \n        var edgeBlockList = this.props.investigationGraph[edge.from].edges[edge.to];\n\n        for(var i=0;i<edgeBlockList.length;i++){\n            const blockKey = edgeBlockList[i];\n            // console.log(blockKey);\n            if(!(blockKey in blocksAdded)){\n\n                // Add block if it is not already in list\n                const newBlock = this.props.blockTree[blockKey];\n\n                if(this.isValidBlock(newBlock))\n                {\n                    blocksToBeSelected.push(newBlock);\n                }\n                blocksAdded[blockKey]=true;\n            }\n        }\n\n    }\n\n    selectNode(node){\n        var blocksToBeSelected =[];\n        var blocksAdded = {};\n\n        this.setState({\n            openSelectedBlocks: false\n        });\n        \n        this.addBlocksForNodeCharacteristic(node, blocksToBeSelected, blocksAdded);\n\n        if(this.props.investigationGraph[node]){\n            var edges =  this.props.investigationGraph[node].edges;\n            var scope = this;\n            Object.keys(edges).forEach(function(edgeKey) {\n                    var edge={\n                        to: node,\n                        from: edgeKey\n                    };\n                    scope.addBlocksForEdge(edge, blocksToBeSelected, blocksAdded);           \n            });\n        }\n\n        if(node == \"ALL\"){\n            let added = {};\n            let invGraph = this.props.investigationGraph;\n            if(!isNullOrUndefined(invGraph)){\n                for(let key in invGraph){\n                    for(let j=0; !isNullOrUndefined(invGraph[key].char) && j<invGraph[key].char.length; j++){\n                        added[invGraph[key].char[j]] = true; \n                    }\n\n                    for(let edgekey in invGraph[key].edges){\n\n                        // console.log(invGraph[key].edges[edgekey]);\n                        for(let j=0;!isNullOrUndefined(invGraph[key].edges[edgekey]) && \n                                        j<invGraph[key].edges[edgekey].length; j++)\n                        {\n\n                            added[invGraph[key].edges[edgekey][j]] = true;\n                        }\n                    }\n                }\n\n                for(let blockKey in added){\n                    if(!isNullOrUndefined(this.props.blockTree) && !isNullOrUndefined(this.props.blockTree[blockKey]))\n                        blocksToBeSelected.push(this.props.blockTree[blockKey]);\n                }\n            }\n        }\n\n        blocksToBeSelected.sort((a, b) => this.sortBlocks(a.title,b.title));\n        \n        this.setState({\n            currentSelectedBlocks: blocksToBeSelected,\n            openSelectedBlocks: true,\n            selectedNodes: [node],\n            copiedText: false\n        });\n\n        this.resetScroll();\n\n        if((isNullOrUndefined(this.props.isPublic) || !this.props.isPublic) && this.props.selectNode && node!='ALL')\n        {\n            this.props.selectNode(node);\n        }\n    }\n\n    addBlocksForNodeCharacteristic(node, blocksToBeSelected, blocksAdded){\n\n        if(!isNullOrUndefined(this.props.investigationGraph[node])){\n            var charBlockList = this.props.investigationGraph[node].char;\n\n            for(var i=0;i<charBlockList.length;i++){\n                const blockKey = charBlockList[i];\n\n                if(!(blockKey in blocksAdded)){\n\n                    // Add block if it is not already in list\n                    const newBlock = this.props.blockTree[blockKey];\n\n                    if(this.isValidBlock(newBlock))\n                    {\n                        blocksToBeSelected.push(newBlock);\n                    }\n                    blocksAdded[blockKey]=true;\n                }\n            }\n        }\n    }\n\n    sortBlocks(a, b, a_ts = 0, b_ts = 0){\n        a = a.trim();        \n        b = b.trim();\n\n        var aIndex = 0, bIndex = 0, isAExist = false, isBExist = false;\n        if(a.length>0 && a.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<a.length; i++){\n                \n                if((!isNaN(parseInt(a.charAt(i), 10))) || a[i]==='.'){\n                    num += a.charAt(i);\n                }\n                else{\n                    if(num.length > 0){\n                        aIndex = parseFloat(num);\n                        isAExist = true;\n                    }\n                }\n            }\n            if(num.length > 0){\n                aIndex = parseFloat(num);\n                isAExist = true;\n            }    \n        }\n\n        if(b.length>0 && b.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<b.length; i++){\n                \n                if((!isNaN(parseInt(b.charAt(i), 10))) || b[i]==='.'){\n                    num += b.charAt(i);\n                }\n                else{\n                    if(num.length > 0){\n                        bIndex = parseFloat(num);\n                        isBExist = true;\n                    }\n                }\n            }    \n            if(num.length > 0){\n                bIndex = parseFloat(num);\n                isBExist = true;\n            }\n        \n        }\n\n        // A comes after b\n        if(!isAExist && isBExist)\n            return 1;\n\n        // A comes before b\n        if(isAExist && !isBExist)\n            return -1;\n\n        // A comes before b\n        if(isAExist && isBExist){\n            if(aIndex > bIndex)\n                return 1;\n            return -1;\n        }\n\n        if(a_ts > b_ts)\n            return 1;\n        else if(b_ts > a_ts)\n            return -1;\n\n        if(a > b)\n            return 1;\n\n        return -1;\n    }\n\n    onSelectGraph(event){\n\n        this.setState({\n            openSelectedBlocks: false\n        });\n\n        var { nodes, edges } = event;\n        \n      /*  \n        console.log(\"Selected nodes:\");\n        console.log(nodes);        \n        console.log(\"Selected edges:\");\n        console.log(edges);\n     */\n       \n        var blocksToBeSelected = [];\n        var blocksAdded = {};\n\n        if(!isNullOrUndefined(edges)){\n            for(var i=0;i<edges.length;i++){\n                var edgeKey = edges[i];\n                var edge = this.graphHelperMap.edges[edgeKey];\n                this.addBlocksForEdge(edge, blocksToBeSelected, blocksAdded);\n            }\n        }\n\n        if(!isNullOrUndefined(nodes)){\n            for(var i=0;i<nodes.length;i++){\n                var nodeKey = nodes[i];\n                var node = this.graphHelperMap.nodes[nodeKey];\n                this.addBlocksForNodeCharacteristic(node, blocksToBeSelected, blocksAdded);\n            }\n        }\n        //console.log(blocksToBeSelected);\n\n        blocksToBeSelected.sort((a, b) => this.sortBlocks(a.title,b.title,a.timestamp,b.timestamp));\n\n        this.setState({\n            currentSelectedBlocks: blocksToBeSelected,\n            openSelectedBlocks: true\n        });\n    }\n\n    initializeGraphEvents(){\n        const context = this;\n        var events = {\n            \n            select: function(event) {\n                context.onSelectGraph(event);\n            }\n    \n        }\n\n        this.setState({\n            graphEvents: events\n        })\n    }\n\n    generateAmGraph(){\n        var isAllSelected = this.props.multiSelectEntityList[0].value;\n        var newGraph = [];\n        var nodesMap = {};\n\n        if(!this.props.multiSelectEntityList[1].value)\n        {\n            //If None is not selected only display graph\n            var selectedEntityLabels = {};\n\n            var count=0;\n            for(var i=2; i<this.props.multiSelectEntityList.length;i++){\n                var currEntity = this.props.multiSelectEntityList[i];\n                if(currEntity.value || isAllSelected){\n                    //selected Node\n                    selectedEntityLabels[currEntity.label]=count;\n                    \n                    var image = null;\n                    if(this.props.imageMapping){\n                        //Add image\n                        if(currEntity.label in this.props.imageMapping){\n                            image = this.props.imageMapping[currEntity.label];\n                        }\n                    }\n\n                    if(this.props.investigationGraph[currEntity.label]){\n                        //Add Node\n                        newGraph.push({\n                            id:count,\n                            label:currEntity.label,\n                            link: [],\n                            image: image\n                        });\n                        nodesMap[count] = currEntity.label;\n\n\n                        //Add edge\n                        var currEntityKey = currEntity.label;\n\n                        if(!isNullOrUndefined(this.props.investigationGraph)\n                        && !isNullOrUndefined(this.props.investigationGraph[currEntityKey])){\n                            var edgeMap = this.props.investigationGraph[currEntityKey].edges;\n                            Object.keys(edgeMap).forEach(function(edgeKey) {\n                                if(edgeKey in selectedEntityLabels){\n                                    //edge is a selection, add it\n                                    //console.log(nodesMap[selectedEntityLabels[edgeKey]]);\n                                    newGraph[selectedEntityLabels[edgeKey]].link.push(count);\n                                }\n                            });\n                        }\n                        count++;\n                    }                    \n                }\n            }\n            let islands = Utils.getGraphIslandsAndValues(this.props.investigationGraph);\n            if(Object.keys(islands).length>0 && this.props.multiSelectEntityList[0].value){\n                newGraph.push({\n                    id:count,\n                    label:'ALL',\n                    link: [],\n                    image: null\n                });\n\n                let revMap = {};\n                for(let i=0; i<newGraph.length; i++){\n                    revMap[newGraph[i].label] = newGraph[i].id;\n                }\n\n                for(let key in islands){\n                    let newId = revMap[islands[key].node];\n                    if(!isNullOrUndefined(newId)){\n                        newGraph[count].link.push(newId);\n                    } \n                }\n                count++;\n            }\n            //console.log(newGraph);\n        }\n\n        var newGraphHelper = {\n            nodes: nodesMap,\n            edges: {}\n        }\n\n        return(\n            <div className=\"graph-main\">\n                <GamifiedGraph \n                        graph={newGraph}  \n                        selectEdge = {this.selectEdge}    \n                        selectNode = {this.selectNode}\n                        selectedNodes = {this.state.gameNodeSelections}\n                        setNodeVal = {this.setNodeVal}  \n                        setGameMessage = {this.setGameMessage}  \n                        setEntityStats = {this.setEntityStats}\n                        playNodeSound = {this.playNodeSound}\n                        disabled = {this.state.stopGame}            \n                        />\n            </div>\n        );\n\n    }\n\n    generateGraph(){\n        var isAllSelected = this.props.multiSelectEntityList[0].value;\n        var newGraph = {\n            nodes: [],\n            edges: []\n        };\n        var nodesMap = {};\n\n        if(!this.props.multiSelectEntityList[1].value)\n        {\n            //If None is not selected only display graph\n            var selectedEntityLabels = {};\n\n            var count=0;\n            for(var i=2; i<this.props.multiSelectEntityList.length;i++){\n                var currEntity = this.props.multiSelectEntityList[i];\n                if(currEntity.value || isAllSelected){\n                    //selected Node\n                    selectedEntityLabels[currEntity.label]=count;\n                    \n                    //Add Node\n                    newGraph.nodes.push({\n                        id:count,\n                        label:currEntity.label\n                    });\n                    nodesMap[count] = currEntity.label;\n\n                    //Add edge\n                    var currEntityKey = currEntity.label;\n\n                    if(!isNullOrUndefined(this.props.investigationGraph)\n                    && !isNullOrUndefined(this.props.investigationGraph[currEntityKey])){\n                        var edgeMap = this.props.investigationGraph[currEntityKey].edges;\n                        Object.keys(edgeMap).forEach(function(edgeKey) {\n                            if(edgeKey in selectedEntityLabels){\n                                //edge is a selection, add it\n                                newGraph.edges.push({\n                                    from: selectedEntityLabels[edgeKey],\n                                    to: count,\n                                    id: selectedEntityLabels[edgeKey]+'-'+count\n                                });\n                            }\n                        });\n                    }\n                    count++;\n                }\n            }\n        }\n\n        var newGraphHelper = {\n            nodes: nodesMap,\n            edges: {}\n        }\n\n        for(var i=0;i<newGraph.edges.length;i++){\n            var edge = newGraph.edges[i];\n            var to_id = nodesMap[edge.to];\n            var from_id = nodesMap[edge.from];\n            newGraphHelper.edges[edge.id] = {from:from_id, to:to_id};\n        }\n\n        this.graphHelperMap= newGraphHelper \n        //console.log(this.state.graphHelperMap);\n\n        const context = this;\n        var graphEvents = {\n            \n            select: function(event) {\n                context.onSelectGraph(event);\n            }\n    \n        }\n\n        return(\n            <div className=\"graph-main\">\n                <Graph \n                        graph={newGraph} \n                        options={this.state.graphOptions} \n                        events={graphEvents} \n                        />\n            </div>\n        );\n    }\n\n    removeHashedIndex(a){\n        a = a.trim();\n        var startI = 0;\n        if(a.length>0 && a[0]=='#'){\n            for(var i=1; i<a.length; i++){\n                startI = i;\n                if(a.charAt(i)==' '){\n                    return a.substring(startI).trim();\n                }\n            } \n            return '';   \n        }\n        return a;\n    }\n\n    BlockEntity(entity){\n        return(\n        <span className=\"graph-block-entity\">\n            {entity.title}\n        </span>\n        );   \n    }\n\n    BlockEvidence(evidence, index){\n        const WebView = require('react-electron-web-view');\n        let evidenceList = [evidence.evidenceLink];\n        let isImageUrl = IsImageUrl(evidence.evidenceLink);\n        if(isImageUrl){\n            return (\n                <div className='graph-block-evidence'>\n                        <Img src={evidenceList} className=\"graph-block-evidence-image\"></Img>\n                </div>\n            );\n        }\n        return(\n                    null\n        );\n    } \n\n    AgregateNumberDisplay(numbers, selectedNodesString){\n\n        let renderNumbers = '';\n        if(!isNullOrUndefined(numbers) && numbers.length>0){\n            renderNumbers = numbers.map((number) => \n             <span><span className=\"graph-content-number-key\">Total {number.key}: </span> \n                <b className=\"graph-content-number-value\">{number.value}</b> <br/></span>\n            );   \n        }\n\n        if(!isNullOrUndefined(selectedNodesString))\n            selectedNodesString = selectedNodesString.replace(':', '');\n        if(renderNumbers != ''){\n            return (\n                <div className=\"graph-block-para-div\">\n                    <h4 className=\"graph-block-title\">Statistics for {selectedNodesString}</h4>\n                    <div className=\"graph-content-container\">\n                        <p className=\"graph-block-text\">\n                            {renderNumbers}\n                        </p> \n                    </div>\n                    \n                </div>\n            );    \n        }\n\n        return null;\n    }\n\n    SingleBlock(singleBlock){\n        \n        /*\n         Create render template for the entities\n         */\n        var renderBlockEntities = '';\n        if(singleBlock.entities!=null && singleBlock.entities.length>0){            \n            renderBlockEntities = singleBlock.entities.map((blockEntity) => \n               this.BlockEntity(blockEntity)\n           );            \n       }\n\n       var renderBlockEvidences=\"\";\n       if(singleBlock.evidences!=null && singleBlock.evidences.length>0){            \n        renderBlockEvidences = singleBlock.evidences.map((blockEvidence, index) => \n           this.BlockEvidence(blockEvidence, index)\n       );            \n       }\n\n       let renderNumbers = null;\n       if(!isNullOrUndefined(singleBlock.numbers) && singleBlock.numbers.length>0){\n           let numbers = singleBlock.numbers;\n            renderNumbers = numbers.map((number) => \n            <span><span className=\"graph-content-number-key\">{number.key}: </span> \n            <b className=\"graph-content-number-value\">{number.value}</b> <br/></span>\n        ); \n       }\n\n        return(\n            <div className=\"graph-block-para-div\"\n            onClick={() => { this.clickBlockFromList(singleBlock)}}>\n                <h4 className=\"graph-block-title\">{this.removeHashedIndex(singleBlock.title)}</h4>\n                <div className=\"graph-content-container\">\n                    <p className=\"graph-block-text\">\n                        {singleBlock.summary}\n                    </p>\n                    <p className=\"graph-block-text\">\n                        {renderNumbers}\n                    </p> \n                    <div class=\"graph-block-evidence-container\">\n                        {renderBlockEvidences}                       \n                    </div>\n                </div> \n            </div>\n            );\n\n     /*   return(\n        <div className=\"graph-block-div\"\n        onClick={() => { this.clickBlockFromList(singleBlock)}}>\n            <h4 className=\"graph-block-title\">{this.removeHashedIndex(singleBlock.title)}</h4>\n            <p className=\"graph-block-text\">\n                {singleBlock.summary}\n            </p>                        \n        </div>\n        );\n        */\n    }\n\n    handleAllAndNoneOptions(){\n        var prevAllOption = this.state.wasAllOptionSelected;\n        var prevNoneOption = this.state.wasNoneOptionSelected;\n        var showAll = false;\n        var showNone = false;\n        var someOptionIsEnabled = false;\n        var tempList = this.props.multiSelectEntityList;\n\n        for(var i=0; i<tempList.length; i++){\n            if(tempList[i].value==true){\n                if(tempList[i].id == 0){\n                    // All\n                    showAll = true;\n                }\n                else if(tempList[i].id == -1){\n                    //None\n                    showNone = true;\n                }\n                else{\n                    //Other element\n                    someOptionIsEnabled = true;\n\n                    if((showAll && prevAllOption) || (showNone && prevNoneOption)){\n                        //All/None option selected before, so no need now\n                        showAll = false;\n                        showNone = false;\n                        break;\n                    }\n                    else if(showNone || showAll){\n                        //All/None option not selected before but selected now, \n                        // remove all other values\n                        tempList[i].value=false;                        \n                    }\n                }\n            }\n        }\n\n        if(showAll && !prevAllOption){\n            showNone = false;\n        }\n        if(showNone && !prevNoneOption){\n            showAll = false;\n        }\n        if(!showAll && !showNone && !someOptionIsEnabled){\n            \n            //No option is clicked\n            showNone = true;\n        }\n\n        tempList[0].value = showAll;\n        tempList[1].value = showNone;\n        this.setState({\n            multiSelectEntityList: tempList,\n            wasAllOptionSelected: showAll,\n            wasNoneOptionSelected: showNone\n        });\n    }\n\n    entityClicked(entityList) {\n        this.setState({ multiSelectEntityList: entityList });\n        this.handleAllAndNoneOptions();\n    }\n    \n    selectedBadgeClicked(entityList) {\n        this.setState({ multiSelectEntityList: entityList });\n        this.handleAllAndNoneOptions();\n    }\n\n    clickBlockFromList(block){\n        //this.props.selectBlock(block);\n    }\n\n    async initSpeech(){\n        try{\n            this.speech = new Speech();\n            if(this.speech.hasBrowserSupport()) { // returns a boolean\n                // console.log(\"speech synthesis supported\")\n            }\n            let data = await this.speech.init();            \n            let voices =  data.voices;\n            let selectedVoice = -1;\n            // firebase.database().ref('Testing/lang/').set(this.props.lang);\n            for(let i=0; !isNullOrUndefined(voices) && i<voices.length; i++){\n                // firebase.database().ref('Testing/dataVal/'+String(i)).set(voices[i].name);\n                let name = voices[i].name;\n                if(Utils.languageCheck(this.props.lang, voices[i])) \n                {\n                    selectedVoice = i;\n                    break;\n                }\n            }\n            if(selectedVoice != -1){\n                //firebase.database().ref('Testing/selectedDataVal').set(voices[selectedVoice].name);\n                await this.speech.setVoice(voices[selectedVoice].name);\n                this.setState({\n                    languageSupportedPlay: true\n                });\n            }\n            else{\n                this.setState({\n                    languageSupportedPlay: false\n                });\n            }\n        }\n        catch{}\n    }\n\n    async timeoutFn(){  \n        if(this.state.playStatus == 'start' && !isNullOrUndefined(this.speech) && isChrome){\n            await this.speech.pause();\n            await this.speech.resume();     \n        }     \n    }\n\n    timeInFn(){\n        const scope = this;\n        this.timeout = setInterval(() => {            \n            this.timeoutFn();                \n          }, 8500);\n    }\n\n    async componentDidMount(){\n        this.initializeGraphEvents();\n        await this.initSpeech();\n\n        if(isChrome)\n            this.timeInFn();\n    }\n\n    toggleSelectedBlocksPane(){        \n        this.setState({\n            openSelectedBlocks: !this.state.openSelectedBlocks\n        });        \n    }\n\n    async pauseExistingSelection(){\n        if(!isNullOrUndefined(this.speech) && this.speech.speaking())\n        {\n            await this.speech.pause();\n            this.setState({\n                playStatus: 'paused'\n            });\n        }            \n    }\n\n    async resumeExistingSelection(){\n        if(!isNullOrUndefined(this.speech)){\n            await this.speech.resume();\n            this.setState({\n                playStatus: 'start'\n            });\n        }        \n    }\n\n    async stopExistingSelection(){\n        if(!isNullOrUndefined(this.speech)){\n            await this.speech.cancel();\n            this.setState({\n                playStatus: 'end'\n            });    \n        }\n    }\n    \n    async playNodeSound(node){\n        if(!isNullOrUndefined(this.speech) && this.props.playSound){\n            if(this.speech.speaking())\n                await this.speech.cancel();\n          \n            let selectedNodesString = node;\n            for(let i=0; !isNullOrUndefined(this.state.selectedNodes) && i<this.state.selectedNodes.length; i++){\n                selectedNodesString += this.state.selectedNodes[i] + ', ';\n            }\n            if(selectedNodesString.length > 0)\n                selectedNodesString = selectedNodesString.substring(0,selectedNodesString.length - 2);\n\n            let toPlayText = node;\n            this.setState({\n                playStatus: 'start'\n            });\n            this.speech.speak({\n                text: toPlayText,\n                queue: false// ,  // current speech will be interrupted,\n                /* listeners: {\n                    onstart: () => {\n                        console.log(\"Start utterance\")\n                    },\n                    onend: () => {\n                        console.log(\"End utterance\")\n                    },\n                    onresume: () => {\n                        console.log(\"Resume utterance\")\n                    },\n                    onboundary: (event) => {\n                        console.log(event.name + ' boundary reached after ' + event.elapsedTime + ' milliseconds.')\n                    }\n                }*/\n            }).then(() => {\n                this.setState({\n                    playStatus: 'end'\n                });\n                //console.log('here');\n            }).catch(e => {\n                console.error(\"An error occurred :\", e)\n            });\n            \n        }\n    }\n\n\n    async playExistingSelection(){\n        if(!isNullOrUndefined(this.speech)){\n            if(this.speech.speaking())\n                await this.speech.cancel();\n          \n            let selectedNodesString = ': ';\n            for(let i=0; !isNullOrUndefined(this.state.selectedNodes) && i<this.state.selectedNodes.length; i++){\n                selectedNodesString += this.state.selectedNodes[i] + ', ';\n            }\n            if(selectedNodesString.length > 0)\n                selectedNodesString = selectedNodesString.substring(0,selectedNodesString.length - 2);\n\n            let toPlayText = '';\n            let numbers = Utils.coalesceBlockNumbers(this.state.currentSelectedBlocks);\n            if(!isNullOrUndefined(numbers) && numbers.length>0){\n                toPlayText += 'Statistics for ' + selectedNodesString + '. ';\n            }\n            for(let i=0; !isNullOrUndefined(numbers) && i<numbers.length;i++){\n                toPlayText += ('Total ' + numbers[i].key + \": \" + String(numbers[i].value)+ \". \");\n            }\n\n            this.state.currentSelectedBlocks.map((selectedBlock) => \n                {\n                    let title = this.removeHashedIndex(selectedBlock.title);\n                    let summary = selectedBlock.summary;\n                    if(!isNullOrUndefined(title) && title.length>0)\n                        toPlayText += (Utils.correctTextForSpeech(title) + '. ');\n                    toPlayText += Utils.correctTextForSpeech(summary);\n                    toPlayText  += '. ';\n                    for(let i=0; !isNullOrUndefined(selectedBlock.numbers) && i<selectedBlock.numbers.length;i++){\n                        toPlayText += (selectedBlock.numbers[i].key + \": \" + \n                            String(selectedBlock.numbers[i].value)+ \". \");\n                    }\n                }\n            );\n            this.setState({\n                playStatus: 'start'\n            });\n            this.speech.speak({\n                text: toPlayText,\n                queue: false// ,  // current speech will be interrupted,\n                /* listeners: {\n                    onstart: () => {\n                        console.log(\"Start utterance\")\n                    },\n                    onend: () => {\n                        console.log(\"End utterance\")\n                    },\n                    onresume: () => {\n                        console.log(\"Resume utterance\")\n                    },\n                    onboundary: (event) => {\n                        console.log(event.name + ' boundary reached after ' + event.elapsedTime + ' milliseconds.')\n                    }\n                }*/\n            }).then(() => {\n                this.setState({\n                    playStatus: 'end'\n                });\n                //console.log('here');\n            }).catch(e => {\n                console.error(\"An error occurred :\", e)\n            });\n            \n        }\n    }\n\n    async componentWillUnmount(){\n        if(!isNullOrUndefined(this.speech)){\n            await this.speech.cancel();\n        }\n    }\n\n    async componentWillReceiveProps(nextProps){\n        if(this.props.lang != nextProps.lang && !isNullOrUndefined(this.speech)){\n            let data = await this.speech.init();            \n            let voices =  data.voices;\n            let selectedVoice = -1;\n            for(let i=0; !isNullOrUndefined(voices) && i<voices.length; i++){\n                // firebase.database().ref('Testing/dataVal/'+String(i)).set(voices[i].name);\n                let name = voices[i].name;\n                if(Utils.languageCheck(this.props.lang, voices[i])) \n                {\n                    selectedVoice = i;\n                    break;\n                }\n            }\n            if(selectedVoice != -1){\n                //firebase.database().ref('Testing/dataVal').set(voices[selectedVoice].name);\n                await this.speech.setVoice(voices[selectedVoice].name);\n                this.setState({\n                    languageSupportedPlay: true\n                });\n            }\n            else{\n                this.setState({\n                    languageSupportedPlay: false\n                });\n            }\n        }\n        if((isNullOrUndefined(this.props.investigationGraph)) || \n        (JSON.parse(JSON.stringify(this.props.investigationGraph)) != JSON.parse(JSON.stringify(nextProps.investigationGraph)))){\n            let score = Utils.getTotalEdges(nextProps.investigationGraph);\n            this.setState({\n                totalScore: score\n            });\n        }\n    }\n\n    stopGame(val){\n        if(val){\n            let stats = this.state.stats;\n            stats.score = this.state.score;\n            stats.totalScore = this.state.totalScore;\n            stats.entityStats = this.entityStatistics;\n            this.setState({\n                stats: stats\n            });\n            //console.log(stats);\n        }\n        this.setState({\n            stopGame: val\n        });\n    }\n\n    BlockEntity(entity, type){\n        return(\n        <span className=\"gamified-block-entity\">\n            {entity}\n            <a style={{marginLeft:'5px', color: 'black', cursor: 'pointer'}} \n            onClick={() => { this.clearGamifiedEntity(type)}}>X</a>\n        </span>\n        );   \n    }\n\n    render(){\n\n        let lang = this.props.lang;\n        if(isNullOrUndefined(lang))\n            lang ='en';\n\n        const selectedOptionsStyles = {\n            color: \"white\",\n            backgroundColor: \"rgb(117, 106, 214)\",\n            borderRadius:\"20px\",\n            fontSize:'0.6em',\n            padding:'10px',\n            maxWidth: '92%',\n            wordWrap: 'break-word'\n        };\n        const optionsListStyles = {\n            backgroundColor: \"darkcyan\",\n            color: \"white\",\n\n        };\n        const transitions = [\"height\", \"opacity\", \"background\"];\n\n        var renderBlocks = this.state.currentSelectedBlocks.map((selectedBlock) => \n               this.SingleBlock(selectedBlock)\n           );  \n           \n        let blocksString = Utils.getBlocksText(this.state.currentSelectedBlocks);\n        \n        let selectedNodesString = ': ';\n        for(let i=0; i<this.state.selectedNodes.length; i++){\n            selectedNodesString += this.state.selectedNodes[i] + ', ';\n        }\n        if(selectedNodesString.length > 0)\n            selectedNodesString = selectedNodesString.substring(0,selectedNodesString.length - 2);\n        \n        let numbers = Utils.coalesceBlockNumbers(this.state.currentSelectedBlocks);\n        let aggrNums = this.AgregateNumberDisplay(numbers,selectedNodesString);\n\n        let firstNode = this.state.gameNodeSelections['f'];\n        if(!isNullOrUndefined(firstNode) && !isNullOrUndefined(firstNode.label)){\n            firstNode = firstNode.label.currentText;\n        }\n        //console.log(firstNode);\n\n        let secondNode = this.state.gameNodeSelections['s'];\n        if(!isNullOrUndefined(secondNode) && !isNullOrUndefined(secondNode.label)){\n            secondNode = secondNode.label.currentText;\n        }\n        //console.log(secondNode);\n        //console.log(numbers);\n\n        /*\n            {this.state.playStatus == 'paused' && !isChrome?\n                <a onClick={this.resumeExistingSelection} className=\"soundIcon\">\n                    <PlayArrow />\n                </a>\n                :\n                null\n            }\n\n            {this.state.playStatus == 'start' && !isChrome? \n                <a onClick={this.pauseExistingSelection} className=\"soundIcon\">\n                    <Pause />\n                </a>\n                :\n                null\n            } \n        */\n\n        \n       \n        return (\n            <div>                      \n                        <div ref={this.graphRef}></div>\n\n                        <div className=\"specialViewMargin\">\n                            <div className=\"gameButtonContainer\">\n                                {this.state.score>0 && !this.state.stopGame?\n                                    <Button\n                                    variant=\"contained\" \n                                    className=\"stopGamebutton\"\n                                    onClick={() => { this.stopGame(true)}}\n                                    > Stop Game</Button>\n                                    :\n                                    null\n                                }                                \n                            </div>\n                        </div>\n                        {!isNullOrUndefined(firstNode) && !this.state.stopGame?\n                            <div className=\"specialViewMargin\">                             \n                                <div className=\"gamifiedNodeDisplay\">\n                                    <div className=\"gamifiedNodeSelectionsTitle\">Selections: </div>\n                                    <div>{this.BlockEntity(firstNode,'f')}</div>\n                                    {!isNullOrUndefined(secondNode)?\n                                        <div>{this.BlockEntity(secondNode,'s')}</div>\n                                        :\n                                        null\n                                    }                                    \n                                </div>     \n                            </div>\n                            :\n                            null                        \n                        }\n                        {!this.state.stopGame?\n                            <div className=\"specialViewMargin\">                            \n                                <div className=\"scoreAmchartContainer\">\n                                    <Speedometer \n                                        id=\"speedometer_mindmap_ingame\"\n                                        val={this.state.score}\n                                        min={0}\n                                        max={this.state.totalScore}/>\n                                </div>\n\n                                <div className=\"scoreText\">Score: <span className=\"scoreVal\">{this.state.score}</span>\n                                <span className=\"totalScoreVal\">/{this.state.totalScore}</span></div>\n                                {this.state.score == this.state.totalScore?\n                                    <Alert severity=\"success\" className=\"gameMessage\">{this.state.gameMessageFinished}</Alert>\n                                    :\n                                    <div>\n                                        {this.state.gameMessage == \"No! You got it wrong! These topics are not connected\"?\n                                            <Alert severity=\"error\" className=\"gameMessage\">{this.state.gameMessage}</Alert>\n                                            :\n                                            null\n                                        }\n                                        {this.state.gameMessage == \"Yes! You got it right!\"?\n                                            <Alert severity=\"success\" className=\"gameMessage\">{this.state.gameMessage}</Alert>\n                                            :\n                                            null\n                                        }\n                                        {this.state.gameMessage == \"This connection has already been made. Try another one!\"?\n                                            <Alert severity=\"info\" className=\"gameMessage\">{this.state.gameMessage}</Alert>\n                                            :\n                                            null\n                                        }\n                                    </div>\n                                }\n                                \n                            </div>\n                            :\n                            <div>\n                                <GamifiedGraphStats\n                                    stats = {this.state.stats}\n                                    bpId={this.props.bpId}\n                                    title={this.props.title}\n                                    canSave = {true}\n                                    id={'mindmap_result'}\n                                    />\n                            </div>\n                        }\n\n                        {this.state.currentSelectedBlocks.length >= 0 && !this.state.stopGame?\n                        <div> \n                            <div className=\"graph-block-list\">                            \n                                <div className='gamified-graph-block-list-title' onClick={this.toggleSelectedBlocksPane}>                                \n                                    {selectedNodesString.length>0?\n                                        <span>{Locale.selections[lang]}</span>\n                                        :\n                                        <span>{Locale.selectTwoEntities[lang]}</span>\n                                    }                                                                \n                                    <span>{selectedNodesString}</span>                                \n                                    <span>\n                                        {this.state.openSelectedBlocks?\n                                            <ExpandLess className={selectedNodesString.length>0?\"graph-block-list-title-icon\":\"displayNone\"}/>\n                                            :\n                                            <ExpandMore className={selectedNodesString.length>0?\"graph-block-list-title-icon\":\"displayNone\"}/>\n                                        }\n                                    </span>\n                                </div> \n                                <Expand \n                                    open={this.state.openSelectedBlocks}\n                                    duration={400}\n                                    transitions={transitions}>\n                                    <div className='graph-block-list-container' id=\"graph-selected-block-list\">\n                                        {aggrNums}\n                                        {renderBlocks}\n                                    </div>\n                                </Expand>\n                            </div>\n                            {this.generateAmGraph()/*this.generateGraph()*/}\n                        </div>                      \n                        :\n                        null}                                                                                                  \n            </div>\n        );\n    }\n\n}  \nexport default GamifiedGraphComponent;","import React, { Component } from 'react';\nimport Slide from '@material-ui/core/Slide';\nimport Grid from '@material-ui/core/Grid';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport * as Utils from '../../common/utilSvc';\nimport { Button } from '@material-ui/core';\nimport Alert from '@material-ui/lab/Alert';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport KeyboardArrowUp from \"@material-ui/icons/KeyboardArrowUp\";\nimport KeyboardArrowDown from \"@material-ui/icons/KeyboardArrowDown\";\nimport Speedometer from '../speedoMeter/Speedometer';\nimport Typography from '@material-ui/core/Typography';\nimport UIfx from 'uifx';\nimport WellDoneMp3 from  '../../media/well_done.mp3';\nimport TryAgainMp3 from '../../media/try_again.mp3';\nimport './GamifiedTimeline.css';\nimport Paper from '@material-ui/core/Paper';\nimport GamifiedGraphStats from '../gamifiedStats/gamifiedGraphStats';\nimport { isNullOrUndefined } from 'util';\nimport { time } from '@amcharts/amcharts4/core';\n\nconst wellDone = new UIfx(\n    WellDoneMp3,\n    {\n      volume: 0.65, // number between 0.0 ~ 1.0\n      throttleMs: 100\n    }\n);\nconst tryAgain = new UIfx(\n    TryAgainMp3,\n    {\n      volume: 0.65, // number between 0.0 ~ 1.0\n      throttleMs: 100\n    }\n);\n\nclass GamifiedTimelineComponent extends React.Component {\n\n    constructor(props){\n      super(props);\n      //timeline  should always  be there\n\n      this.state = {\n        currentTimelineIndex: 0,\n        message: null,\n        gameMessageFinished: 'Congratulations! You did it!',\n        score: 0,\n        totalScore: 0,\n        finishedBlocks: {},\n        stopGame: false,\n        slideCard: true,\n        stats: {\n            score: 0,\n            entityStats: {},\n            totalScore: 0\n        }\n      }\n\n      if(props.timeline){\n          this.state.currentTimelineIndex = Math.floor(Math.random()*(props.timeline.length-1));\n          this.state.totalScore = this.props.timeline.length;\n      }\n\n      this.incrementTimelineIndex = this.incrementTimelineIndex.bind(this);\n      this.clickChevron = this.clickChevron.bind(this);\n      this.removeHashedIndex = this.removeHashedIndex.bind(this);\n      this.selectTime = this.selectTime.bind(this);\n      this.incrementScore = this.incrementScore.bind(this);\n      this.stopGame = this.stopGame.bind(this);\n    }\n\n    clickChevron(increment){\n        this.incrementTimelineIndex();\n    }\n\n    seperateTimeline(timeline){\n        let times = [];\n        for(let i=0; i<timeline.length; i++){\n            let newTime = {\n                date: timeline[i].blockDate,\n                time: timeline[i].blockTime,\n                timeStr: Utils.getDateTimeString(timeline[i])\n            };\n            if(times.length==0 || (times[times.length-1].timeStr != newTime.timeStr)){\n                times.push(newTime);\n            }\n        }\n        return times;\n    }\n\n    incrementScore(timelineBlockIndex){\n        let finishedBlocks = this.state.finishedBlocks;\n        finishedBlocks[timelineBlockIndex] = true;\n        let stopGame = this.state.stopGame;\n        if(this.state.score + 1 >= this.state.totalScore)\n            stopGame = true;\n        else{\n            this.setSlideAnimation(false);\n        }\n        this.setState({\n            score: this.state.score + 1,\n            finishedBlocks: finishedBlocks        \n        });        \n    }\n\n    selectTime(time, index){\n        let currBlock = this.props.timeline[this.state.currentTimelineIndex];\n        if((JSON.stringify(currBlock.blockDate) != JSON.stringify(time.date)) || \n        (JSON.stringify(currBlock.blockTime) != JSON.stringify(time.time))){\n            // Is false\n            this.setState({\n                message: 'Please try again!'\n            });\n            if(this.props.playSound)\n                tryAgain.play();\n        }\n        else{\n            this.setState({\n                message: 'Well done'\n            });\n            this.incrementScore(this.state.currentTimelineIndex);\n            if(this.props.playSound)\n                wellDone.play();\n        }\n    }\n\n    singleTimelineCard(time, index){\n        return (\n                <Paper className=\"singleTimeOption\" elevation={8} onClick={() => this.selectTime(time,index)}>\n                    <div style={{margin: 'auto', width:'50%'}}>\n                        {time.timeStr}\n                    </div>                    \n                </Paper>\n        )\n    }\n\n    removeHashedIndex(a){\n        if(a){        \n            a = a.trim();\n            var startI = 0;\n            if(a.length>0 && a[0]=='#'){\n                for(var i=1; i<a.length; i++){\n                    startI = i;\n                    if(a.charAt(i)==' '){\n                        return a.substring(startI).trim();\n                    }\n                } \n                return '';   \n            }\n            return a;\n        }\n        return '';\n    }\n\n    setSlideAnimation(value){\n        this.setState({\n            slideCard: value\n        });\n    }\n\n    singleBlockCard(timelineBlock){\n        return (\n                <div className=\"gamifiedTimelineBlockContainer\">\n                    <Grid\n                    container\n                    direction=\"row-reverse\"\n                    justify=\"center\"\n                    alignItems=\"center\">\n                        <Grid\n                        item\n                        xs={10}\n                        md={7}\n                        lg={5}>\n                            {!isNullOrUndefined(this.props.timeline) && this.props.timeline.length>1?\n                                <div className=\"horizontallyCentered width-40\">\n                                    <KeyboardArrowUp className='gamifiedTimelineBlockNav' \n                                    onClick={() => { this.clickChevron(true)}}/>\n                                </div>\n                                :\n                                null\n                            }\n                            \n                            <Slide direction=\"up\" in={this.state.slideCard} mountOnEnter unmountOnExit\n                            onExited={() => {\n                                this.setSlideAnimation(true);\n                            }}\n                            onEnter={() => {\n                                if(!this.state.stopGame)\n                                    this.incrementTimelineIndex();\n                            }}>\n                                <Card elevation={6}>\n                                    <CardContent>\n                                        {!isNullOrUndefined(timelineBlock.title)?\n                                            <Typography variant=\"h5\" component=\"h2\">{this.removeHashedIndex(timelineBlock.title)}</Typography>\n                                            :\n                                            null\n                                        }                                        \n                                        <Typography variant=\"body2\" component=\"p\" gutterBottom>\n                                            {timelineBlock.summary}\n                                        </Typography>\n                                        <Typography color=\"textSecondary\">\n                                        Select the correct date\n                                        </Typography>\n                                    </CardContent>\n                                </Card>\n                            </Slide>                            \n                        </Grid>\n\n                    </Grid>\n                    <div className=\"gamifiedTimelineBlock horizontallyCentered\">                        \n                        \n                    </div>\n                </div>\n        );\n    }\n\n    incrementTimelineIndex(){\n        if(!isNullOrUndefined(this.props.timeline) && this.props.timeline.length>1){\n            let increment= Math.floor(Math.random()*(this.props.timeline.length-1));\n            if(increment == 0){\n                increment ++;\n            }\n            let index = this.state.currentTimelineIndex;\n            index = (index + increment)%(this.props.timeline.length);\n\n            let finishedBlocks = this.state.finishedBlocks;\n            while(index in finishedBlocks){\n                index = (index + 1)%(this.props.timeline.length);\n            }\n            this.setState({\n                currentTimelineIndex: index\n            });\n        }\n    }\n\n    componentWillReceiveProps(newProps){\n        if(this.props.timeline != newProps.timeline){\n            let index = Math.floor(Math.random()*(newProps.timeline.length-1));\n            this.setState({\n                currentTimelineIndex: index,\n                totalScore: this.props.timeline.length\n            });\n        }\n    }\n\n    stopGame(value){\n        if(value){\n            let stats = this.state.stats;\n            stats.score = this.state.score;\n            stats.totalScore = this.state.totalScore;\n            this.setState({\n                stats: stats\n            });\n            //console.log(stats);\n        }\n        this.setState({\n            stopGame: value\n        });\n    }\n\n    render(){\n        let times = this.seperateTimeline(this.props.timeline);\n        let timeDisplay = times.map((time, index) => (this.singleTimelineCard(time,index)));\n\n        return (\n            <div>\n                {this.state.stopGame?\n                    <div>\n                        <GamifiedGraphStats\n                            stats = {this.state.stats}\n                            bpId={this.props.bpId}\n                            title={this.props.title}\n                            canSave = {true}\n                            type= {'timeline'}\n                            id={'timeline_result'}\n                            />\n                    </div>\n                    :\n                    null\n                }\n                <div className=\"specialViewMargin\">\n                    {!this.state.stopGame?\n                                <div>              \n                                    <div className=\"gameButtonContainer\">\n                                        {this.state.score>0 && !this.state.stopGame?\n                                            <Button\n                                            variant=\"contained\" \n                                            className=\"stopGamebutton\"\n                                            onClick={() => { this.stopGame(true)}}\n                                            > Stop Game</Button>\n                                            :\n                                            null\n                                        }                                \n                                    </div>              \n                                    <div className=\"scoreAmchartContainer\">\n                                        <Speedometer \n                                            id=\"speedometer_timeline_ingame\"\n                                            val={this.state.score}\n                                            min={0}\n                                            max={this.state.totalScore}\n                                            color={'#46237a'}/>\n                                    </div>\n\n                                    <div className=\"scoreText\">Score: <span className=\"timelineScoreVal\">{this.state.score}</span>\n                                    <span className=\"totalScoreVal\">/{this.state.totalScore}</span></div>\n                                    {this.state.score == this.state.totalScore?\n                                        <Alert severity=\"success\" className=\"gameTimelineMessage\">{this.state.gameMessageFinished}</Alert>\n                                        :\n                                        <div>\n                                            {this.state.message == \"Well done\"?\n                                                <Alert severity=\"success\" className=\"gameTimelineMessage\">{this.state.message}</Alert>\n                                                :\n                                                null \n                                            }\n                                            {this.state.message == \"Please try again!\"?\n                                                <Alert severity=\"error\" className=\"gameTimelineMessage\">{this.state.message}</Alert>\n                                                :\n                                                null\n                                            }\n                                        </div>\n                                    }\n                                    \n                                </div>\n                                :\n                                null\n                            }\n                    {(this.props.timeline.length > this.state.score && !this.state.stopGame)?\n                            <Grid\n                            container\n                            direction=\"row\"\n                            style={{border:'1px black solid'}}\n                            >\n                                <Grid xs={12} sm={6} item>\n                                    {this.singleBlockCard(this.props.timeline[this.state.currentTimelineIndex])}\n                                </Grid>\n                                <Grid xs={12} sm={6} item>\n                                    <div className=\"timelineTimesContainer\">\n                                        <Grid xs={12} className=\"timesViewGrid\" id=\"gamifiedTimesViewGrid\">\n                                            {timeDisplay}\n                                        </Grid>\n                                    </div>\n                                </Grid>\n                            </Grid>\n                        :\n                        null\n                    }                       \n                </div>\n            </div>\n        )\n    }\n}\nexport default GamifiedTimelineComponent;\n\n/*\n                    <div>\n                        <div className=\"specialViewMargin\">\n                            {this.singleBlockCard(this.props.timeline[this.state.currentTimelineIndex])}\n                        </div>\n                        <div className=\"specialViewMargin timelineTimesContainer\">\n                            <Grid xs={24} className=\"timesViewGrid\" id=\"gamifiedTimesViewGrid\">\n                                {timeDisplay}\n                            </Grid>\n                        </div>\n                    </div>\n\n                    */","import React, { Component } from 'react';\nimport { Button, IconButton } from '@material-ui/core';\nimport VolumeUp from '@material-ui/icons/VolumeUp';\nimport VolumeOff from '@material-ui/icons/VolumeOff';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport Joyride,{ ACTIONS, EVENTS, STATUS } from 'react-joyride';\nimport Info from '@material-ui/icons/Info';\nimport \"react-tabs/style/react-tabs.css\";\nimport './DashboardView.css';\nimport SummaryViewComponent from \"../summary/SummaryView\";\nimport GraphComponent from \"../GraphComponent\";\nimport GamifiedGraphComponent from \"../GamifiedGraphComponent\";\nimport GamifiedTimelineComponent from '../gamifiedTimeline/GamifiedTimeline';\nimport FindConnectionsComponent from \"../FindConnectionsComponent\";\nimport TimelineComponent from \"../TimelineComponent\";\nimport * as Locale from \"../../Localization/localizedStrings\";\nimport { isNullOrUndefined } from 'util';\n\nclass GamifiedDashboardViewComponent extends React.Component {\n\n    constructor(props){\n      super(props);\n     //lang is necessary\n\n      this.state={\n          key: 'graph',\n          adhocTooltip:{\n            mindmap:{\n                flag: false,\n                text: [\n                    {\n                        title: Locale.gameifiedMindMapTooltips.title[props.lang],\n                        target: '.tooltipMindmap',\n                        content: Locale.gameifiedMindMapTooltips.desc[props.lang],\n                        disableBeacon: true\n                    }\n                ]\n            },\n            timeline:{\n                flag: false,\n                text: [\n                    {\n                        title: Locale.gameifiedTimelineTooltips.title[props.lang],\n                        target: '.tooltipTimeline',\n                        content: Locale.gameifiedTimelineTooltips.desc[props.lang],\n                        disableBeacon: true\n                    }\n                ]\n            }            \n        },\n        playSound: true\n      }\n      this.isSummaryBlocksAvailable = this.isSummaryBlocksAvailable.bind(this);\n      this.isGraphAvailable = this.isGraphAvailable.bind(this);\n      this.isTimelineAvailable = this.isTimelineAvailable.bind(this);\n      this.showLocalTooltip = this.showLocalTooltip.bind(this);\n      this.hideLocalTooltip = this.hideLocalTooltip.bind(this);\n      this.handleAdhocTooltipJoyrideCallback = this.handleAdhocTooltipJoyrideCallback.bind(this);\n\n    }\n\n    showLocalTooltip(type){\n        var adhocTooltip = this.state.adhocTooltip;\n       if(type=='mindmap'){\n           adhocTooltip.mindmap.flag = true;\n       }\n       else if(type=='timeline'){\n        adhocTooltip.timeline.flag = true;\n    }\n       this.setState({adhocTooltip: adhocTooltip});\n    }\n\n    hideLocalTooltip(type){\n        var adhocTooltip = this.state.adhocTooltip;\n        if(type=='mindmap'){\n            adhocTooltip.mindmap.flag = false;\n        }\n        else if(type=='timeline'){\n            adhocTooltip.timeline.flag = false;\n        }\n        this.setState({adhocTooltip: adhocTooltip});\n    }\n\n    handleAdhocTooltipJoyrideCallback(data, tooltipType){\n        const {action,index,status,type} = data;\n        if([STATUS.FINISHED, STATUS.SKIPPED].includes(status)){\n            this.hideLocalTooltip(tooltipType);\n        }\n    }\n\n    isSummaryBlocksAvailable(){\n        if(isNullOrUndefined(this.props.summaryBlocks) || this.props.summaryBlocks.length==0)\n            return false;\n        return true;\n    }\n\n    isGraphAvailable(){\n        if(isNullOrUndefined(this.props.investigationGraph) || Object.keys(this.props.investigationGraph).length==0)\n            return false;\n        return true;\n    }\n\n    isTimelineAvailable(){\n        if(this.props.timeline && this.props.timeline.length > 0)\n            return true;\n        return false;\n    }\n\n    isBlockprobeEmpty(){\n        if(!this.isTimelineAvailable() && !this.isGraphAvailable() && !this.isSummaryBlocksAvailable()){\n            return true;\n        }\n        return false;\n    }\n\n    render(){\n        let lang = this.props.lang;\n        if(isNullOrUndefined(lang))\n            lang = 'en';\n\n        return (\n            <div style={{paddingBottom:'15px'}}> \n                <div className=\"gamifiedDashboardOptionsContainer uniformMarginLeft\">\n                            {this.state.playSound?\n                                <IconButton\n                                    variant=\"contained\" \n                                    className=\"soundSettingsbutton\"\n                                    onClick={() => { this.setState({playSound: false})}}> \n                                    <VolumeOff/>\n                                </IconButton>\n                                :\n                                <IconButton\n                                    variant=\"contained\" \n                                    className=\"soundSettingsbutton\"\n                                    onClick={() => { this.setState({playSound: true})}}> \n                                    <VolumeUp/>\n                                </IconButton>\n                            }        \n                </div>\n                {this.isGraphAvailable()?\n                    <div style={{marginBottom: '50px'}}>\n                        <div className=\"dashboard-section-heading graph-heading\">{Locale.gameifiedMindMapTooltips.title[lang]}\n                        <a className='tooltipMindmap tooltips-dashboard' \n                            onMouseEnter={() => this.showLocalTooltip('mindmap')}\n                            onClick={(e)=>{this.showLocalTooltip('mindmap')}} >\n                            <Info style={{fontSize:'19px'}}/>\n                        </a>\n                        <Joyride\n                        styles={{\n                            options: {\n                            arrowColor: '#e3ffeb',\n                            beaconSize: '4em',\n                            primaryColor: '#05878B',\n                            backgroundColor: '#e3ffeb',\n                            overlayColor: 'rgba(10,10,10, 0.4)',\n                            width: 900,\n                            zIndex: 1000,\n                            }\n                            }}\n                            steps={this.state.adhocTooltip.mindmap.text}\n                            run = {this.state.adhocTooltip.mindmap.flag}\n                            callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'mindmap')}}                    \n                            />  \n                        </div>                                                \n                                <GamifiedGraphComponent \n                                    bpId={this.props.bpId}\n                                    title={this.props.title}\n                                    blockTree={this.props.blockTree} \n                                    investigationGraph={this.props.investigationGraph}\n                                    selectBlock={this.props.selectBlock}\n                                    imageMapping = {this.props.imageMapping}\n                                    setScrollToGraphList ={this.props.setScrollToGraphList}\n                                    multiSelectEntityList = {this.props.multiSelectEntityList}\n                                    isPublic = {this.props.isPublic}\n                                    playSound = {this.state.playSound}\n                                    lang = {this.props.lang}/>\n                       \n                    </div>\n                    :\n                    null\n                } \n\n                {this.isTimelineAvailable()?\n                    <div>\n                        <div className=\"dashboard-section-heading graph-heading\">{Locale.gameifiedTimelineTooltips.title[lang]}\n                        <a className='tooltipTimeline tooltips-dashboard' \n                            onMouseEnter={() => this.showLocalTooltip('timeline')}\n                            onClick={(e)=>{this.showLocalTooltip('timeline')}} >\n                            <Info style={{fontSize:'19px'}}/>\n                        </a>\n                        <Joyride\n                        styles={{\n                            options: {\n                            arrowColor: '#e3ffeb',\n                            beaconSize: '4em',\n                            primaryColor: '#05878B',\n                            backgroundColor: '#e3ffeb',\n                            overlayColor: 'rgba(10,10,10, 0.4)',\n                            width: 900,\n                            zIndex: 1000,\n                            }\n                            }}\n                            steps={this.state.adhocTooltip.timeline.text}\n                            run = {this.state.adhocTooltip.timeline.flag}\n                            callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'timeline')}}                    \n                            />\n                        </div>\n                        <div>\n                            <GamifiedTimelineComponent\n                                timeline={this.props.timeline}\n                                playSound = {this.state.playSound}\n                                bpId={this.props.bpId}\n                                title={this.props.title}\n                                isPublic = {this.props.isPublic}\n                                lang = {this.props.lang}\n                                />\n                        </div>\n                    </div>\n                    :\n                    null\n                }                \n\n                {this.isBlockprobeEmpty()?\n                    <div className=\"dashboard-section-heading graph-heading\" style={{textAlign: 'center'}}>\n                        {Locale.visualizationsNotFound[lang]}\n                    </div>\n                    :\n                    null\n                }         \n                \n            </div>\n        );\n    }\n}\nexport default GamifiedDashboardViewComponent;\n\n/*\n <TabPanel>\n                        <FindConnectionsComponent blockTree={this.props.blockTree} \n                            investigationGraph={this.props.investigationGraph}\n                            imageMapping = {this.props.imageMapping}\n                            selectBlock={this.props.selectBlock}\n                            setScrollToGraphList ={this.props.setScrollToGraphList}\n                        />\n                    </TabPanel>\n\n\n\n                     \n\n\n                {this.isGraphAvailable() || this.isTimelineAvailable()?\n                    <div className=\"dashboard-section-heading graph-heading\">Visualisations</div>\n                    :\n                    null\n                }\n                <Tabs style={{marginTop:'15px'}}>\n                    <TabList>\n                        {this.isGraphAvailable()?\n                            <Tab>Mindmap</Tab>\n                            :\n                            null\n                        }\n\n                        {this.isTimelineAvailable()?\n                            <Tab>Timeline</Tab>\n                            :\n                            null\n                        }\n                    </TabList>   \n                    \n                    {this.isGraphAvailable()?\n                        <TabPanel>\n                            <GraphComponent blockTree={this.props.blockTree} \n                                investigationGraph={this.props.investigationGraph}\n                                selectBlock={this.props.selectBlock}\n                                imageMapping = {this.props.imageMapping}\n                                setScrollToGraphList ={this.props.setScrollToGraphList}\n                                multiSelectEntityList = {this.props.multiSelectEntityList}/>\n                        </TabPanel>\n                        :\n                        null}             \n\n                    {this.isTimelineAvailable()?\n                        <TabPanel>\n                            <TimelineComponent \n                                timeline={this.props.timeline} \n                                selectBlock={this.props.selectBlock}/>\n                        </TabPanel>\n                        :\n                        null}                     \n\n                </Tabs>         \n\n                    */","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport { ChatFeed, ChatBubble, BubbleGroup, Message } from 'react-chat-ui';\nimport './ChatBox.css';\nimport { isNullOrUndefined } from 'util';\n\nconst styles = {\n    button: {\n      backgroundColor: '#fff',\n      borderColor: '#1D2129',\n      borderStyle: 'solid',\n      borderRadius: 20,\n      borderWidth: 2,\n      color: '#1D2129',\n      fontSize: 18,\n      fontWeight: '300',\n      paddingTop: 8,\n      paddingBottom: 8,\n      paddingLeft: 16,\n      paddingRight: 16,\n    },\n    selected: {\n      color: '#fff',\n      backgroundColor: '#0084FF',\n      borderColor: '#0084FF',\n    },\n  };\n  \n  const users = {\n    0: 'You',\n    1: 'Submitter',\n    2: 'Reviewer',\n  };\n\n  const customBubble = props => (\n    <div>\n      <p>{`${props.message.senderName} ${props.message.id ? 'says' : 'said'}: ${\n        props.message.message\n      }`}</p>\n    </div>\n  );\n  \nclass ChatBox extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state={\n              messages: [],\n              useCustomBubble: false,\n              curr_user: 0,\n              shajs: '',\n              uIdHash: '',\n             \n        }\n\n        this.prevBlockId = '';\n        this.prevBlockState = '';\n        this.currRef = null;\n\n        var shajs = require('sha.js');\n        this.state.uIdHash = shajs('sha256').update(this.props.uId).digest('hex');\n        this.state.shajs = shajs;\n        this.getChatFeedFromDb = this.getChatFeedFromDb.bind(this);\n    }\n\n\n    onPress(user) {\n        this.setState({ curr_user: user });\n      }\n    \n      onMessageSubmit(e) {\n        const input = this.message;\n        e.preventDefault();\n        if (!input.value) {\n          return false;\n        }\n        this.pushMessage(this.state.curr_user, input.value);\n        input.value = '';\n        return true;\n      }\n    \n      pushMessage(recipient, message) {\n        \n        var blockSubmitter = null;\n        if(this.props.selectedBlock.blockState == 'UNDER REVIEW'){\n          blockSubmitter = true;\n        }\n        else if(this.props.selectedBlock.blockState == 'TO REVIEW')\n        {\n          blockSubmitter = false;\n        }\n        if(this.currRef!=null){\n          this.currRef.push({\n            author:this.state.uIdHash,\n            blockSubmitter: blockSubmitter,\n            message: message\n          });\n        }\n      }\n\n      //people, undo, thumb_up\n      /*const prevState = this.state;\n        const newMessage = new Message({\n          id: recipient,\n          message,\n          senderName: users[recipient]\n        });\n        prevState.messages.push(newMessage);\n        this.setState(this.state);\n      */\n \n        /* new Message({\n                  id: 1,\n                  message: \"I'm the recipient! (The person you're talking to)\",\n                }), // Gray bubble\n                new Message({ id: 0, message: \"I'm you -- the blue bubble!\" }), // Blue bubble\n                */\n          //author\n          //blockSubmitter true/false\n          //message\n          \n      async componentDidUpdate(){\n        if(this.prevBlockId != this.props.selectedBlock.key ||\n           (this.prevBlockId == this.props.selectedBlock.key &&\n            this.prevBlockState != this.props.selectedBlock.blockState)){\n          //console.log('Here');\n          this.prevBlockId= this.props.selectedBlock.key;\n          this.prevBlockState= this.props.selectedBlock.blockState;\n          await this.setState({\n            messages:[],\n          },\n          function() { this.getChatFeedFromDb()}\n          );\n\n        }\n      }\n\n      componentDidMount(){\n        this.getChatFeedFromDb();\n      }\n\n      getChatFeedFromDb(){\n\n        if(!isNullOrUndefined(this.props.selectedBlock)){\n\n          this.prevBlockId= this.props.selectedBlock.key;\n          this.prevBlockState= this.props.selectedBlock.blockState;\n\n          if(this.currRef!=null){\n            this.currRef.off();\n          }\n          this.currRef = firebase.database().ref(\"Blockprobes/\"+this.props.bpId\n          +\"/chts/\"+this.props.selectedBlock.key);\n          this.currRef.\n          on('child_added', dataSnapshot => {\n\n            var items = this.state.messages;\n            var chatData = dataSnapshot.val();\n            \n            var currId = 0;\n            if(this.state.uIdHash == chatData.author){\n              if(this.props.selectedBlock.blockState ==\"TO REVIEW\"\n               && chatData.blockSubmitter){\n\n                //Chat is in submitter profile but user is reveiwing\n                currId = 1;\n              }\n              else if(this.props.selectedBlock.blockState ==\"UNDER REVIEW\"\n              && !chatData.blockSubmitter){\n\n                //Chat is in reviewer profile but user is submitter\n                currId = 2;\n              }\n              else{\n\n                //Chat and user in same profile\n                currId = 0;\n              }\n          }\n          else{\n            if(chatData.blockSubmitter){\n              currId = 1;\n            }\n            else{\n              currId = 2;\n            }\n          }\n\n\n          items.push(new Message({\n                  id: currId,\n                  message: chatData.message,\n                  senderName: users[currId]\n                }));\n\n          this.setState({\n              messages: items\n            }); \n\n        });\n\n        return null;\n      }\n    }\n\n    render(){\n        return(\n            <div className=\"chat-box-container\">\n                \n                <ChatFeed\n                  chatBubble={this.state.useCustomBubble && customBubble}\n                  maxHeight={250}\n                  messages={this.state.messages} // Boolean: list of message objects\n                  showSenderName\n                />\n\n                <form onSubmit={e => this.onMessageSubmit(e)}>\n                    <input\n                    ref={m => {\n                        this.message = m;\n                    }}\n                    placeholder=\"Type a message...\"\n                    className=\"message-input\"\n                    style={{width:'99%', height:'30px'}}\n                    />\n                </form>\n                </div>\n        );\n    }\n}\nexport default ChatBox;","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport PeopleIcon from '@material-ui/icons/People';\nimport UndoIcon from '@material-ui/icons/Undo'; \nimport ThumbUpIcon from '@material-ui/icons/ThumbUp'; \nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Joyride,{ ACTIONS, EVENTS, STATUS } from 'react-joyride';\nimport './ViewBlock.css';\nimport { isNullOrUndefined } from 'util';\n\nclass ViewBlockListComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n        //props: blockState, selectOption, canCommit, uId, selectedBlock, latestBlock, bpId,\n        //reviewersMap, commitToStoryTooltip, bpDetails\n\n        this.state={\n            shajs: '',\n            uIdHash: '',\n            tooltipText:{\n                addToStory:[\n                    {\n                        title: 'Add your first block to the story!',\n                        target: '.commitBlock',\n                        content: 'Click on \\'Commit block to story\\' from the options!',\n                        disableBeacon: true,\n                        placement: 'center',\n                        event: 'hover'   \n                    }\n                ]\n            },\n            showTooltip:{\n                addToStory:false\n            }\n        };\n\n        if(props.commitToStoryTooltip){\n            this.state.showTooltip={\n                addToStory: true\n            }\n        }\n\n        var shajs = require('sha.js');\n        this.state.uIdHash = shajs('sha256').update(this.props.uId).digest('hex');\n        this.state.shajs = shajs;\n\n        this.selectOption = this.selectOption.bind(this);\n        this.renderReviewOptionList = this.renderReviewOptionList.bind(this);\n        this.renderSubmitterOptionList = this.renderSubmitterOptionList.bind(this);\n        this.getRandomReviewer = this.getRandomReviewer.bind(this);\n        this.giveBlockToNextReviewer = this.giveBlockToNextReviewer.bind(this);\n        this.renderSuccessfulOptionList = this.renderSuccessfulOptionList.bind(this);\n        this.handleCommitJoyrideCallback = this.handleCommitJoyrideCallback.bind(this);\n    }\n\n    selectOption(option){\n\n        if(option == \"revert\"){\n\n            //Deepcopy props to var\n            const blockStr = JSON.stringify(this.props.selectedBlock);\n            var newBlock = JSON.parse(blockStr);\n            newBlock.blockState = \"DRAFT\";\n\n           // console.log(newBlock);\n           // console.log(\"Blockprobes/\"+newBlock.bpID);\n\n            firebase.firestore().collection(\"Blockprobes\").doc(newBlock.bpID)\n            .collection(\"users\").doc(this.state.uIdHash).collection(\"userBlocks\").\n            doc(newBlock.key).set(newBlock);\n            \n            firebase.database().ref(\"Blockprobes/\"+newBlock.bpID\n                        +\"/reviewBlocks/\"+newBlock.key).remove();\n\n            \n        }\n        else if(option == \"upvote\"){\n            \n\n            //Deepcopy of block\n            const blockStr = JSON.stringify(this.props.selectedBlock);\n            var newBlock = JSON.parse(blockStr);\n            this.giveBlockToNextReviewer(newBlock);\n\n            \n            firebase.database().ref(\"Blockprobes/\"+this.props.selectedBlock.bpID\n                        +\"/reviewBlocks/\"+this.props.selectedBlock.key \n                        +\"/reviewers/\"+this.state.uIdHash).set(\"1\");\n\n            firebase.firestore().collection(\"Blockprobes\").\n                doc(this.props.selectedBlock.bpID).\n                collection(\"users\").doc(this.state.uIdHash).\n                collection(\"userBlocks\").\n                doc(this.props.selectedBlock.key+\"_r\").delete();\n\n                        \n        }\n        else if(option == \"reassign_reviewer\"){\n\n            //Deepcopy of block\n            const blockStr = JSON.stringify(this.props.selectedBlock);\n            var newBlock = JSON.parse(blockStr);\n            this.giveBlockToNextReviewer(newBlock);\n        }\n        else if(option == \"can_commit\"){\n            //console.log(this.props.latestBlock);\n\n            const oldKey = this.props.selectedBlock.key;\n            \n\n            //Deepcopy of block\n            const blockStr = JSON.stringify(this.props.selectedBlock);\n            var newBlock = JSON.parse(blockStr);\n            var newBlockId = this.state.shajs('sha256').update(this.state.uIdHash+String(newBlock.timestamp)).digest('hex');\n            newBlock.timestamp = Date.now();\n            newBlock.verificationHash = newBlockId;\n            newBlock.previousKey = this.props.latestBlock.key;\n            if(newBlock.actionType == \"ADD\"){\n                newBlock.referenceBlock = null;\n            }\n            newBlock.key = this.state.shajs('sha256').update(newBlockId + newBlock.previousKey).digest('hex');            \n            if(isNullOrUndefined(newBlock.blockDate)){\n                newBlock.blockDate = null;\n            }\n            if(isNullOrUndefined(newBlock.blockTime)){\n                newBlock.blockTime = null;\n            }\n            newBlock.blockState = \"SUCCESSFUL\";\n\n            var committedBlock = JSON.parse(JSON.stringify(newBlock));\n            delete committedBlock[\"blockState\"];\n            delete committedBlock[\"bpID\"];\n\n            firebase.database().ref(\"Blockprobes/\"+newBlock.bpID\n            +\"/reviewBlocks/\"+oldKey).remove();\n\n            firebase.firestore().collection(\"Blockprobes\").\n                doc(newBlock.bpID).\n                collection(\"users\").doc(this.state.uIdHash).\n                collection(\"userBlocks\").\n                doc(oldKey).delete();\n            \n            firebase.firestore().collection(\"Blockprobes\").\n                doc(newBlock.bpID).\n                collection(\"users\").doc(this.state.uIdHash).\n                collection(\"userBlocks\").\n                doc(newBlock.key).set(newBlock);\n            \n            firebase.firestore().collection(\"Blockprobes\").\n                doc(newBlock.bpID).\n                collection(\"fullBlocks\").\n                doc(committedBlock.key).set(committedBlock);\n\n            \n        }\n        else if(option == 'remove'){\n\n            var timestamp = Date.now();\n            var newTitle = \"CHALLENGE TO {\" + this.props.selectedBlock.title +\"}\";\n            let blockToRemove = this.props.selectedBlock.key;\n            if(this.props.selectedBlock.referenceBlock != null && this.props.selectedBlock.referenceBlock != undefined){\n                //If this is a modified block, remove the original reference\n                blockToRemove = this.props.selectedBlock.referenceBlock;\n            }\n            var committedBlock = {\n                key:'',\n                title: newTitle,\n                summary:this.props.selectedBlock.summary || '',\n                entities:this.props.selectedBlock.entities || [],\n                blockDate: this.props.selectedBlock.blockDate || {},\n                blockTime: this.props.selectedBlock.blockTime || {},\n                evidences:[],\n                actionType:'REMOVE',\n                previousKey: this.props.selectedBlock.key,\n                referenceBlock: blockToRemove,\n                timestamp: timestamp,\n                verificationHash: ''\n            }\n            \n            committedBlock.actionType = \"REMOVE\";\n\n            var softBlock = JSON.parse(JSON.stringify(this.props.selectedBlock));\n            softBlock.actionType = 'REMOVE';\n            softBlock.referenceBlock = this.props.selectedBlock.key;\n            softBlock.previousKey = this.props.selectedBlock.key;\n            softBlock.title = newTitle;\n            softBlock.timestamp = timestamp;\n            \n            var newBlockId = this.state.shajs('sha256').update(this.state.uIdHash+String(timestamp)).digest('hex');\n            committedBlock.verificationHash = newBlockId;\n            softBlock.verificationHash = newBlockId;\n            var newKey = this.state.shajs('sha256').update(newBlockId + committedBlock.previousKey).digest('hex');\n            committedBlock.key = newKey;\n            softBlock.key = newKey;\n            softBlock.bpID = this.props.bpId;\n\n            delete softBlock[\"children\"];\n            delete committedBlock[\"children\"];\n\n            //console.log(committedBlock);\n            //console.log(softBlock);\n\n            firebase.firestore().collection(\"Blockprobes\").\n                doc(softBlock.bpID).\n                collection(\"users\").doc(this.state.uIdHash).\n                collection(\"userBlocks\").\n                doc(softBlock.key).set(softBlock);\n            \n            firebase.firestore().collection(\"Blockprobes\").\n                doc(softBlock.bpID).\n                collection(\"fullBlocks\").\n                doc(committedBlock.key).set(committedBlock);\n            \n            option = \"can_commit\";\n\n        }\n        else if(option == 'modify'){\n            var timestamp = Date.now();\n            var softBlock = JSON.parse(JSON.stringify(this.props.selectedBlock));\n            softBlock.actionType = 'MODIFY';\n            softBlock.referenceBlock = this.props.selectedBlock.key;\n            if(this.props.selectedBlock.referenceBlock != undefined && this.props.selectedBlock.referenceBlock != null){\n                softBlock.referenceBlock = this.props.selectedBlock.referenceBlock;\n            }\n            softBlock.previousKey = this.props.selectedBlock.key;\n            softBlock.timestamp = timestamp;\n            softBlock.blockState = 'DRAFT';\n            softBlock.bpID = this.props.bpId;\n\n            var newBlockId = this.state.shajs('sha256').update(this.state.uIdHash+String(timestamp)).digest('hex');\n            softBlock.verificationHash = newBlockId;\n            var newKey = this.state.shajs('sha256').update(newBlockId + softBlock.previousKey).digest('hex');\n            softBlock.key = newKey;\n            delete softBlock[\"children\"];\n            firebase.firestore().collection(\"Blockprobes\").\n                doc(softBlock.bpID).\n                collection(\"users\").doc(this.state.uIdHash).\n                collection(\"userBlocks\").\n                doc(softBlock.key).set(softBlock);\n        }\n\n        this.props.selectOption(option);\n    }\n\n    getRandomReviewer(reviewerList, revMap)\n    {\n        if(!isNullOrUndefined(reviewerList)){\n            var val = (Date.now()%reviewerList.length);\n            \n            for(var i=0;i<reviewerList.length;i++)\n            {\n                var curr=(val+i)%(reviewerList.length);\n                // console.log(reviewerList[i]);\n                if(!(reviewerList[curr].id in revMap))\n                {\n                    return reviewerList[curr];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    giveBlockToNextReviewer(block)\n    {\n        //Deepcopy of reviewerList\n        const reviewersStr = JSON.stringify(this.props.bpDetails.reviewers);\n        var reviewersList = JSON.parse(reviewersStr);\n        var randomReviewer = this.getRandomReviewer(reviewersList, this.props.reviewersMap);\n\n        if(randomReviewer!=null) {\n\n            block.blockState = \"TO REVIEW\";\n\n            firebase.firestore().collection(\"Blockprobes\").\n                doc(block.bpID).\n                collection(\"users\").doc(randomReviewer.id).\n                collection(\"userBlocks\").\n                doc(block.key+\"_r\").set(block);\n\n            firebase.database().ref(\"Blockprobes/\"+block.bpID\n                        +\"/reviewBlocks/\"+block.key \n                        +\"/reviewers/\"+randomReviewer.id).set(\"-\");\n\n        }\n        else{\n            //console.log(\"No other reviewers left!\");\n        }\n\n    }\n\n    renderReviewOptionList(){\n        return(\n            <div>\n                <h3 style={{textAlign:\"center\"}}>OPTIONS</h3>\n                <List className=\"view-block-option-list\">\n                    <ListItem button \n                    onClick={() => { this.selectOption(\"upvote\")}}\n                    >\n                    <Avatar >\n                        <ThumbUpIcon/>\n                    </Avatar>\n                        <ListItemText primary=\"Upvote and Pass On\"/>\n                    </ListItem>\n\n                </List>\n            </div>\n        );\n    }\n\n    renderSuccessfulOptionList(){\n        return(\n            <div>\n                <h3 style={{textAlign:\"center\"}}>OPTIONS</h3>\n                <List className=\"view-block-option-list\">\n\n                    \n                    <ListItem button \n                        onClick={() => { this.selectOption(\"remove\")}}\n                    >\n                        <Avatar>\n                            <DeleteIcon />\n                        </Avatar>\n                            <ListItemText primary=\"Remove Block\"/>\n                    </ListItem>\n\n                    <ListItem button \n                        onClick={() => { this.selectOption(\"modify\")}}\n                    >\n                        <Avatar>\n                            <EditIcon />\n                        </Avatar>\n                            <ListItemText primary=\"Modify Block\"/>\n                    </ListItem>\n                        \n                </List>\n            </div>\n        );\n    }\n\n    renderSubmitterOptionList(){\n        return(\n            <div>                \n                <h3 style={{textAlign:\"center\"}}>OPTIONS</h3>\n                <List className=\"view-block-option-list\">\n\n                    {this.props.canCommit?\n                        <div>\n                            <Joyride\n                                styles={{\n                                    options: {\n                                    arrowColor: '#e3ffeb',\n                                    beaconSize: '4em',\n                                    primaryColor: '#05878B',\n                                    backgroundColor: '#e3ffeb',\n                                    overlayColor: 'rgba(10,10,10, 0.4)',\n                                    width: 900,\n                                    zIndex: 1000,\n                                    }\n                                }}\n                                callback = {this.handleCommitJoyrideCallback}\n                                steps={this.state.tooltipText.addToStory}\n                                run = {this.props.commitToStoryTooltip}                    \n                                /> \n                             <div className='commitBlock'>\n                             <ListItem button                                 \n                                onClick={() => { this.selectOption(\"can_commit\")}}\n                                >\n                            <Avatar>\n                                <DoneAllIcon />\n                            </Avatar>\n                                <ListItemText primary=\"Commit block to story\"/>\n                            </ListItem>\n                            </div>   \n                        </div>\n\n                        :\n                        null}\n\n                    <ListItem button \n                    onClick={() => { this.selectOption(\"revert\")}}\n                    >\n                    <Avatar>\n                        <UndoIcon />\n                    </Avatar>\n                        <ListItemText primary=\"Revert to Draft\"/>\n                    </ListItem>\n\n                    <ListItem button \n                    onClick={() => { this.selectOption(\"reassign_reviewer\")}}\n                    >\n                    <Avatar>\n                        <PeopleIcon />\n                    </Avatar>\n                        <ListItemText primary=\"Reassign Reviewer\"/>\n                    </ListItem>\n\n                </List>\n            </div>\n        );\n    }\n\n    componentWillReceiveProps(newProps){\n        if(newProps.commitToStoryTooltip){\n            var showTooltip = this.state.showTooltip;\n            showTooltip.addToStory = true;\n            this.setState({showTooltip: showTooltip});\n        }\n    }\n\n    handleCommitJoyrideCallback(data){\n        const {action,index,status,type} = data;\n        if([STATUS.FINISHED, STATUS.SKIPPED].includes(status)){\n            var showTooltip = this.state.showTooltip;\n            showTooltip.addToStory = false;\n            this.setState({showTooltip: showTooltip});\n        }\n    }\n\n    render(){\n        return (\n            <div>\n                {this.props.blockState == 'TO REVIEW'?\n                this.renderReviewOptionList():\n                null}\n\n                {this.props.blockState == 'UNDER REVIEW'?\n                this.renderSubmitterOptionList():\n                null}\n\n                {this.props.blockState == 'SUCCESSFUL' && (this.props.selectedBlock.actionType == \"ADD\"|| this.props.selectedBlock.actionType == \"MODIFY\")?\n                this.renderSuccessfulOptionList():\n                null}\n\n            </div>\n        );\n    }\n\n\n}\nexport default ViewBlockListComponent;","import React, { Component } from 'react';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp'; \nimport './UpvoteStatus.css';\n\nclass UpvoteStatusComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n        //upVotes, bpDetails\n\n    \n\n    }\n\n\n\n    render(){\n\n        var total = this.props.bpDetails.criterion;\n\n        return(\n            <div className=\"upvote-span\">\n                <ThumbUpIcon className=\"upvoteIcon\"/>\n                {this.props.upVotes} ({\n                    total - this.props.upVotes > 0 ? \n                    total - this.props.upVotes : 0\n                    } needed)  \n            </div>\n        );\n    }\n\n}\nexport default UpvoteStatusComponent;","import React, { Component } from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport ChatBox from './ChatBox';\nimport ViewBlockListComponent from './ViewBlockOptionList';\nimport UpvoteStatusComponent from './UpvoteStatus';\nimport Img from 'react-image';\nimport IsImageUrl from 'is-image-url';\nimport * as Utils from '../common/utilSvc';\nimport Iframe from 'react-iframe';\nimport './ViewBlock.css';\nimport { isNullOrUndefined } from 'util';\nimport * as firebase from 'firebase';\n\n\nclass ViewBlockComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n        //closeSideBar, bpDetails, refreshBlockprobe, commitToStoryTooltip, finishAddingBlockToStoryTooltip, isPublicView\n\n\n        this.state={\n            chatList: [],\n            reviewersMap: {},\n            upVotes: 0,\n            canCommit: false            \n        }\n        this.prevBlockId = null;\n        this.prevBlockState = null;\n        this.reviewerRef = null;\n\n        this.renderChat = this.renderChat.bind(this);\n        this.renderOptions = this.renderOptions.bind(this);\n        this.renderUpvoteStatus = this.renderUpvoteStatus.bind(this);\n        this.selectOption = this.selectOption.bind(this);\n        this.renderNumber = this.renderNumber.bind(this);\n        this.getReviewersStatusForBlock = this.getReviewersStatusForBlock.bind(this);\n        this.modifyReviewerMap = this.modifyReviewerMap.bind(this);\n        this.removeHashedIndex = this.removeHashedIndex.bind(this);\n    }\n\n    removeHashedIndex(a){\n        if(a){        \n            a = a.trim();\n            var startI = 0;\n            if(a.length>0 && a[0]=='#'){\n                for(var i=1; i<a.length; i++){\n                    startI = i;\n                    if(a.charAt(i)==' '){\n                        return a.substring(startI).trim();\n                    }\n                } \n                return '';   \n            }\n            return a;\n        }\n        return '';\n    }\n\n    BlockEntity(entity){\n        return(\n        <span className=\"block-entity\">\n            {entity.title}\n        </span>\n        );  \n       }\n\n    BlockEvidence(evidence, index){\n        const WebView = require('react-electron-web-view');\n        var evidenceList = [evidence.evidenceLink];\n        let isImageUrl = IsImageUrl(evidence.evidenceLink);\n        let link = evidence.evidenceLink;\n        return(\n            <div className=\"block-evidence\">\n                <span className=\"block-evidence-title\">Evidence {index+1}</span>\n                <div className=\"block-evidence-subtitle\">{evidence.supportingDetails}</div>\n                {isImageUrl?                   \n                    <a href={link} target=\"_blank\">\n                        <Img src={evidenceList}\n                        style={{width:'100%'}}></Img>\n                    </a>\n                    :\n                    <a href={link} target=\"_blank\" className=\"block-evidence-title\">{link}</a>                    \n                }\n            </div>\n        );\n    }   \n\n    renderDateTime(dateTimeString){\n\n        if(dateTimeString!=\"\"){\n            return (\n                <div class=\"block-datetime\" data-tip data-for='dateTime'>{dateTimeString}</div>\n            );\n        }\n        return null;\n    }\n\n    renderNumber(number){        \n        let numStr = number.key + ': ' + number.value;\n        return (\n            <div class=\"block-number\">{numStr}</div>\n        );\n    }\n\n    renderChat(id){\n        if(!isNullOrUndefined(this.props.selectedBlock.blockState) &&\n        (this.props.selectedBlock.blockState ==\"TO REVIEW\" || this.props.selectedBlock.blockState ==\"UNDER REVIEW\"))\n        {\n            var isReviewer = true;\n            if(this.props.selectedBlock.blockState == \"UNDER REVIEW\"){\n                isReviewer = false;\n            }         \n\n           \n            \n            return (\n                <div style={{marginBottom:'10px'}}>\n                    <h3 style={{marginBottom:'5px',textAlign:\"center\"}}>CHAT</h3>\n                    <ChatBox selectedBlock={this.props.selectedBlock} \n                    uId={this.props.uId}\n                    bpId = {this.props.bpId}\n                    blId={id}/>\n                </div>\n            );\n        } \n        return null;\n    }\n\n\n    modifyReviewerMap(dataSnapshot){\n        var rMap = this.state.reviewersMap;\n        rMap[dataSnapshot.key] = dataSnapshot.val();\n\n        var upVotes = 0;\n        var total = this.props.bpDetails.criterion;\n        var canCommit = false;\n        Object.keys(rMap).map((reviewerId)=> {\n            if(rMap[reviewerId]==\"1\"){\n                upVotes++;\n            }\n        });\n        if(total - upVotes <= 0){\n            canCommit = true;\n        }\n        this.setState({\n            reviewersMap: rMap,\n            upVotes: upVotes,\n            canCommit: canCommit\n        });\n    }\n\n    getReviewersStatusForBlock(){\n        // reviewers\n        this.reviewerRef =\n            firebase.database().ref(\"Blockprobes/\"+this.props.selectedBlock.bpID\n                        +\"/reviewBlocks/\"+this.props.selectedBlock.key \n                        +\"/reviewers\");\n        this.reviewerRef.on('child_added', dataSnapshot => {\n                            this.modifyReviewerMap(dataSnapshot)\n                        });\n        this.reviewerRef.on('child_changed', dataSnapshot => {\n                            this.modifyReviewerMap(dataSnapshot)\n                        });                \n        this.prevBlockId = this.props.selectedBlock.key;\n        this.prevBlockState = this.props.selectedBlock.blockState;                \n        \n    }\n\n    componentDidUpdate(){\n        if(this.prevBlockId!=this.props.selectedBlock.key){\n            this.setState({\n                reviewersMap: {}\n            });\n            this.getReviewersStatusForBlock();\n        }\n    }\n\n    componentDidMount(){\n        this.getReviewersStatusForBlock();\n    }\n\n    selectOption(option){\n        if(option == \"revert\" || option == \"upvote\" || option == \"can_commit\" || option == \"modify\"){\n            if(option == \"can_commit\") {\n                if(this.props.commitToStoryTooltip)       \n                    this.props.finishAddingBlockToStoryTooltip();    \n                this.props.refreshBlockprobe();\n            }\n            this.props.closeSideBar();\n        }\n    }\n\n    renderOptions(){\n        let blockState = this.props.selectedBlock.blockState;\n        if(isNullOrUndefined(this.props.selectedBlock.blockState)){\n            /*\n                If blockstate does not exist, it has to be successful (blocktree block)\n            */\n            blockState = 'SUCCESSFUL';\n        }\n\n            return(\n                <ViewBlockListComponent \n                blockState={blockState}\n                canCommit={this.state.canCommit}\n                selectOption = {this.selectOption}\n                uId={this.props.uId}\n                bpId = {this.props.bpId}\n                selectedBlock={this.props.selectedBlock}\n                bpDetails={this.props.bpDetails}\n                reviewersMap={this.state.reviewersMap}\n                latestBlock ={this.props.latestBlock}\n                commitToStoryTooltip = {this.props.commitToStoryTooltip}\n                />\n            )\n    }\n\n    renderUpvoteStatus(){\n        if(!isNullOrUndefined(this.props.selectedBlock.blockState) && \n        this.props.selectedBlock.blockState==\"UNDER REVIEW\"){\n            return (\n                <UpvoteStatusComponent \n                upVotes = {this.state.upVotes}\n                bpDetails = {this.props.bpDetails}/>            \n            );\n        }\n        return null;\n    }\n\n    render(){\n\n        var renderBlockEntities=\"\";\n        var renderBlockEvidences=\"\";\n        let renderBlockNumbers=\"\";\n        var dateTimeString = \"\";\n\n        if(this.props.selectedBlock.entities!=null && \n            this.props.selectedBlock.entities.length>0){            \n            renderBlockEntities = this.props.selectedBlock.entities.map((blockEntity) => \n               this.BlockEntity(blockEntity)\n           );            \n       }\n\n       if(this.props.selectedBlock.evidences!=null && \n        this.props.selectedBlock.evidences.length>0){            \n        renderBlockEvidences = this.props.selectedBlock.evidences.map((blockEvidence, index) => \n           this.BlockEvidence(blockEvidence, index)\n       );            \n       }\n\n       if(!isNullOrUndefined(this.props.selectedBlock.numbers) && \n            this.props.selectedBlock.numbers.length > 0){\n                renderBlockNumbers = this.props.selectedBlock.numbers.map((blockNumber) =>\n                    this.renderNumber(blockNumber)\n                );\n            }\n       \n       if(this.props.selectedBlock.blockDate!=null){\n           dateTimeString = Utils.getDateTimeString(this.props.selectedBlock);\n       }\n\n        return (\n            <div class=\"block-div\">\n            <div class=\"block-text\">\n                <h2 class=\"block-title\">{this.removeHashedIndex(this.props.selectedBlock.title)}</h2>\n                <p class=\"block-summary\">{this.props.selectedBlock.summary}</p>\n            </div>\n            \n            {this.renderDateTime(dateTimeString)}\n\n            <div>{renderBlockNumbers}</div>\n            <div>{renderBlockEntities}</div>\n            <div className=\"block-evidence-list\">\n                {renderBlockEvidences}\n            </div>\n\n            {this.props.isPublicView?\n                null\n                :\n                <div>\n\n                    {this.renderUpvoteStatus()}\n\n                    {this.renderOptions()}\n\n                    {this.renderChat(this.props.selectedBlock.key)}\n\n                </div>\n            }\n\n            <ReactTooltip id='dateTime' type='error' place=\"left\" className=\"hover-template\">\n                <span>Date and Time associated with the event described by this block.</span>\n            </ReactTooltip>\n            </div>\n        );\n    }\n}\nexport default ViewBlockComponent;","import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport AcUnitIcon from '@material-ui/icons/AcUnit'; \nimport GroupIcon from '@material-ui/icons/Group'; \nimport BuildIcon from '@material-ui/icons/Build'; \nimport CreateIcon from '@material-ui/icons/Create'; \nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ShareIcon from '@material-ui/icons/Share';\nimport Joyride from 'react-joyride';\nimport ListIcon from '@material-ui/icons/List';\nimport './VisoList.css';\n\nclass VisualizeOptionsListComponent extends React.Component {\n\n    constructor(props){\n      super(props);\n      //role, dashboardTooltip\n\n      this.state={\n        shouldEnableMultipleContributors: true,\n          tooltipText:{              \n              dashboard:[\n                  {\n                    title: 'Click on \\'Dashboard\\' from the menu and visualise your work!',\n                    target: '.dashboard-menu',\n                    content: '',\n                    disableBeacon: true,\n                    placement: 'center'\n                  }         \n              ],\n              shareStory:[\n                    {\n                        title: 'Click on \\'Share my story\\' and use the public link to share the dashboard.',\n                        target: '.shareOption',\n                        content: '',\n                        disableBeacon: true,\n                        placement: 'center'\n                    }\n              ]\n          },\n          showTooltip:{\n              dashboard: JSON.parse(JSON.stringify(props.dashboardTooltip)),\n              shareStory: JSON.parse(JSON.stringify(props.shareStoryTooltip))\n          }\n      }\n\n      this.renderOptions = this.renderOptions.bind(this);\n\n\n      /* Add later if needed\n      <ListItem button\n                    selected={this.props.selectedVisualisation == \"list\"}\n                    onClick={() => { this.selectNewVisualisation(\"list\")}}                    \n                    >\n                    <Avatar>\n                        <ListIcon />\n                        </Avatar>\n                        <ListItemText primary=\"List\" />\n                    </ListItem>\n                    */\n    }\n\n    selectNewVisualisation(newVisualisation){\n        this.props.selectVisualisation(newVisualisation);\n    }\n\n    renderOptions(){\n        return(\n            <div>\n                <Joyride\n                styles={{\n                    options: {\n                      arrowColor: '#e3ffeb',\n                      beaconSize: '3em',\n                      primaryColor: '#05878B',\n                      backgroundColor: '#e3ffeb',\n                      overlayColor: 'rgba(10,10,10, 0.4)',\n                      width: 900,\n                      zIndex: 1000,\n                    }\n                  }}\n                    steps={this.state.tooltipText.shareStory}\n                    run = {this.state.showTooltip.shareStory}                    \n                    />\n                <h3 style={{textAlign:\"center\"}}>OPTIONS</h3>\n                <List className=\"\">\n                    <ListItem button \n                    selected={this.props.selectedVisualisation == \"contributions\"}\n                    onClick={() => { this.selectNewVisualisation(\"contributions\")}}\n                    >\n                    <Avatar>\n                        <CreateIcon />\n                    </Avatar>\n                        <ListItemText primary=\"Contribute\"/>\n                    </ListItem>                                     \n\n                    {this.props.permit == \"CREATOR\"?\n                        <div className='shareOption'>\n                            <ListItem button \n                                selected={this.props.selectedVisualisation == \"publish_blockprobe\"}\n                                onClick={() => { this.selectNewVisualisation(\"publish_blockprobe\")}}\n                                >\n                                <Avatar>\n                                    <ShareIcon />\n                                </Avatar>\n                                    <ListItemText primary=\"Share\"/>\n                            </ListItem>\n                        </div>\n                        :\n                        null}\n\n                    {this.state.shouldEnableMultipleContributors?\n                            <ListItem button \n                            selected={this.props.selectedVisualisation == \"manage_blockprobe\"}\n                            onClick={() => { this.selectNewVisualisation(\"manage_blockprobe\")}}\n                            >\n                            <Avatar>\n                                <BuildIcon />\n                            </Avatar>\n                                <ListItemText primary=\"Settings\"/>\n                            </ListItem>\n                            :\n                            null\n                        }  \n                </List>\n            </div>\n        )\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // You don't have to do this check first, but it can help prevent an unneeded render\n        var showTooltip = this.state.showTooltip;\n        if (nextProps.dashboardTooltip !== this.state.showTooltip.dashboard) {           \n            showTooltip.dashboard = JSON.parse(JSON.stringify(nextProps.dashboardTooltip));           \n        }\n        if (nextProps.shareStoryTooltip !== this.state.showTooltip.shareStory) {           \n            showTooltip.shareStory = JSON.parse(JSON.stringify(nextProps.shareStoryTooltip));           \n        }\n\n        this.setState({ showTooltip: showTooltip });\n    }\n\n    render(){\n        return(\n            <div>\n                <Joyride\n                styles={{\n                    options: {\n                      arrowColor: '#e3ffeb',\n                      beaconSize: '3em',\n                      primaryColor: '#05878B',\n                      backgroundColor: '#e3ffeb',\n                      overlayColor: 'rgba(10,10,10, 0.4)',\n                      width: 900,\n                      zIndex: 1000,\n                    }\n                  }}\n                    steps={this.state.tooltipText.dashboard}\n                    run = {this.state.showTooltip.dashboard}                    \n                    />\n                <h3 style={{textAlign:\"center\"}}>VISUALISE</h3>\n                <List className=\"\">\n                    <div className='dashboard-menu'>\n                                <ListItem button \n                                    selected={this.props.selectedVisualisation == \"dashboard\"}\n                                    onClick={() => { this.selectNewVisualisation(\"dashboard\")}}\n                                    >\n                                    <Avatar>\n                                        <DashboardIcon />\n                                    </Avatar>\n                                        <ListItemText primary=\"Dashboard\"/>\n                                </ListItem>\n                    </div>                    \n\n                </List>\n\n                {(!this.props.isViewOnly && this.props.permit != \"VIEWER\")? \n                    this.renderOptions()\n                    :\n                     null    \n                }\n            </div>\n        );\n    }\n\n\n}\nexport default VisualizeOptionsListComponent;","import { isNullOrUndefined } from \"util\";\nimport * as firebase from 'firebase';\nimport * as Utils from './utilSvc';\nimport { promises } from \"fs\";\n\nexport const writePostListToDb =(postList, userId, successFn, errorFn)=>{\n    let allPosts = Utils.getShortenedListOfPosts(postList);\n    if(allPosts){\n\n        firebase.firestore().collection(\"publicWall\").doc(userId).\n        collection(\"userPosts\").get().then((snapshot) => {\n                \n            snapshot.forEach((doc) => {\n                firebase.firestore().collection(\"publicWall\").doc(userId).\n                collection(\"userPosts\").doc(doc.id).delete();\n            });\n                \n            for(var i=0; i<allPosts.length; i++){\n                firebase.firestore().collection(\"publicWall\").doc(userId).\n                    collection(\"userPosts\").doc(String(i)).set(allPosts[i]);        \n            }\n            if(successFn)\n                successFn();\n        },\n        (error) => {\n            if(errorFn)\n                errorFn();\n        });\n    }\n}\n\nexport const removeNotification =(notification,userId)=>{\n    if(!isNullOrUndefined(notification) && !isNullOrUndefined(userId) && ('id' in notification)){\n        let nId = notification.id;\n        return firebase.firestore().collection(\"Users\").doc(userId)\n        .collection(\"notifications\").doc(nId).delete();\n    }\n    return null;\n}\n\nexport const removeInviteStoryNotification =(notification,userId,userIdHash)=>{\n    if(!isNullOrUndefined(notification) && !isNullOrUndefined(userId) && ('permit' in notification)\n                && ('id' in notification))\n    {\n        let bId = notification.id;\n        firebase.database().ref('Blockprobes/'+ bId +'/users/'+userIdHash).remove();            \n    }\n}\n\n\nexport const addUserToBlockprobe =(notification,userId,userIdHash)=>{\n    let allPromises = [];\n\n    if(!isNullOrUndefined(notification) && !isNullOrUndefined(userId) && ('permit' in notification)\n                && ('id' in notification)){\n        let userObj = {\n            id: userId,\n            role: notification.permit\n        }\n        let bId = notification.id;\n        firebase.database().ref('Blockprobes/'+ bId +'/users/'+userIdHash).set(userObj);\n\n        let softBlockprobe = notification;\n        softBlockprobe.timestamp = Date.now();\n        let firestoreWrite = firebase.firestore().collection('Users').doc(userId)\n        .collection('blockprobes').doc(bId).set(softBlockprobe);\n\n        allPromises.push(firestoreWrite);\n    }\n    return allPromises;\n}\n\nexport const setLanguage =(bId, lang)=>{\n    // firebase.database().ref('Blockprobes/'+ bId +'/lang').set(lang);\n    return firebase.firestore().collection(\"blprobeLang\").\n                doc(bId).set({\n                    lang: lang\n                });\n}\n\nexport const getLanguageDb =(bId)=>{\n    //return firebase.database().ref('Blockprobes/'+ bId +'/lang').once(\"value\");\n    return firebase.firestore().collection(\"blprobeLang\").\n                doc(bId).get();\n}\n\nexport const getLanguageLogic =(snapshot)=>{\n    if(snapshot.exists){\n        return snapshot.data()['lang'];\n    }\n    return \"en\";\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport './ViewBlockprobePublic.css';\nimport ReactGA from 'react-ga';\nimport DashboardViewComponent from \"../viso/dashboard/DashboardView\";\nimport MiniDashboardViewComponent from \"../viso/dashboard/MiniDashboardView\";\nimport GamifiedDashboardViewComponent from \"../viso/dashboard/GamifiedDashboardView\";\nimport TimelineComponent from '../viso/TimelineComponent';\nimport GraphComponent from '../viso/GraphComponent';\nimport FindConnectionsComponent from '../viso/FindConnectionsComponent';\nimport ViewBlockComponent from '../viso/ViewBlock';\nimport Sidebar from \"react-sidebar\";\nimport GoogleFontLoader from 'react-google-font-loader';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MoreIcon from '@material-ui/icons/More';\nimport VisualizeOptionsList from '../viso/VisoList';\nimport VisualizeOptionsListComponent from '../viso/VisoList';\nimport { red } from '@material-ui/core/colors';\nimport { timingSafeEqual } from 'crypto';\nimport { isNullOrUndefined } from 'util';\nimport Loader from 'react-loader-spinner';\nimport * as Utils from '../common/utilSvc';\nimport * as DbUtils from '../common/dbSvc';\n\n\n// /view/3a30893249f6952e26de1ce709094e6952731beb9e37c244c07e542e81f52227\n// /view/d2160725641bbdbcc2d46bb0a278b44e6176e977c61b53fcde4299dcf1ac1184\n// /view/ad9e355e747a6a11741fdfdd62b2c040aa8d985afddc43fbfa8202d21d7d986e\n\nclass ViewBlockprobePublicComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state={\n            genesisBlockId: \"\",\n            blockprobeTitle: \"\",\n            bpDetailsLastTs: 0,\n            blockprobeSummary: \"\",\n            lang: 'en',\n            selectedBlock:\"\", \n            blockTree: {},\n            modifyRef: {},\n            blockStatus: {},\n            investigationGraph: {},\n            imageMapping: {},\n            entityChanges: {},\n            timeline: [],\n            summaryList: [],\n            selectedBlockSidebarOpen: false,\n            menuBarOpen: false,\n            selectedVisualisation: \"dashboard\",\n            multiSelectEntityList: [\n                {\n                    value: true, \n                    label: \"All\", \n                    id: 0\n                },\n                {\n                    value: false, \n                    label: \"None\", \n                    id: -1\n                }\n            ],\n            testList: [],\n            isPageLoading: true        \n        }\n\n        ReactGA.initialize('UA-143383035-1');           \n\n        if(this.props.visulationType == 'graph'){\n            this.state.selectedVisualisation = 'graph';\n            ReactGA.pageview('/viewBlockprobePublic');\n        }\n        else if(this.props.visulationType == 'tabs_all'){\n            this.state.selectedVisualisation = 'tabs_all';\n        }\n        else if(this.props.visulationType == 'game'){\n            this.state.selectedVisualisation = 'game';\n            ReactGA.pageview('/openedGame');\n        }\n\n        this.changeSelectedBlock = this.changeSelectedBlock.bind(this);\n        this.onSetSelectedBlockSidebarOpen = this.onSetSelectedBlockSidebarOpen.bind(this);\n        this.onSetMenuBlockSidebarOpen = this.onSetMenuBlockSidebarOpen.bind(this);\n        this.renderVisualisation = this.renderVisualisation.bind(this);\n        this.setNewVisualisation = this.setNewVisualisation.bind(this);\n        this.addEdge = this.addEdge.bind(this);\n        this.createInvestigationGraph = this.createInvestigationGraph.bind(this);\n        this.sortBlocks = this.sortBlocks.bind(this);\n        this.isSummaryBlock = this.isSummaryBlock.bind(this);\n        this.createSummaryList = this.createSummaryList.bind(this);\n        this.generateMultiSelectEntityList = this.generateMultiSelectEntityList.bind(this);\n        this.setScrollToGraphList = this.setScrollToGraphList.bind(this);\n        this.getDataWrapper = this.getDataWrapper.bind(this);\n    }\n\n    setNewVisualisation(newVisualisation){\n        if(this.state.visualisation != newVisualisation){\n            this.setState({\n                selectedVisualisation: newVisualisation,\n                menuBarOpen: false\n            });\n            // console.log(newVisualisation);\n        }\n    }\n\n    onSetSelectedBlockSidebarOpen(open) {\n        this.setState({ selectedBlockSidebarOpen: open });\n    }\n\n    onSetMenuBlockSidebarOpen(open) {\n        this.setState({ menuBarOpen: open });\n        // console.log(this.state.menuBarOpen);\n    }\n\n    addBlocksToProbe(doc){      \n         doc.data().blocks.forEach(block => {\n             var tempState = this.state.blockTree;\n             tempState[block.key] = block;\n             this.setState({\n                 blockTree:tempState\n             });\n             if(block.actionType == \"genesis\"){\n                document.title = block.title;\n                 this.setState({\n                     genesisBlockId: block.key,\n                     blockprobeTitle: block.title,\n                     bpDetailsLastTs: 0,\n                     blockprobeSummary: block.summary\n                 })\n             }\n         });\n    }\n\n    traverseBlockTree(nodeId, timelineList, timelineBlockStatus, blockList, blockStatus, modifyRef, entityChanges){\n        var currBlock = this.state.blockTree[nodeId];\n\n        if(isNullOrUndefined(currBlock)){\n            return ;\n        }\n\n        try{\n            // console.log(nodeId);\n            if(currBlock.actionType==\"entityChange\"){\n                //contains entityMap\n                if(!isNullOrUndefined(currBlock.entityMap)){\n                    let currEntity = currBlock.entityMap.curr;\n                    let newEntity = currBlock.entityMap.new;\n                    let ts = currBlock.timestamp;\n                    if(!(currEntity in entityChanges)){\n                        entityChanges[currEntity] = [];\n                    }\n                    entityChanges[currEntity].push({\n                        ts: ts,\n                        change: newEntity\n                    });\n                }\n            }\n\n            //ONLY TITLE OR SUMMARY CHANGE\n            if(currBlock.actionType==\"BpDetails\"){\n                let currTs = currBlock.timestamp;\n                let prevTs = this.state.bpDetailsLastTs;\n\n                if(!isNullOrUndefined(currTs) && currTs > prevTs){\n                    this.setState({\n                        blockprobeTitle: currBlock.title,\n                        blockprobeSummary: currBlock.summary,\n                        bpDetailsLastTs: currTs\n                    })\n                }\n            }\n\n            //Generic block\n            if(currBlock.actionType!=\"REMOVE\"){\n                blockList.push(currBlock.key);\n                blockStatus[currBlock.key]=true;            \n            }\n            else{\n                blockStatus[currBlock.referenceBlock]=false;\n                \n                // If block is modified, then remove latest modification also\n                if(modifyRef[currBlock.referenceBlock]!=null && modifyRef[currBlock.referenceBlock]!=undefined){\n                    blockStatus[modifyRef[currBlock.referenceBlock]]=false\n                }\n            }\n            \n\n            if(currBlock.blockDate!=null || currBlock.blockTime!=null){\n                if(currBlock.actionType!=\"REMOVE\"){\n                    timelineList.push(currBlock.key);\n                    timelineBlockStatus[currBlock.key]=true;\n                    // console.log(\"ADD \"+ nodeId);\n                }\n                else{\n                    timelineBlockStatus[currBlock.referenceBlock]=false;\n                    // console.log(\"REM \"+ nodeId);\n                }\n            }\n\n            if(currBlock.actionType == \"MODIFY\"){\n                let prevKey = modifyRef[currBlock.referenceBlock]; \n                let currKey = currBlock.key;\n                let prevTs = this.state.blockTree[modifyRef[currBlock.referenceBlock]].timestamp;\n                let currTs = currBlock.timestamp;\n                if(!blockStatus[prevKey]){\n                    //The modified block has already been removed\n                    //Remove current block also\n                    blockStatus[currBlock.key] = false;\n                    timelineBlockStatus[currBlock.key] = false;\n                    modifyRef[currKey] = currBlock.referenceBlock;\n                }\n                else if(currTs > prevTs){\n                    //remove the older block; Also save the older version with later one \n                    blockStatus[prevKey] = false;\n                    timelineBlockStatus[prevKey] = false;\n                    modifyRef[prevKey] = currBlock.referenceBlock;\n                    modifyRef[currBlock.referenceBlock] = currKey;   \n                    modifyRef[currKey] = currKey;          \n                }\n                else{\n                    //remove the new block\n                    blockStatus[currKey] = false;\n                    timelineBlockStatus[currKey] = false;\n                    modifyRef[currKey] = currBlock.referenceBlock;\n                    modifyRef[currBlock.referenceBlock] = prevKey;                \n                }\n            }\n            else{\n                //Set current block as modify reference\n                modifyRef[currBlock.key] = currBlock.key;\n            }\n\n            this.setState({\n                timeline:timelineList\n            });\n        }\n        catch{\n        }\n        \n        var checkedChildren = {};\n        if(!isNullOrUndefined(currBlock.children)){\n            currBlock.children.forEach((childBlockId) => {\n                \n                // Check for false children and duplicate children \n                if(this.state.blockTree[childBlockId].previousKey == nodeId && !(childBlockId in checkedChildren)){\n                    try{\n                        this.traverseBlockTree(childBlockId,timelineList,timelineBlockStatus,blockList,blockStatus,modifyRef,entityChanges);\n                    }\n                    catch{\n                    }\n                }                    \n                checkedChildren[childBlockId] = true;\n            });\n        }\n    }\n\n    \n\n    addEdge(graph, block, entity_i, entity_j){\n\n        // edge from i to j\n        if(!(entity_j in graph[entity_i].edges)){\n            graph[entity_i].edges[entity_j]=[];\n        }\n        graph[entity_i].edges[entity_j].push(block.key);\n    }\n\n    sortBlocks(a, b){\n        a = a.trim();        \n        b = b.trim();\n  \n        var aIndex = 0, bIndex = 0, isAExist = false, isBExist = false;\n        if(a.length>0 && a.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<a.length; i++){\n                \n                if((!isNaN(parseInt(a.charAt(i), 10))) || a[i]==='.'){\n                    num += a.charAt(i);\n                }\n                else{\n                    if(num.length > 0){\n                        aIndex = parseFloat(num);\n                        isAExist = true;\n                    }\n                }\n            }    \n        }\n  \n        if(b.length>0 && b.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<b.length; i++){\n                \n                if((!isNaN(parseInt(b.charAt(i), 10))) || b[i]==='.'){\n                    num += b.charAt(i);\n                }\n                else{\n                    if(num.length > 0){\n                        bIndex = parseFloat(num);\n                        isBExist = true;\n                    }\n                }\n            }    \n        }\n  \n        // A comes after b\n        if(!isAExist && isBExist)\n            return 1;\n  \n        // A comes before b\n        if(isAExist && !isBExist)\n            return -1;\n        \n        // A comes before b\n        if(isAExist && isBExist){\n            if(aIndex > bIndex)\n                return 1;\n            return -1;\n        }\n  \n        if(a > b)\n            return 1;\n  \n        return -1;\n    }\n  \n\n    isSummaryBlock(block){\n        let a = block.title;\n        a = a.trim();\n\n        if(a.length>0 && a.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<a.length; i++){\n                if(a.charAt(i)==' ')\n                    return false;\n                else if(a.charAt(i)=='s' || a.charAt(i)=='S')\n                    return true;\n            }\n        }\n\n        return false;\n    }\n\n    createSummaryList(blockList){\n        var sList = [];\n\n        blockList.forEach((blockKey) => {\n            var block = this.state.blockTree[blockKey];\n            if(this.isSummaryBlock(block)){\n                sList.push(block);\n            }\n        });\n        sList.sort((a, b) => this.sortBlocks(a.title,b.title));\n        this.setState({summaryList: sList});\n    }\n\n    createInvestigationGraph(blockList){\n        var graph = {};\n\n        blockList.forEach((blockKey) => {\n            var block = this.state.blockTree[blockKey];\n            if(block.entities!=null){\n\n                for(var i=0;i<block.entities.length;i++){\n                    var entityKey = block.entities[i].title;\n                    if(!(entityKey in graph)){\n                        graph[entityKey]={\n                            char: [],\n                            edges: {}\n                        }\n                    }\n                }\n\n                if(block.entities.length == 1){\n\n                    var entityKey = block.entities[0].title;\n                    graph[entityKey].char.push(block.key);\n                }\n                else if(block.entities.length > 1){\n\n                    for(var i=0;i<block.entities.length;i++){\n                        for(var j=i+1;j<block.entities.length;j++){\n                            this.addEdge(graph, block, \n                                block.entities[i].title, block.entities[j].title);\n                            this.addEdge(graph, block, \n                                block.entities[j].title, block.entities[i].title);\n                        }\n                    }\n                    \n                }\n            }\n        });\n \n        this.setState({\n            investigationGraph: graph\n        });\n\n        this.generateMultiSelectEntityList();\n\n        // console.log(this.state.investigationGraph);\n    }\n\n    generateMultiSelectEntityList(){\n        var count = 1;\n        var entityList = this.state.multiSelectEntityList;\n\n        var existingEntities = {};\n        for(var i=2;i<entityList.length; i++){\n            existingEntities[entityList[i].label] = true;\n            if(entityList[i].id >= count)\n                count = entityList[i].id + 1;\n        }\n\n        Object.keys(this.state.investigationGraph).forEach(function(entityLabel) {\n            if(!(entityLabel in existingEntities)){\n                entityList.push({                \n                        value: false, \n                        label: entityLabel, \n                        id: count             \n                });\n                count++;\n            }\n        });\n\n        // console.log(entityList);\n        entityList.sort(function(a,b){\n            if(a.label.toLocaleLowerCase() == 'all')\n                return -1;\n            if(b.label.toLocaleLowerCase() == 'all')\n                return 1;\n            if(a.label.toLocaleLowerCase() == 'none')\n                return -1;\n            if(b.label.toLocaleLowerCase() == 'none')\n                return 1;\n            if(a.label.toLocaleLowerCase() < b.label.toLocaleLowerCase())\n                return -1;\n            return 1;\n        });\n        this.setState({\n            multiSelectEntityList: entityList\n        });\n    }\n\n    getImages(snapshot){\n        var imageMapping = this.state.imageMapping;\n        snapshot.forEach((doc) => {\n            doc.data().images.forEach(image => {\n                imageMapping[image.entity] = image.url;\n            });            \n        });\n        this.setState({imageMapping: imageMapping});\n    }\n\n    createBlockprobe(snapshot){\n        snapshot.forEach((doc) => ( this.addBlocksToProbe(doc)));        \n        var timelineList = [];\n        var timelineBlockStatus = {};\n        var blockList = [];\n        var blockStatus = {};\n        var modifyRef = {};\n        let entityChanges = {};\n\n        try{\n            this.traverseBlockTree(\n                this.state.genesisBlockId, \n                timelineList, \n                timelineBlockStatus,\n                blockList,\n                blockStatus,\n                modifyRef,\n                entityChanges);    \n        }\n        catch{\n        }\n\n        // console.log(blockList);\n        // console.log(blockStatus);\n\n        //sort entityChanges\n        for(let entity in entityChanges){\n            entityChanges[entity].sort(function (a,b){\n                return a.ts - b.ts;\n            })\n        }\n        // console.log(entityChanges);\n        let newBlockTree  = Utils.modifyBlockEntities(blockList,this.state.blockTree,entityChanges);\n        // console.log(newBlockTree);\n\n        var finalTimelineList = [];\n        timelineList.forEach((id) => {\n            if(timelineBlockStatus[id] && blockStatus[id])\n            {\n                finalTimelineList.push(this.state.blockTree[id]);\n            }\n        });\n        Utils.sortTimeline(finalTimelineList);\n        this.setState({\n            timeline:[...finalTimelineList],\n            modifyRef: modifyRef,\n            blockStatus: blockStatus,\n            entityChanges: entityChanges\n        });\n\n        var finalBlockList = [];\n        blockList.forEach((id) => {\n            if(blockStatus[id])\n            {                \n                finalBlockList.push(id);\n            }\n        });\n\n        this.createInvestigationGraph(finalBlockList);\n        this.createSummaryList(finalBlockList);\n\n        if(this.props.visulationType == 'game'){\n            ReactGA.event({\n                category: 'game',\n                action: 'Play game',\n                label: this.props.bId\n              });    \n        }\n        else{\n            ReactGA.event({\n                category: 'public_view',\n                action: 'View blockprobe publicly',\n                label: this.props.bId\n              });    \n        }\n    }\n\n    changeSelectedBlock = (block) =>{\n        this.setState({\n            selectedBlock:block\n        }); \n        this.onSetSelectedBlockSidebarOpen(true);\n    }\n\n    async getDataWrapper(){\n        let getBlockprobe = firebase.firestore().collection(\"public\").doc(this.props.bId)\n        .collection(\"aggBlocks\").get();\n        let images = firebase.firestore().collection(\"public\").doc(this.props.bId)\n        .collection(\"images\").get();\n        let langPromise = DbUtils.getLanguageDb(this.props.bId);\n\n        return Promise.all([getBlockprobe, images,langPromise]).then(results => {\n            const [blockprobeSnapshot, imagesSnapshot, langSnapshot] = results;\n            \n            this.createBlockprobe(blockprobeSnapshot);\n            if(imagesSnapshot && !imagesSnapshot.empty){\n                this.getImages(imagesSnapshot);\n            }\n\n            let lang = DbUtils.getLanguageLogic(langSnapshot);\n            this.setState({\n                lang: lang,\n                isPageLoading: false\n            })    \n            return null;   \n        });\n    }\n\n    componentDidMount(){         \n        this.getDataWrapper();\n    }\n\n    renderVisualisation(){\n        if(this.state.selectedVisualisation == \"timeline\")\n        {\n            return (\n                <div className=\"blockprobe-body\">\n                    <TimelineComponent \n                    timeline={this.state.timeline} \n                    selectBlock={this.changeSelectedBlock}/>\n                </div>\n            );\n        }\n        else if(this.state.selectedVisualisation == \"graph\"){\n            return(\n                <div>\n                    <GraphComponent blockTree={this.state.blockTree} \n                        investigationGraph={this.state.investigationGraph}\n                        selectBlock={this.changeSelectedBlock}\n                        multiSelectEntityList = {this.state.multiSelectEntityList}\n                        isPublic = {true}\n                        setScrollToGraphList ={this.setScrollToGraphList}  \n                        lang = {this.state.lang}               \n                        imageMapping={this.state.imageMapping}/>\n                </div>\n            );\n        }\n        else if(this.state.selectedVisualisation == \"find_connections\"){\n            return(\n                <div>\n                    <FindConnectionsComponent blockTree={this.state.blockTree} \n                        investigationGraph={this.state.investigationGraph}\n                        selectBlock={this.changeSelectedBlock}\n                        setScrollToGraphList ={this.setScrollToGraphList}                 \n                        imageMapping={this.state.imageMapping}\n                    />\n                </div>\n            );\n        }\n        else if(this.state.selectedVisualisation == \"tabs_all\"){\n            return(\n                <div>\n                    <MiniDashboardViewComponent\n                                summaryBlocks = {this.state.summaryList}\n                                blockTree={this.state.blockTree} \n                                investigationGraph={this.state.investigationGraph}\n                                selectBlock={this.changeSelectedBlock}\n                                multiSelectEntityList = {this.state.multiSelectEntityList}\n                                timeline={this.state.timeline}    \n                                imageMapping={this.state.imageMapping}\n                                setScrollToGraphList ={this.setScrollToGraphList}  \n                                isPublic = {true}\n                                lang = {this.state.lang}               \n                            />\n                </div>\n            );\n        }\n        else if(this.state.selectedVisualisation == \"game\"){\n            return(\n                <div>\n                    <div className=\"blockprobe-header\"> \n                        <GoogleFontLoader\n                                fonts={[                             \n                                    {\n                                        font:'Lora',\n                                        weights: [400]\n                                    }\n                                ]}\n                                subsets={['cyrillic-ext', 'greek']}\n                                />   \n                            <h2 style={{fontFamily: 'Lora, bold-italic', textAlign:'center', fontSize: '26px', fontWeight:'bold'}}>{this.state.blockprobeTitle}</h2>\n                            <h4>{this.state.blockprobeSummary}</h4>\n                    </div>\n                    <GamifiedDashboardViewComponent\n                                summaryBlocks = {this.state.summaryList}\n                                title={this.state.blockprobeTitle}\n                                blockTree={this.state.blockTree}\n                                bpId={this.props.bId} \n                                investigationGraph={this.state.investigationGraph}\n                                selectBlock={this.changeSelectedBlock}\n                                multiSelectEntityList = {this.state.multiSelectEntityList}\n                                timeline={this.state.timeline}    \n                                imageMapping={this.state.imageMapping}\n                                lang = {this.state.lang}\n                                setScrollToGraphList ={this.setScrollToGraphList}     \n                                isPublic = {true}            \n                            />\n                </div>\n            );\n        }\n\n        return (\n            <div style={{textAlign:\"center\"}}>\n                FEATURE TO BE IMPLEMENTED\n            </div>\n        );\n    }\n\n    renderSingularPage(){\n        return (\n            <div>\n                {this.state.isPageLoading?\n                <div style={{width:'50px',margin:'auto'}}>\n                    <Loader \n                    type=\"TailSpin\"\n                    color=\"#00BFFF\"\n                    height=\"50\"\t\n                    width=\"50\"              \n                    /> \n                </div>\n                :    \n                <div>\n                <Sidebar\n                    sidebar={<div className=\"right-sidebar\">\n                    <ViewBlockComponent \n                        selectedBlock={this.state.selectedBlock}\n                        isPublicView={true}/>\n                    </div>}\n                    open={this.state.selectedBlockSidebarOpen}\n                    onSetOpen={this.onSetSelectedBlockSidebarOpen}\n                    pullRight={true}\n                    defaultSidebarWidth='200px'\n                    styles={{ sidebar: { background: \"#fefefe\", position:'fixed' } }}\n                >\n                    <div id=\"main_body\">\n                        {this.renderVisualisation()}\n                    </div>\n\n                </Sidebar>\n                </div>      \n                }\n            </div>\n        )\n    }\n\n    setScrollToGraphList(value){\n        if(value)\n            document.getElementById('main_body').parentElement.scrollTop = value;\n        else    \n            document.getElementById('main_body').parentElement.scrollTop = 200;\n    }\n\n    renderFullDashboard(){\n        return (\n            <div>\n            {this.state.isPageLoading?\n            <div style={{width:'50px',margin:'auto'}}>\n                <Loader \n                type=\"TailSpin\"\n                color=\"#00BFFF\"\n                height=\"50\"\t\n                width=\"50\"              \n                /> \n            </div>\n            :\n            <div>\n                <Sidebar\n                    sidebar={<div className=\"right-sidebar\">\n                    <ViewBlockComponent selectedBlock={this.state.selectedBlock}\n                                        isPublicView={true}/>\n                    </div>}\n                    open={this.state.selectedBlockSidebarOpen}\n                    onSetOpen={this.onSetSelectedBlockSidebarOpen}\n                    pullRight={true}\n                    defaultSidebarWidth='200px'\n                    styles={{ sidebar: { background: \"#fefefe\", position:'fixed' } }}\n                >\n                   \n\n                    <div id=\"main_body\">\n                        <div className=\"blockprobe-header\"> \n                        <GoogleFontLoader\n                                fonts={[                             \n                                    {\n                                        font:'Lora',\n                                        weights: [400]\n                                    }\n                                ]}\n                                subsets={['cyrillic-ext', 'greek']}\n                                />   \n                            <h2 style={{fontFamily: 'Lora, bold-italic', textAlign:'center', fontSize: '26px', fontWeight:'bold'}}>{this.state.blockprobeTitle}</h2>\n                            <h4>{this.state.blockprobeSummary}</h4>\n                        </div>\n                        \n                        <DashboardViewComponent\n                                summaryBlocks = {this.state.summaryList}\n                                blockTree={this.state.blockTree} \n                                investigationGraph={this.state.investigationGraph}\n                                selectBlock={this.changeSelectedBlock}\n                                multiSelectEntityList = {this.state.multiSelectEntityList}\n                                timeline={this.state.timeline}    \n                                imageMapping={this.state.imageMapping}\n                                lang = {this.state.lang}\n                                setScrollToGraphList ={this.setScrollToGraphList}     \n                                isPublic = {true}            \n                            />\n                    </div>\n                </Sidebar>\n                </div>            \n            }\n            </div>\n            );\n    }\n\n    render(){\n        return (\n            <div>\n                {this.state.selectedVisualisation == 'dashboard'?\n                    this.renderFullDashboard()\n                    :\n                    this.renderSingularPage()\n                }\n            </div>\n        )\n    }\n\n\n}\n\nexport default ViewBlockprobePublicComponent;","import React, { Component } from 'react';\nimport ReactGA from 'react-ga';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n      super(props);\n\n      ReactGA.initialize('UA-143383035-1');  \n    }\n  \n    componentDidCatch(error, info) {      \n      let errorTitle = error.toString();\n      let errorTotal = errorTitle +\": \"+ JSON.stringify(info);\n\n      ReactGA.exception({\n        description: errorTotal,\n        fatal: true\n      });\n\n      ReactGA.event({\n        category: 'error',\n        action: errorTotal,\n        label: errorTitle\n      });\n    }\n  \n    render() {\n      return this.props.children;\n    }\n  }\n  export default ErrorBoundary;","import React, { Component } from 'react';\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\nimport ViewBlockprobePublicComponent from '../../view/ViewBlockprobePublic';\nimport  { Redirect } from 'react-router-dom'\nimport { isNullOrUndefined } from 'util';\n\nclass ViewBlockprobePublicWrapper extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        selectedVisualisation: null\n      }\n\n      if(props.match.params.viewType && \n        props.match.params.viewType == 'view'){\n            this.state.selectedVisualisation = 'dashboard';\n      }\n      else if(props.match.params.viewType && \n        props.match.params.viewType == 'graph'){\n            this.state.selectedVisualisation = 'graph';\n      }\n      else if(props.match.params.viewType && \n        props.match.params.viewType == 'tabs'){\n          this.state.selectedVisualisation = 'tabs_all';\n        }\n      else if(props.match.params.viewType && \n          props.match.params.viewType == 'game'){\n            this.state.selectedVisualisation = 'game';\n          }    \n    }\n     \n    render() {\n      return (\n        <ErrorBoundary>\n          {!isNullOrUndefined(this.state.selectedVisualisation)?\n            <ViewBlockprobePublicComponent \n              visulationType = {this.state.selectedVisualisation}\n              bId = {this.props.match.params.bId}/>\n              :\n              <Redirect to=\"/\" ></Redirect>\n          }          \n        </ErrorBoundary>\n      );\n    }\n  }\n  export default ViewBlockprobePublicWrapper;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport ReactGA from 'react-ga';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport Loader from 'react-loader-spinner';\nimport Textarea from 'react-textarea-autosize';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport  * as Utils from '../common/utilSvc';\nimport './UserBlockprobes.css';\nimport Joyride,{ ACTIONS, EVENTS, STATUS } from 'react-joyride';\n\nclass UserBlockprobesComponent extends React.Component {\n\n    constructor(props){\n        \n\n        //Probs include blockprobes, selectBlockprobe, selectedBlockprobe\n        super(props);\n\n\n        this.maxBlockprobeTitleChar = 160;\n\n\n        this.state={\n            uIdHash:'',\n            shajs:null,\n            addBlockprobe: false,\n            draftBlockprobe: {\n                title:'',\n                summary:''\n            },\n            toolTipSteps:{\n                createStoryStep: [\n                    {\n                        title: 'Click on \\'Create new story\\' to get started!',\n                        target: '.addBlockprobeButton',\n                        content: '',\n                        placement: 'center',\n                        disableBeacon: true\n                    }/*,\n                    {\n                        title: 'Get started!',\n                        target: '.addBlockprobeButton',\n                        content: 'Click to create new story and get started! A story could be an investigation of a crime, an article for a newspaper or a policy proposal.',\n                        placementBeacon: 'left',\n                        disableBeacon: true\n                    } */                               \n                ],\n                clickOnStoryStep: [\n                    {                    \n                        title: 'Great! Now click on your new story!',\n                        target: '.blockprobeListTooltip',\n                        content: 'Let\\'s go right to it!',\n                        disableBeacon: true                    \n                    }\n                ]\n            },\n            showToolTips:{\n                createStory: JSON.parse(JSON.stringify(props.buildStorytooltip)),\n                addTitleAndSummary: false,\n                clickOnStory: false,\n                clickOnStoryEnabler: false,\n                buildStory: JSON.parse(JSON.stringify(props.buildStorytooltip))\n            },\n            isBlockprobeBeingCreated: false\n        };\n\n        var shajs = require('sha.js');\n        this.state.uIdHash = shajs('sha256').update(this.props.uId).digest('hex');\n        this.state.shajs = shajs;\n\n        ReactGA.initialize('UA-143383035-1');   \n        ReactGA.pageview('/userBlockProbes');\n\n        this.isValidBlockprobe = this.isValidBlockprobe.bind(this);\n        this.renderSingleBlockprobeItem = this.renderSingleBlockprobeItem.bind(this);\n        this.addCancelBlockprobe = this.addCancelBlockprobe.bind(this);\n        this.renderDraftBlockprobe = this.renderDraftBlockprobe.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.startTooltipTour = this.startTooltipTour.bind(this);\n        this.createBlockprobe = this.createBlockprobe.bind(this);\n        this.handleCreateStoryJoyrideCallback = this.handleCreateStoryJoyrideCallback.bind(this);\n        this.handleClickOnStoryJoyrideCallback = this.handleClickOnStoryJoyrideCallback.bind(this);\n        this.convertBlockprobeMapToList = this.convertBlockprobeMapToList.bind(this);\n    }\n\n    selectBlockprobe(blockprobeId){\n        ReactGA.event({\n            category: 'blockprobe_opened',\n            action: 'Blockprobe Opened',\n            label: String(blockprobeId)\n          });\n        this.props.selectBlockprobe(blockprobeId, this.state.showToolTips.buildStory);\n    }\n\n    handleClickOnStoryJoyrideCallback(data){\n        const {action,index,status,type} = data;\n        if([STATUS.FINISHED, STATUS.SKIPPED].includes(status)){\n            var showToolTips = this.state.showToolTips;\n            showToolTips.createStory = false;\n            showToolTips.addTitleAndSummary = false;\n            showToolTips.clickOnStory = true;\n            showToolTips.clickOnStoryEnabler = false;\n            this.setState({ showToolTips: showToolTips });\n            ReactGA.event({\n                category: 'read_clickOnStory_tooltip',\n                action: 'Closed clickOnStory tooltip',\n                label: 'close clickOnStory tooltip'\n              });\n        }  \n    }\n\n    handleCreateStoryJoyrideCallback(data){\n        const {action,index,status,type} = data;\n        if([STATUS.FINISHED, STATUS.SKIPPED].includes(status)){\n            var showToolTips = this.state.showToolTips;\n            showToolTips.createStory = false;\n            showToolTips.addTitleAndSummary = true;\n            showToolTips.clickOnStory = false;\n            this.setState({ showToolTips: showToolTips });\n            ReactGA.event({\n                category: 'read_initial_tooltip',\n                action: 'Closed initial tooltip',\n                label: 'close initial tooltip'\n              });\n        }\n    }\n\n\n    renderSingleBlockprobeItem(blockprobe, scope){\n        //console.log(blockprobe);\n        return (\n                <ListItem button \n                    selected={scope.props.selectedBlockprobe == blockprobe.id}\n                    onClick={() => { scope.selectBlockprobe(blockprobe.id)}}\n                    style={{width:'100%'}}\n                    >\n                    <ListItemText primary={blockprobe.title} secondary={blockprobe.summary}/>\n                </ListItem>\n        );\n    }\n\n    async createBlockprobe(){\n\n        this.setState({isBlockprobeBeingCreated: true});\n\n        var timestamp = Date.now();\n\n        var firstBlock = {\n            key:'',\n            title:this.state.draftBlockprobe.title,\n            summary:this.state.draftBlockprobe.summary,\n            entities:[],\n            evidences:[],\n            actionType:'genesis',\n            previousKey: \"0\",\n            referenceBlock: '',\n            timestamp: timestamp,\n            verificationHash: ''\n        }\n\n        var newBlockId = this.state.shajs('sha256').update(this.state.uIdHash+String(timestamp)).digest('hex');\n        firstBlock.verificationHash = newBlockId;\n        firstBlock.key = this.state.shajs('sha256').update(newBlockId + firstBlock.previousKey).digest('hex');\n        var blockprobeId = firstBlock.key;\n\n        var details = {\n            active: true,\n            criterion: 0,\n            isActive: true,\n            reviewers: [{ id: this.state.uIdHash, nick: 'creator'}],\n            summary: this.state.draftBlockprobe.summary,\n            title: this.state.draftBlockprobe.title\n        }\n\n        var softBlockprobe = {\n            active: true,\n            id: blockprobeId,\n            isActive: true,\n            permit:'CREATOR',\n            summary: this.state.draftBlockprobe.summary,\n            title: this.state.draftBlockprobe.title,\n            timestamp: timestamp\n        }\n\n        var nickPhoneHash = {\n        };\n        nickPhoneHash[\"creator\"]= this.props.uId;\n\n        let userDetails = {\n            id: this.props.uId,\n            role: 'CREATOR'\n        }\n\n        // console.log('Blockprobes/'+ blockprobeId +'/isActive/');\n        await firebase.database().ref('Blockprobes/'+ blockprobeId +'/users/'+this.state.uIdHash).set(userDetails); \n\n        // console.log('Blockprobes/'+ blockprobeId +'/fullBlocks/'+blockprobeId);\n        // console.log(firstBlock);\n        await firebase.firestore().collection('Blockprobes').doc(blockprobeId)\n        .collection('fullBlocks').doc(blockprobeId).set(firstBlock);\n\n        // console.log('Users/'+ this.props.uId +'/blockprobes/'+blockprobeId);\n        // console.log(softBlockprobe);\n        await firebase.firestore().collection('Users').doc(this.props.uId)\n        .collection('blockprobes').doc(blockprobeId).set(softBlockprobe);\n       \n        // console.log('Blockprobes/'+blockprobeId);\n        // console.log(details);\n        await firebase.firestore().collection('Blockprobes').doc(blockprobeId).set(details);\n       \n       // console.log('Users/'+this.props.uId +\"/blockprobes/\"+blockprobeId+\n       // \"/privelegedInfo/nickPhoneHash\");\n       // console.log(nickPhoneHash);\n        \n        await firebase.firestore().collection('Users').doc(this.props.uId)\n        .collection('blockprobes').doc(blockprobeId).\n        collection('privelegedInfo').doc('nickPhoneHash').set(nickPhoneHash);        \n\n        this.addCancelBlockprobe(true);\n\n        ReactGA.event({\n            category: 'blockprobe',\n            action: 'Create blockprobe',\n            label: blockprobeId\n          });\n        \n          this.setState({isBlockprobeBeingCreated: false});\n          this.selectBlockprobe(blockprobeId);\n    }\n\n    isValidBlockprobe(){\n        if(this.state.draftBlockprobe.title.trim() == '')\n            return false;\n        return true;\n    }\n\n    renderDraftBlockprobe(){\n        var draftBlockprobeSteps = [\n            ];\n        if(this.state.addBlockprobe){\n            return (\n                <div style={{}}>\n                    <Joyride\n                styles={{\n                    options: {\n                      arrowColor: '#e3ffeb',\n                      beaconSize: '3em',\n                      primaryColor: '#05878B',\n                      backgroundColor: '#e3ffeb',\n                      overlayColor: 'rgba(10,10,10, 0.4)',\n                      width: 900,\n                      zIndex: 1000,\n                    }\n                  }}\n                    steps={draftBlockprobeSteps}\n                    run = {this.state.showToolTips.addTitleAndSummary}\n                    />\n                    <form className=\"newBlockprobeForm\">\n                        <label>\n                            <TextField \n                                type=\"text\"\n                                placeholder = \"Enter title of your story.\"\n                                variant=\"outlined\"\n                                value={this.state.draftBlockprobe.title}\n                                onChange={(e) => { this.handleChange(e,\"title\")}}\n                                multiline\n                                rowsMax=\"2\"\n                                rows=\"1\"\n                                style={{\n                                    background: 'white',\n                                    marginTop:'6px',\n                                    marginBottom:'6px',\n                                    textColor: 'black',\n                                    fontWeight: '600',\n                                    marginLeft: '1em',\n                                    width:'95%'\n                                    }}/>                            \n                        </label>\n                    </form>\n                    {this.isValidBlockprobe()?\n                        <Button\n                        className=\"submitBlockprobeButton\"\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={this.createBlockprobe}>\n                            Confirm\n                        </Button>                    \n                    :\n                        null\n                    }\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    handleChange(event, type) {\n\n        var shouldUpdate = true;\n      \n        let newStr = event.target.value;\n        if(!Utils.shouldUpdateText(newStr, '\\n\\t'))\n            shouldUpdate=false;\n\n        if(shouldUpdate){\n            var blockProbe = this.state.draftBlockprobe;\n            if(type==\"title\"){\n                    blockProbe.title = event.target.value;\n                    blockProbe.title = blockProbe.title.substring(0, this.maxBlockprobeTitleChar - 1);\n                    this.setState({draftBlockprobe: blockProbe});\n                }\n            else if(type==\"summary\"){\n                    blockProbe.summary = event.target.value;\n                    this.setState({draftBlockprobe: blockProbe});\n                }\n            }\n        \n    }\n\n    addCancelBlockprobe(isSubmit){\n        var addBlockprobe = this.state.addBlockprobe;\n\n        var draftBlockprobe = this.state.draftBlockprobe;\n        var showToolTips = this.state.showToolTips;\n\n        if(addBlockprobe){\n            //cancel or submit pressed\n            draftBlockprobe = {\n                title:'',\n                summary:''\n            };\n            if(showToolTips.addTitleAndSummary && isSubmit){\n                showToolTips.createStory = false;\n                showToolTips.addTitleAndSummary = false;\n                showToolTips.clickOnStory = true;\n                showToolTips.clickOnStoryEnabler = true;\n            }\n        }\n        else{\n            if(showToolTips.createStory){\n                showToolTips.createStory = false;\n                showToolTips.addTitleAndSummary = true;\n                showToolTips.clickOnStory = false;\n                showToolTips.clickOnStoryEnabler = false;\n            }\n            ReactGA.event({\n                category: 'clicked_on_create_story',\n                action: 'Clicked on create story',\n                label: 'Clicked on create story'\n              });\n        }\n\n        \n        this.setState({\n            addBlockprobe: !addBlockprobe,\n            draftBlockprobe: draftBlockprobe,\n            showToolTips: showToolTips\n        });\n        \n    }\n\n    startTooltipTour(){\n        var showToolTips = this.state.showToolTips;\n        if(!showToolTips.createStory && !showToolTips.clickOnStory){\n            //start tooltips\n            showToolTips.createStory = true;\n            showToolTips.addTitleAndSummary = false;\n            showToolTips.clickOnStory = false;\n            showToolTips.buildStory = true;\n            this.setState({\n                showToolTips: showToolTips\n            });\n        }\n        else if(showToolTips.clickOnStory){\n            showToolTips.clickOnStoryEnabler = true;\n            this.setState({\n                showToolTips: showToolTips\n            });\n        }\n    }\n\n    componentWillReceiveProps(newProps){\n        if(newProps.buildStorytooltip != this.props.buildStorytooltip){\n            var showTooltips = this.state.showToolTips;\n            showTooltips.createStory = JSON.parse(JSON.stringify(newProps.buildStorytooltip));\n            this.setState({showToolTips:showTooltips});\n        }\n    }\n\n    componentDidMount(){\n        /*\n        <!-- Event snippet for Blockprobe signup conversion page -->\n        <script>\n        gtag('event', 'conversion', {'send_to': 'AW-734513637/5XMVCJjI2qUBEOWTn94C'});\n        </script>\n\n        */\n        const script = document.createElement(\"script\");\n        const scriptText = document.createTextNode(\"gtag('event', 'conversion', {'send_to': 'AW-734513637/5XMVCJjI2qUBEOWTn94C'});\");\n        script.appendChild(scriptText);\n        document.head.appendChild(script);\n\n        const scriptFb = document.createElement(\"script\");\n        const scriptFbText = document.createTextNode(\"fbq('track', 'ViewContent', {value: 1, content_type: 'login', currency: 'INR', content_id:'1', product:'none'});\");\n        scriptFb.appendChild(scriptFbText);\n        document.head.appendChild(scriptFb);\n\n\n    }\n\n    convertBlockprobeMapToList(blockprobeMap){\n        var blockprobeTempList = [];\n        for (var blockprobeId in blockprobeMap) {\n            // check if the property/key is defined in the object itself, not in parent\n            if (blockprobeId in blockprobeMap) {           \n                blockprobeTempList.push(blockprobeMap[blockprobeId]);\n            }\n        }\n        blockprobeTempList.sort(function(a, b){if(a.title.toLowerCase()>b.title.toLowerCase()){return 1} return -1;});\n        return blockprobeTempList;\n    }\n\n    render(){\n\n        const scope = this;\n        //console.log(this.props.blockprobes)\n\n        var blockprobeTempList = this.convertBlockprobeMapToList(scope.props.blockprobes);\n\n        const blockprobeListRender = blockprobeTempList.map((blockprobe) => \n                    (scope.renderSingleBlockprobeItem(blockprobe, scope)));\n\n/*        const blockprobeListRender = Object.keys(this.props.blockprobes).\n        map((blockprobeId) => (\n            scope.renderSingleBlockprobeItem(blockprobe, scope)\n        ));\n*/\n        return (\n            <div>\n                <Joyride\n                styles={{\n                    options: {\n                      arrowColor: '#e3ffeb',\n                      beaconSize: '3em',\n                      primaryColor: '#05878B',\n                      backgroundColor: '#e3ffeb',\n                      overlayColor: 'rgba(10,10,10, 0.4)',\n                      width: 900,\n                      zIndex: 1000,\n                    }\n                  }}                \n                steps={this.state.toolTipSteps.createStoryStep}\n                run = {this.state.showToolTips.createStory}                \n                  callback = {this.handleCreateStoryJoyrideCallback}\n                />\n                <h2 style={{textAlign:'center'}}>My stories</h2>\n                {this.state.isBlockprobeBeingCreated?\n                    <div style={{margin:'auto',width:'50px'}}>\n                        <Loader \n                        type=\"TailSpin\"\n                        color=\"#00BFFF\"\n                        height=\"50\"\t\n                        width=\"50\"\n                        /> \n                    </div>\n                    :\n                    <div>\n                        <div>\n                            <div style={{flexWrap: 'wrap',  display:'flex'}}>\n                                <div>\n                                    <Button \n                                            className=\"addBlockprobeButton\" \n                                            color=\"primary\"\n                                            variant=\"contained\"\n                                            onClick={() => this.addCancelBlockprobe(false)}>\n                                            {!this.state.addBlockprobe?\n                                            <div>Create new story</div>\n                                            :\n                                            <div>Cancel</div>\n                                            }\n                                    </Button>\n                                </div>\n                                <div style={{display:'none'}}>\n                                    <Button\n                                        className=\"startTooltipsButton\" \n                                        color=\"primary\"\n                                        variant=\"contained\"\n                                        onClick={() => this.startTooltipTour()}>\n                                        Guided tutorial\n                                    </Button>\n                                </div>\n                            </div>\n                            {this.state.addBlockprobe?\n                                this.renderDraftBlockprobe()\n                                :\n                                null\n                            }\n                        </div>\n\n                        {Object.keys(this.props.blockprobes).length == 0?\n                            <div>\n                                    <div style={{padding:'15px'}}>\n                                    <p className=\"emptyListText\">\n                                        Click on <span className=\"emptyListTextEmphasisStory\">Create new story</span> and get started.<br/><br/>\n                                        Your work will be saved as <span className=\"emptyListTextEmphasisStory\">stories</span>.<br/>\n                                        If you are a <span className=\"emptyListTextEmphasisPersona\">police officer</span>, the <span className=\"emptyListTextEmphasisStory\">story</span> could be the <span className=\"emptyListTextEmphasisStoryType\">case that you are investigating</span>.<br/>\n                                        If you are a <span className=\"emptyListTextEmphasisPersona\">politician</span>, the <span className=\"emptyListTextEmphasisStory\">story</span> could be your <span className=\"emptyListTextEmphasisStoryType\">policy proposal</span>.<br/>\n                                        If you are a <span className=\"emptyListTextEmphasisPersona\">journalist</span>, the <span className=\"emptyListTextEmphasisStory\">story</span> could be your <span className=\"emptyListTextEmphasisStoryType\">article or investigation</span>.<br/>\n                                    </p>\n                                    </div>\n                            </div>                       \n                            :\n                            <List className=\"blockprobeListTooltip\">  \n                            <Joyride\n                                styles={{\n                                    options: {\n                                    arrowColor: '#e3ffeb',\n                                    beaconSize: '3em',\n                                    primaryColor: '#05878B',\n                                    backgroundColor: '#e3ffeb',\n                                    overlayColor: 'rgba(10, 10, 10, 0.4)',\n                                    width: 900,\n                                    zIndex: 1000,\n                                    }\n                                }}\n                                    steps={this.state.toolTipSteps.clickOnStoryStep}\n                                    run = {false}//this.state.showToolTips.clickOnStory && this.state.showToolTips.clickOnStoryEnabler}\n                                    callback = {this.handleClickOnStoryJoyrideCallback}                    \n                                    />                                            \n                                        {blockprobeListRender}                                                                                                \n                            </List>\n                            }\n                    </div>\n                }                \n            </div>\n        );\n    }\n\n\n}\nexport default UserBlockprobesComponent;","import React, { Component } from 'react';\nimport './ShareBlockprobe.css';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport Loader from 'react-loader-spinner';\nimport Button from '@material-ui/core/Button';\nimport * as Utils from '../../common/utilSvc';\nimport * as DbUtils from \"../../common/dbSvc\";\nimport {\n    FacebookShareButton,\n    LinkedinShareButton,\n    TwitterShareButton,\n    TelegramShareButton,\n    WhatsappShareButton,\n    PinterestShareButton,\n    VKShareButton,\n    OKShareButton,\n    RedditShareButton,\n    TumblrShareButton,\n    LivejournalShareButton,\n    MailruShareButton,\n    ViberShareButton,\n    WorkplaceShareButton,\n    LineShareButton,\n    PocketShareButton,\n    InstapaperShareButton,\n    EmailShareButton,\n  } from 'react-share';\n  import {\n    FacebookIcon,\n    TwitterIcon,\n    TelegramIcon,\n    WhatsappIcon,\n    LinkedinIcon,\n    PinterestIcon,\n    VKIcon,\n    OKIcon,\n    RedditIcon,\n    TumblrIcon,\n    LivejournalIcon,\n    MailruIcon,\n    ViberIcon,\n    WorkplaceIcon,\n    LineIcon,\n    PocketIcon,\n    InstapaperIcon,\n    EmailIcon,\n  } from 'react-share';\nimport { timingSafeEqual } from 'crypto';\nimport Info from '@material-ui/icons/Info';\nimport Joyride,{ ACTIONS, EVENTS, STATUS } from 'react-joyride';\n\n\nclass ShareBlockprobeComponent extends React.Component {\n\n    constructor(props){\n      super(props);\n      this.state = {\n          urlPrefix: 'https://blprobe.com/view/',\n          gameUrlPrefix: 'https://blprobe.com/game/',\n          blocksUploaded: true,\n          imageUploaded: true,\n          didPublishBlocksInSession: false,\n          didPublishImagesInSession: false,\n          unpublishingBlocks: false,\n          unpublishingImages: false,\n          isBlockprobeAlreadyPublished: false,\n          adhocTooltip:{\n            publicLink:{\n                flag: false,\n                text: [\n                    {\n                        title: 'Link to share with public',\n                        target: '.share-url',\n                        content: 'Share your dashboard with the general public using this link so that they can also engage with your story.',\n                        disableBeacon: true\n                    }\n                ]\n            },\n            socialMedia:{\n                flag: false,\n                text: [\n                    {\n                        title: 'Share link on social media',\n                        target: '.shareContainer',\n                        content: 'You can directly open social media (Facebook and Whatsapp) and share your dashboard\\'s public link.',\n                        disableBeacon: true\n                    }\n                ]\n            }\n        }\n      }\n\n      this.renderShareScreen = this.renderShareScreen.bind(this);\n      this.showLocalTooltip = this.showLocalTooltip.bind(this);\n      this.unpublishStory = this.unpublishStory.bind(this);\n      this.publishStory = this.publishStory.bind(this);  \n      this.addStoryToWall = this.addStoryToWall.bind(this);    \n      this.removeStoryFromWall = this.removeStoryFromWall.bind(this);\n      this.isAnyOptionClicked = this.isAnyOptionClicked.bind(this);\n      this.isStoryAlreadyAdded = this.isStoryAlreadyAdded.bind(this);\n      this.handleAdhocTooltipJoyrideCallback = this.handleAdhocTooltipJoyrideCallback.bind(this);            \n    }\n\n    isStoryAlreadyAdded(){\n        let posts = this.props.posts;\n        for(let i=0; posts && i < posts.length; i++){\n            if(posts[i].bp == this.props.bpId)\n                return true;\n        }\n        return false;\n    }\n\n    showLocalTooltip(type){\n        var adhocTooltip = this.state.adhocTooltip;\n       if(type=='publicLink'){\n           adhocTooltip.publicLink.flag = true;\n       }\n       else if(type=='socialMedia'){\n           adhocTooltip.socialMedia.flag = true;\n       }\n       this.setState({adhocTooltip: adhocTooltip});\n    }\n\n    handleAdhocTooltipJoyrideCallback(data, tooltipType){\n       const {action,index,status,type} = data;\n       if([STATUS.FINISHED, STATUS.SKIPPED].includes(status)){\n           var adhocTooltip = this.state.adhocTooltip;\n           if(tooltipType=='publicLink'){\n               adhocTooltip.publicLink.flag = false;\n           }\n           else if(tooltipType=='socialMedia'){\n               adhocTooltip.socialMedia.flag = false;\n           }\n           this.setState({adhocTooltip: adhocTooltip});\n       }\n   }\n\n   async addStoryToWall(){\n       let posts = this.props.posts;\n\n       if(!this.isStoryAlreadyAdded()){\n           posts.push({\n               title: this.props.title,\n               bp: this.props.bpId\n           });           \n           this.props.updatePosts(posts);\n       }\n   }\n\n   async removeStoryFromWall(){\n    let posts = this.props.posts;\n\n    if(this.isStoryAlreadyAdded()){\n        let newPosts = [];\n        for(let i=0; i<posts.length; i++){\n            if(posts[i].bp != this.props.bpId){\n                newPosts.push(posts[i]);\n            }\n        }        \n        this.props.updatePosts(newPosts);\n    }\n   }\n\n    renderShareScreen(){\n        let url = this.state.urlPrefix + this.props.bpId;\n        let gameUrl = this.state.gameUrlPrefix + this.props.bpId;\n        return (\n            <div>                \n                {this.state.didPublishBlocksInSession && this.state.didPublishImagesInSession?\n                    <div className=\"shareTooltipTextContainer\">\n                        <p className='contributeOptionText'>Click on the menu (top-left) and choose <a className='tooltip-selection' onClick={() => this.props.setNewVisualisation('contributions')}>Contribute</a> to resume working.</p>\n                    </div>\n                    :\n                    null\n                }\n\n                {this.isAnyOptionClicked()?\n                    <div style={{width:'50px',margin:'auto'}}>\n                        <Loader \n                            type=\"TailSpin\"\n                            color=\"#00BFFF\"\n                            height=\"50\"\t\n                            width=\"50\"\n                        />   \n                    </div>\n                    :\n                    <div style={{display:'flex', flexWrap:'wrap'}}> \n                        <div style={{marginBottom: '10px'}}>                           \n                            <Button\n                            variant=\"contained\" \n                            className=\"publishBlockprobeButton\"\n                            onClick={this.publishStory}>\n                                <div>Publish latest story</div>\n                            </Button>\n                        </div>\n                            {this.state.isBlockprobeAlreadyPublished?\n                                <div style={{marginBottom: '10px'}}>\n                                    <Button\n                                    variant=\"contained\" \n                                    className=\"unpublishBlockprobeButton\"\n                                    onClick={this.unpublishStory}>\n                                        <div>Unpublish story</div>\n                                    </Button>\n                                </div>\n                                :\n                                null\n                            }\n\n                            {this.state.isBlockprobeAlreadyPublished && \n                                !this.isStoryAlreadyAdded()?\n                                <div style={{marginBottom: '10px'}}>\n                                    <Button\n                                    variant=\"contained\" \n                                    className=\"addToWallButton\"\n                                    onClick={this.addStoryToWall}>\n                                        <div>Add story to my wall</div>\n                                    </Button>\n                                </div>\n                                :\n                                null\n                            }\n\n                            {this.state.isBlockprobeAlreadyPublished && \n                                this.isStoryAlreadyAdded()?\n                                <div style={{marginBottom: '10px'}}>\n                                    <Button\n                                    variant=\"contained\" \n                                    className=\"addToWallButton\"\n                                    onClick={this.removeStoryFromWall}>\n                                        <div>Remove story from my wall</div>\n                                    </Button>\n                                </div>\n                                :\n                                null\n                            }\n                    </div>\n                }   \n\n                {this.state.isBlockprobeAlreadyPublished?\n                <div>\n                    {this.state.didPublishBlocksInSession && this.state.didPublishImagesInSession?\n                        <div>\n                            <p className='publish-story-message'>Your latest story has been succesfully published!</p>\n                        </div>\n                        :\n                        null\n                    }                    \n                    <div className='share-section-heading'>\n                        Public link to visualize\n                        <a className='share-tooltips' onClick={(e)=>{this.showLocalTooltip('publicLink')}} >\n                                <Info style={{fontSize:'19px'}}/>\n                        </a>                    \n                        <Joyride\n                                    styles={{\n                                        options: {\n                                        arrowColor: '#e3ffeb',\n                                        beaconSize: '4em',\n                                        primaryColor: '#05878B',\n                                        backgroundColor: '#e3ffeb',\n                                        overlayColor: 'rgba(10,10,10, 0.4)',\n                                        width: 400,\n                                        zIndex: 1000,\n                                        }\n                                        }}\n                                        steps={this.state.adhocTooltip.publicLink.text}\n                                        run = {this.state.adhocTooltip.publicLink.flag}\n                                        callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'publicLink')}}                    \n                                        />                     \n                    </div>\n                    <div className=\"share-url-div\">\n                        <a href={url} target=\"_blank\" className=\"share-url\">{url}</a>\n                    </div>\n                    <div className='share-section-heading'>\n                        Public link to play game                     \n                    </div>\n                    <div className=\"share-url-div\">\n                        <a href={gameUrl} target=\"_blank\" className=\"share-url\">{gameUrl}</a>\n                    </div>                \n                    <div className='share-section-heading'>\n                        Share Link on Social Media\n                        <a className='share-tooltips tooltipSocialMedia' onClick={(e)=>{this.showLocalTooltip('socialMedia')}} >\n                                <Info style={{fontSize:'19px'}}/>\n                                <Joyride\n                                    styles={{\n                                        options: {\n                                        arrowColor: '#e3ffeb',\n                                        beaconSize: '4em',\n                                        primaryColor: '#05878B',\n                                        backgroundColor: '#e3ffeb',\n                                        overlayColor: 'rgba(10,10,10, 0.4)',\n                                        width: 400,\n                                        zIndex: 1000,\n                                        }\n                                        }}\n                                        steps={this.state.adhocTooltip.socialMedia.text}\n                                        run = {this.state.adhocTooltip.socialMedia.flag}\n                                        callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'socialMedia')}}                    \n                                        /> \n                        </a> \n                    </div>\n                    <div className='shareContainer'>\n                        <div className='shareIcons'>\n                            <FacebookShareButton                        \n                                children={<FacebookIcon round={true}/>} \n                                url={url} \n                                hashtag = '#blockprobe'/>\n                        </div>\n                        <div className='shareIcons'>\n                            <WhatsappShareButton\n                                children={<WhatsappIcon round={true}/>} \n                                url={url} \n                            />\n                        </div>\n                    </div>\n                </div>\n                    :\n                null\n                }       \n\n                \n            </div>\n        )\n\n    }\n\n    componentDidMount(){\n        let scope = this;\n        firebase.firestore().collection(\"public\").doc(this.props.bpId)\n                .collection(\"aggBlocks\").get().then((snapshot) => {\n                    \n                    if(Object.keys(snapshot.docs).length==0){\n                        scope.setState({\n                            isBlockprobeAlreadyPublished: false\n                        });\n                    }\n                    else{\n                        scope.setState({\n                            isBlockprobeAlreadyPublished: true\n                        });\n                    }                            \n                });\n    }\n\n    publishStory(){\n        var bTree = this.props.blockTree;\n        let allBlocks = Utils.getShortenedListOfBlockTree(bTree);\n        if(allBlocks.length>0){\n\n            firebase.firestore().collection(\"public\").doc(this.props.bpId)\n                .collection(\"aggBlocks\").get().then((snapshot) => {\n                    snapshot.forEach((doc) => {\n                        var ref = firebase.firestore().collection(\"public\").doc(this.props.bpId)\n                            .collection(\"aggBlocks\").doc(doc.id).delete();\n                    });\n                    for(var i=0; i<allBlocks.length; i++){\n                        firebase.firestore().collection('public').doc(this.props.bpId)\n                        .collection('aggBlocks').doc(String(i)).set(allBlocks[i]);        \n                    }\n        \n                }).then(\n                    this.setState({\n                        blocksUploaded: true,\n                        didPublishBlocksInSession: true\n                    })\n                );\n        }\n        else{\n            this.setState({\n                blocksUploaded: true,\n                didPublishBlocksInSession: true\n            });\n        }\n\n        //Add images\n        var imageMap = this.props.imageMapping;\n        let allImages = Utils.getShortenedListOfImages(imageMap);         \n        if(allImages.length>0){\n\n            //console.log(allImages);\n\n            firebase.firestore().collection(\"public\").doc(this.props.bpId)\n                .collection(\"images\").get().then((snapshot) => {\n                    snapshot.forEach((doc) => {\n                        var ref = firebase.firestore().collection(\"public\").doc(this.props.bpId)\n                            .collection(\"images\").doc(doc.id).delete();\n                    });\n                    for(var i=0; i<allImages.length; i++){\n                        firebase.firestore().collection('public').doc(this.props.bpId)\n                        .collection('images').doc(String(i)).set(allImages[i]);        \n                    }\n        \n                }).then(\n                    this.setState({\n                        imageUploaded: true,\n                        didPublishImagesInSession: true\n                    })\n                );\n\n        }\n        else{\n            this.setState({\n                imageUploaded: true,\n                didPublishImagesInSession: true\n            });\n        }\n\n        this.setState({isBlockprobeAlreadyPublished: true});\n    }\n\n    unpublishStory(){\n            this.setState({\n                unpublishingBlocks: true,\n                unpublishingImages: true\n            });\n            let scope = this;\n\n            firebase.firestore().collection(\"public\").doc(this.props.bpId)\n                .collection(\"aggBlocks\").get().then((snapshot) => {\n                    snapshot.forEach((doc) => {\n                        var ref = firebase.firestore().collection(\"public\").doc(this.props.bpId)\n                            .collection(\"aggBlocks\").doc(doc.id).delete();\n                    });        \n                }).then(\n                    scope.setState({\n                        unpublishingBlocks: false,\n                        didPublishBlocksInSession: false\n                    })\n                );\n            firebase.firestore().collection(\"public\").doc(this.props.bpId)\n                .collection(\"images\").get().then((snapshot) => {\n                    snapshot.forEach((doc) => {\n                        var ref = firebase.firestore().collection(\"public\").doc(this.props.bpId)\n                            .collection(\"images\").doc(doc.id).delete();\n                    }); \n        \n                }).then(\n                    scope.setState({\n                        unpublishingImages: false,\n                        didPublishImagesInSession: false\n                    })\n                );       \n\n                this.setState({isBlockprobeAlreadyPublished: false});\n    }\n\n    isAnyOptionClicked(){\n        if(this.state.unpublishingBlocks || this.state.unpublishingImages)\n            return true;\n        return false;\n    }\n\n    render(){\n        return (\n            <div>\n                {this.state.blocksUploaded && this.state.imageUploaded?\n                    this.renderShareScreen()\n                    :\n                    <div style={{width:'50px',margin:'auto'}}>\n                        <Loader \n                            type=\"TailSpin\"\n                            color=\"#00BFFF\"\n                            height=\"50\"\t\n                            width=\"50\"\n                        />   \n                    </div>\n                }                \n            </div>\n        );\n    }\n}\nexport default ShareBlockprobeComponent;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport  MultiSelectReact  from 'multi-select-react';\nimport Button from '@material-ui/core/Button';\nimport * as DbUtils from '../../../common/dbSvc';\nimport * as Const from '../../../common/constants';\n\nimport './LanguageSettings.css';\nimport { isNullOrUndefined } from 'util';\n\nclass LanguageSettingsComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n        //bpId, lang\n\n        this.state = {\n            firstLangSelectList: [],\n            selectedLang: String(this.props.lang),\n            currentLangLabel: null\n        }\n\n        this.generateLangLists = this.generateLangLists.bind(this);\n        this.canSubmit = this.canSubmit.bind(this);\n        this.submitLanguage = this.submitLanguage.bind(this);\n    }\n\n    firstLangClicked(entityList) {\n        var selectedEntity = null;\n        for(var i=0; i<entityList.length; i++){\n            if(entityList[i].value){\n                selectedEntity = entityList[i].id;    \n            }\n        }\n        this.setState({ \n            firstLangSelectList: entityList, \n            selectedLang: selectedEntity\n        });\n    }\n\n    firstSelectedBadgeClicked(entityList) {\n        var selectedEntity = null;\n        for(var i=0; i<entityList.length; i++){\n            if(entityList[i].value){\n                selectedEntity = entityList[i].id;\n            }\n        }\n\n        this.setState({ \n            firstLangSelectList: entityList, \n            selectedLang: selectedEntity\n        });\n    }\n\n    generateLangLists(){\n        var count = 1;\n        var firstEntityList = this.state.firstLangSelectList;\n        let selectedLangLabel = this.state.selectedLangLabel;\n        \n        for(let i=0; i<Const.langs.length; i++){\n            let langSelected =  false;\n            if(this.state.selectedLang == Const.langs[i].id){\n                langSelected = true;\n                selectedLangLabel = Const.langs[i].label;\n            }\n            firstEntityList.push({                \n                value: langSelected, \n                label: Const.langs[i].label,\n                id: Const.langs[i].id\n            }); \n        }\n               \n        this.setState({\n            firstLangSelectList: firstEntityList,\n            currentLangLabel: selectedLangLabel\n        });\n    }\n\n    componentDidMount(){\n        this.generateLangLists();\n    }\n\n    canSubmit(){\n        if(this.state.selectedLang != this.props.lang && !isNullOrUndefined(this.state.selectedLang))\n            return true;\n        return false;\n    }\n\n    submitLanguage(){\n        let firstEntityList = this.state.firstLangSelectList;\n        for(let i=0; i<firstEntityList.length; i++){\n            if(this.state.selectedLang == firstEntityList[i].id){\n                this.setState({\n                    currentLangLabel: firstEntityList[i].label\n                });\n                break;\n            }\n        }\n        DbUtils.setLanguage(this.props.bpId, this.state.selectedLang);\n    }\n\n    render(){\n\n        const selectedOptionsStyles = {\n            color: \"white\",\n            backgroundColor: \"rgb(117, 106, 214)\",\n            borderRadius:\"20px\",\n            fontSize:'0.6em',\n            padding:'10px',\n            maxWidth: '92%',\n            wordWrap: 'break-word'\n        };\n        const optionsListStyles = {\n            backgroundColor: \"darkcyan\",\n            color: \"white\",\n\n        };\n\n        return (\n            <div>\n                <div style={{marginLeft:'10px', marginTop:'1em'}}>\n                    <h3>Language settings</h3>\n                    {!isNullOrUndefined(this.state.currentLangLabel)?\n                        <p>Current language: {this.state.currentLangLabel}</p>\n                        :\n                        null\n                    }                    \n                    <div className='langpane-filter-container'>                \n                        <div className=\"langpane-dropdown-container\">\n                            <MultiSelectReact \n                            options={this.state.firstLangSelectList}\n                            optionClicked={this.firstLangClicked.bind(this)}\n                            selectedBadgeClicked={this.firstSelectedBadgeClicked.bind(this)}\n                            selectedOptionsStyles={selectedOptionsStyles}\n                            optionsListStyles={optionsListStyles} \n                            isSingleSelect={true}\n                            isTextWrap={false} \n                            />\n                            \n                        </div>     \n\n                        {this.canSubmit()?\n                            <Button\n                            variant=\"contained\" \n                            color=\"primary\" \n                            className=\"langPaneButton\" onClick={this.submitLanguage}>\n                                Save\n                            </Button>\n                            :\n                            null\n                        }\n                                    \n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default LanguageSettingsComponent;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport Textarea from 'react-textarea-autosize';\nimport Slider from '@material-ui/core/Slider';\nimport * as Utils from '../../common/utilSvc';\nimport * as Constants from '../../common/constants';\nimport * as DbUtils from '../../common/dbSvc';\nimport Loader from 'react-loader-spinner';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport LanguageSettingsComponent from './LanguageSettings/LanguageSettings';\nimport './BlockprobeSettings.css';\nimport { isNullOrUndefined } from 'util';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nconst styles = {\n    root: {\n      width: 300,\n    },\n    slider: {\n      padding: '22px 0px',\n    },\n  };\n\nclass BlockprobeSettingsComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n        //details, permit, uId, coUsers\n\n        this.state={\n            uIdHash:'',\n            shajs:null,\n            newCriterion: JSON.parse(JSON.stringify(props.details.criterion)),\n            step: 1,\n            min: 0,\n            viewerId: '',\n            contributorId: '',\n            creatorId: '',\n            prevCreatorId: '',\n            selectedUser: null,\n            creatorMessageId: null,\n            addingUser: false,\n            dialogType: null,\n            dialog: false,\n            userDialog: false,\n            dialogText:{\n                selected:{\n                    title: null,\n                    desc: null\n                }\n            }\n        }\n\n        var shajs = require('sha.js');\n        this.state.uIdHash = shajs('sha256').update(this.props.uId).digest('hex');\n        this.state.shajs = shajs;\n\n        this.changeCriterion = this.changeCriterion.bind(this);\n        this.renderBlockprobeSettings = this.renderBlockprobeSettings.bind(this);\n        this.modifyBlockProbeSettings = this.modifyBlockProbeSettings.bind(this);\n        this.renderAddViewers = this.renderAddViewers.bind(this);\n        this.renderAddContributors = this.renderAddContributors.bind(this);\n        this.renderAddCreators = this.renderAddCreators.bind(this);\n        this.renderAccountSettings = this.renderAccountSettings.bind(this);\n        this.renderUserList = this.renderUserList.bind(this);\n        this.renderUser = this.renderUser.bind(this);\n        this.renderUserDialog = this.renderUserDialog.bind(this);\n        this.clickUser = this.clickUser.bind(this);\n        this.removeUser = this.removeUser.bind(this);\n        this.getMessage = this.getMessage.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.toggleDialog = this.toggleDialog.bind(this);\n        this.performAction = this.performAction.bind(this);\n    }\n\n    toggleDialog(value, type){\n        let dialogText = this.state.dialogText;\n        if(type == 'exitBlockprobe'){\n            dialogText.selected.title = `Exit story \"${this.props.details.title}\"`;\n            dialogText.selected.desc = \"You will no longer be able to contribute or participate in building this story. Do you want to exit?\";\n        }\n        else if(type == 'user'){\n            let selectedUser = this.state.selectedUser;\n            let selectedUserId = null, role = null;\n            if(!isNullOrUndefined(selectedUser)){\n                selectedUserId = selectedUser.id;\n                role = selectedUser.role;\n            }\n            dialogText.selected.title = `${selectedUserId}`;\n            dialogText.selected.desc = null;\n            this.setState({\n                userDialog: value,\n                dialog: false,\n                dialogText: dialogText\n            });\n            return;\n        }\n        else if(type=='all'){\n \n        }\n        \n        this.setState({\n            dialog: value,\n            dialogType: type,\n            dialogText: dialogText\n        });\n    }\n\n    async performAction(value){\n        let type = this.state.dialogType;\n        if(type==\"exitBlockprobe\" && value){\n            let bId = this.props.bpId;\n            let userId = this.props.uId;\n            let userIdHash = this.state.uIdHash;\n\n            let ts = Date.now();\n            var softBlockprobeToRemove = {\n                active: true,\n                id: this.props.bpId,\n                isActive: true,\n                permit:\"EXIT\",\n                summary: this.props.details.summary,\n                title: this.props.details.title,\n                timestamp: ts\n            };\n            \n            if(!isNullOrUndefined(this.props.coUsers) && Object.keys(this.props.coUsers).length<=1){\n                let defunctBlockprobe = {\n                    id: bId,\n                    timestamp: ts\n                };\n                firebase.firestore().collection('defunctBlockprobes').doc(bId).set(defunctBlockprobe);                \n            }\n            firebase.database().ref('Blockprobes/'+ bId +'/users/'+userIdHash).remove();\n            await firebase.firestore().collection('Users').doc(userId)\n            .collection('blockprobes').doc(bId).set(softBlockprobeToRemove);\n        }\n\n        this.setState({\n            dialog: false\n        });\n    }\n\n    getMessage(type){\n        let id = this.state.prevCreatorId;\n        if(!isNullOrUndefined(type)){\n            if(type == 'alreadyPresent'){\n                return (\n                    <p className=\"messageUserTextGeneral\">User <span className=\"messageUserTextUid\">{id}</span> is already contributing to the story.</p>\n                );\n            }\n            else if(type == 'notExist'){\n                return (\n                    <p className=\"messageUserTextGeneral\">User <span className=\"messageUserTextUid\">{id}</span> does not exist.</p>\n                );\n            }\n            else if(type == 'alreadySent'){\n                return (\n                    <p className=\"messageUserTextGeneral\">User <span className=\"messageUserTextUid\">{id}</span> has already been invited.</p>\n                );\n            }\n            else if(type == 'sent'){\n                return (\n                    <p className=\"messageUserTextGeneral\">Invitation sent to <span className=\"messageUserTextUid\">{id}</span>.</p>\n                );\n            }\n            else if(type ==\"maxUserLimitReached\"){\n                return (\n                    <p className=\"messageUserTextGeneral\">Cannot add <span className=\"messageUserTextUid\">{id}</span> because each story has {Constants.maxUsers} contributors!</p>\n                );\n            }\n        }\n        return null;\n    }\n\n    changeCriterion = (event, value) => {\n        this.setState({ newCriterion: value });\n    };\n\n    modifyBlockProbeSettings(change, shouldModify){\n        var val = \"\";\n        if(shouldModify){\n            //Modify change in db\n\n            var permit = \"\";\n            if(change == \"viewer\"){\n                val = this.state.viewerId;\n                permit = \"VIEWER\";\n            }\n            else if(change == \"contributor\"){\n                val = this.state.contributorId;\n                permit = \"CONTRIBUTOR\";\n            }\n            else if(change == 'reviewer'){\n                permit = \"REVIEWER\";\n            }\n            else if(change == 'creator'){\n                val = this.state.creatorId.trim();\n                permit = \"CREATOR\";\n                this.setState({\n                    prevCreatorId: val,\n                    addingUser: true\n                });\n            }\n\n            if(change != 'criterion'){\n                \n                var softBlockprobeToAdd = {\n                    active: true,\n                    id: this.props.bpId,\n                    isActive: true,\n                    permit:permit,\n                    summary: this.props.details.summary,\n                    title: this.props.details.title,\n                    timestamp: 0\n                };\n                // console.log(softBlockprobeToAdd);\n\n                var scope = this;\n               let coUsers = this.props.coUsers;\n               let currMem = 1;\n               if(!isNullOrUndefined(coUsers)){\n                   currMem = Math.max(Object.keys(coUsers).length,1);\n               } \n               if(currMem < Constants.maxUsers){\n                    firebase.firestore().collection(\"Users\").doc(val).get().then(function(doc) {\n                        if(doc.exists){\n                            // console.log(\"Debug exists:\" + val);\n                            firebase.firestore().collection(\"Users\").doc(val).\n                            collection(\"blockprobes\").doc(scope.props.bpId).get().then(\n                                function(bpSnapshot){\n                                    if(bpSnapshot.exists && bpSnapshot.data().permit!=\"EXIT\"){\n\n                                        // console.log(\"Blockprobe exist for user\");\n\n                                    /*  var existingBlockprobe = bpSnapshot.data();\n                                        softBlockprobeToAdd.timestamp = existingBlockprobe.timestamp;\n                                        if(change == \"contributor\" \n                                            && existingBlockprobe.permit == \"VIEWER\"){\n                                                \n                                                firebase.firestore().collection(\"Users\").\n                                                doc(val).collection(\"blockprobes\").\n                                                    doc(scope.props.bpId).set(softBlockprobeToAdd);\n                                            }\n                                        else if(change == \"reviewer\" && \n                                            !(existingBlockprobe.permit != \"PRIVILEGED\")){\n\n                                                firebase.firestore().collection(\"Users\").\n                                                doc(val).collection(\"blockprobes\").\n                                                    doc(scope.props.bpId).set(softBlockprobeToAdd);\n                                            }\n                                            */\n                                                \n                                            scope.setState({\n                                                creatorMessageId: 'alreadyPresent',\n                                                addingUser: false\n                                            });\n                                            //console.log(\"User already present\");\n\n                                    }\n                                    else{\n\n                                        // console.log(\"adding blockprobe first time\");\n\n                                        firebase.firestore().collection(\"Users\").\n                                            doc(val).collection(\"notifications\").\n                                                doc(scope.props.bpId).get().then(\n                                                    function(notifSnapshot){\n                                                        if(notifSnapshot.exists){\n                                                            //notification sent\n                                                            scope.setState({\n                                                                creatorMessageId: 'alreadySent',\n                                                                addingUser: false\n                                                            });\n                                                            //console.log(\"User already sent\");\n                                                        }\n                                                        else{\n                                                            firebase.firestore().collection(\"Users\").\n                                                                doc(val).collection(\"notifications\").\n                                                                    doc(scope.props.bpId).set(softBlockprobeToAdd);\n\n                                                            let userDetails = {\n                                                                id: val,\n                                                                role: 'INVITED'\n                                                            }\n                                                            \n                                                            // console.log('Blockprobes/'+ blockprobeId +'/isActive/');\n                                                            let shaVal = scope.state.shajs('sha256').update(val).digest('hex');\n                                                            firebase.database().ref('Blockprobes/'+ scope.props.bpId +'/users/'+shaVal).set(userDetails); \n                                                            scope.setState({\n                                                                creatorMessageId: 'sent',\n                                                                addingUser: false\n                                                            });\n                                                        }\n                                                    }\n                                                )\n\n                                        /*if(change != \"creator\"){\n                                            firebase.firestore().collection(\"Users\").\n                                            doc(val).collection(\"blockprobes\").\n                                                doc(scope.props.bpId).set(softBlockprobeToAdd);\n                                        }\n                                        else{\n                                            firebase.firestore().collection(\"Users\").\n                                            doc(val).collection(\"notifications\").\n                                                doc(scope.props.bpId).set(softBlockprobeToAdd)\n                                        }*/\n                                    }\n                                }\n                            )\n                        }\n                        else{\n                            //console.log(\"User does not exist\");\n                            scope.setState({\n                                creatorMessageId: 'notExist',\n                                addingUser: false\n                            });\n                        }\n                    });\n               }\n               else{\n                scope.setState({\n                    creatorMessageId: 'maxUserLimitReached',\n                    addingUser: false\n                });\n               }\n               \n                \n            }\n            else if(change == 'criterion'){\n\n                var newDetails = JSON.parse(JSON.stringify(this.props.details));\n\n                newDetails['criterion'] = this.state.newCriterion;\n\n\n                // console.log(newDetails);\n\n                firebase.firestore().collection('Blockprobes').doc(this.props.bpId).set(newDetails);\n            }\n\n        }\n        \n\n        if(change == \"viewer\"){\n            this.setState({viewerId: ''});\n        }\n        else if(change == \"contributor\"){\n            this.setState({contributorId: ''});\n        }\n        else if(change == \"creator\"){\n            this.setState({creatorId: ''});\n        }\n        else if(change == \"criterion\"){\n\n            if(!shouldModify){\n                val = this.props.details.criterion;\n            }\n            else{\n                val = this.state.newCriterion;\n            }\n\n            this.setState({\n                newCriterion: val\n            });\n        }\n    }\n\n    renderBlockprobeSettings(){\n\n        const { classes } = this.props;\n\n        if(this.props.permit == 'CREATOR'){\n            return (\n                <div style={{marginLeft:'10px', marginBottom:'5em'}}>\n                    <h3>Upvote Criteria</h3>\n                    <h5>Number of reviewer upvotes for any block to accepted. ({this.state.newCriterion})</h5>\n                    <div style={{width:'30%', marginLeft:'15px'}}>\n                        <Slider\n                            value={this.state.newCriterion}\n                            min={0}\n                            max={this.props.details.reviewers.length}\n                            onChange={this.changeCriterion}\n                            step = {this.state.step}\n                            />\n                    </div>\n                    {this.state.newCriterion!=this.props.details.criterion?\n                        <div className=\"blockprobe-settings-criterion-options-container\">\n                            <Button \n                            variant=\"contained\"\n                            className=\"saveBlockProbeSettingsButton\" \n                            onClick={(e) => this.modifyBlockProbeSettings(\"criterion\",true)}>\n                                <div>Confirm settings</div>\n                            </Button>\n                            <Button \n                            variant=\"contained\"\n                            className=\"cancelBlockProbeSettingsButton\" \n                            onClick={(e) => this.modifyBlockProbeSettings(\"criterion\",false)}>\n                                <div>Cancel</div>\n                            </Button>\n                        </div>\n                        :\n                        null\n                    }\n                </div>\n            );\n        }\n        return null;\n    }\n\n    handleChange(event, type) {\n\n        var shouldUpdate = false;\n        let str = event.target.value;\n        if(type=='creator' && Utils.shouldUpdateText(str,['\\n','\\t'])){\n            shouldUpdate = true;\n        }\n\n        if(shouldUpdate){\n            \n            if(type==\"viewer\"){\n                var id = event.target.value;\n                this.setState({viewerId: id});\n            }\n            else if(type == \"contributor\"){\n                var id = event.target.value;\n                this.setState({contributorId: id});\n            }\n            else if(type==\"creator\"){\n                let id = event.target.value;\n                this.setState({\n                    creatorId: id,\n                    creatorMessageId: null\n                });\n            }\n\n        }\n      }\n\n      renderAddContributors(){\n          if(this.props.permit == \"PRIVILEGED\" || this.props.permit == \"CREATOR\"){\n            return (\n                <div style={{marginLeft:'10px', marginTop:'1em'}}>\n                    <h3>Add Contributors</h3>\n                    <form>\n                    <label>\n                        <TextField \n                            type=\"text\"\n                            variant=\"outlined\"\n                            multiline\n                            placeholder = \"Phone number\"\n                            value={this.state.contributorId}\n                            onChange={(e) => { this.handleChange(e,\"contributor\")}}\n                            rowsMax=\"1\"\n                            rows=\"1\"\n                            style={{\n                                background: 'white',\n                                marginTop:'6px',\n                                marginBottom:'6px',\n                                width:'30%'\n                                }}/>\n                    </label>\n                    </form>\n                    {this.state.contributorId!=''?\n                            <div className=\"blockprobe-settings-criterion-options-container\">\n                                <Button \n                                variant=\"contained\"\n                                className=\"saveBlockProbeSettingsButton\" \n                                style={{marginTop:'1em'}}\n                                onClick={(e) => this.modifyBlockProbeSettings(\"contributor\",true)}>\n                                    <div>Confirm contributor</div>\n                                </Button>\n                                <Button \n                                variant=\"contained\"\n                                className=\"cancelBlockProbeSettingsButton\" \n                                style={{marginTop:'1em'}}\n                                onClick={(e) => this.modifyBlockProbeSettings(\"contributor\",false)}>\n                                    <div>Cancel</div>\n                                </Button>\n                            </div>\n                            :\n                            null\n                        }           \n                </div>\n                )\n                    }\n\n            return null;        \n    }\n\n    renderAddViewers(){\n        return (\n            <div style={{marginLeft:'10px', marginTop:'1em'}}>\n                <h3>Add Viewers</h3>\n                <form>\n                <label>\n                    <TextField \n                        type=\"text\"\n                        variant=\"outlined\"\n                        multiline\n                        placeholder = \"Phone number\"\n                        value={this.state.viewerId}\n                        onChange={(e) => { this.handleChange(e,\"viewer\")}}\n                        rowsMax=\"1\"\n                        rows=\"1\"\n                        style={{\n                            background: 'white',\n                            marginTop:'6px',\n                            marginBottom:'6px',\n                            width:'30%'\n                            }}/>\n                 </label>\n                 </form>\n                 {this.state.viewerId!=''?\n                        <div className=\"blockprobe-settings-criterion-options-container\">\n                            <Button \n                            variant=\"contained\"\n                            className=\"saveBlockProbeSettingsButton\" \n                            style={{marginTop:'1em'}}\n                            onClick={(e) => this.modifyBlockProbeSettings(\"viewer\",true)}>\n                                <div>Confirm viewer</div>\n                            </Button>\n                            <Button \n                            variant=\"contained\"\n                            className=\"cancelBlockProbeSettingsButton\" \n                            style={{marginTop:'1em'}}\n                            onClick={(e) => this.modifyBlockProbeSettings(\"viewer\",false)}>\n                                <div>Cancel</div>\n                            </Button>\n                        </div>\n                        :\n                        null\n                    }           \n            </div>\n        )\n    }\n\n    renderAddCreators(){\n        return (\n            <div>\n                <div style={{marginLeft:'10px', marginTop:'1em'}}>\n                    <h3>Add Users</h3>\n                    <form>\n                    <label >\n                        <div className=\"settings-textfield-container\">\n                            <TextField \n                            type=\"text\"\n                            variant=\"outlined\"\n                            multiline\n                            placeholder = \"Email or phonenumber\"\n                            value={this.state.creatorId}\n                            onChange={(e) => { this.handleChange(e,\"creator\")}}\n                            rowsMax=\"1\"\n                            rows=\"1\"\n                            style={{\n                                background: 'white',\n                                marginTop:'6px',\n                                marginBottom:'6px',\n                                width: '100%'\n                                }}/>\n                        </div>                        \n                    </label>\n                    </form>\n                    {this.getMessage(this.state.creatorMessageId)}\n                    {this.state.creatorId.trim()!='' && !this.state.addingUser?\n                            <div className=\"blockprobe-settings-criterion-options-container\">\n                                <Button \n                                variant=\"contained\"\n                                className=\"saveBlockProbeSettingsButton\" \n                                style={{marginTop:'1em'}}\n                                onClick={(e) => this.modifyBlockProbeSettings(\"creator\",true)}>\n                                    <div>Confirm</div>\n                                </Button>\n                                <Button\n                                variant=\"contained\" \n                                className=\"cancelBlockProbeSettingsButton\" \n                                style={{marginTop:'1em'}}\n                                onClick={(e) => this.modifyBlockProbeSettings(\"creator\",false)}>\n                                    <div>Cancel</div>\n                                </Button>\n                            </div>\n                            :\n                            null\n                        }\n                    {this.state.addingUser?\n                        <div style={{width:'50px'}}>\n                            <Loader \n                            type=\"TailSpin\"\n                            color=\"#00BFFF\"\n                            height=\"50\"\t\n                            width=\"50\"\n                            /> \n                        </div>\n                        :\n                        null\n                    }           \n                </div>\n            </div>\n        )\n    }\n\n    async removeUser(){\n        let user = this.state.selectedUser;\n        if(!isNullOrUndefined(user.role) && user.role==\"INVITED\"){\n            //console.log('remove invitation');\n\n            let notification = {\n                id: this.props.bpId,\n                permit: 'INVITED'\n            }\n            let userId = user.id;\n            let uIdHash = this.state.shajs('sha256').update(userId).digest('hex');\n            //console.log(notification);\n            //console.log(userId);\n            //console.log(uIdHash);\n            await DbUtils.removeInviteStoryNotification(notification,userId,uIdHash);\n            await DbUtils.removeNotification(notification,userId);\n\n            this.setState({\n                userDialog: false\n            });\n        }\n    }\n\n    async clickUser(user){\n        await this.setState({\n            selectedUser: user\n        });\n        this.toggleDialog(true,'user');\n    }\n\n    renderUser(user){\n        return(\n            <ListItem button\n                onClick={() => this.clickUser(user)}>                \n                <ListItemText\n                    primary={user.id}\n                    secondary={user.role}                    \n                    />                \n            </ListItem>\n        )\n    }\n\n    renderUserList(coUsers){\n        let renderStr = null;\n        if(!isNullOrUndefined(coUsers)){\n            renderStr = Object.keys(coUsers).map((key) => {\n                let user = coUsers[key];\n                return this.renderUser(user);\n            });\n        }\n        return (\n            <div style={{marginLeft:'10px', marginTop:'1em'}}>\n                <h3>User list</h3>\n                <div className=\"userListContainer\">\n                    <List>\n                        {renderStr}\n                    </List>\n                </div>\n            </div>\n        )\n\n    }\n\n    renderAccountSettings(){\n        return (\n            <div>\n                <div style={{marginLeft:'10px', marginTop:'1em'}}>\n                    <h3 style={{marginBotton:'0.5em !important'}}>Account settings</h3>\n                    <div className=\"blockprobe-settings-criterion-options-container\">\n                        <Button\n                            variant=\"contained\"  \n                            className=\"saveBlockProbeSettingsButton\" \n                            onClick={(e) => this.toggleDialog(true,\"exitBlockprobe\")}>\n                            <div>Exit story</div>\n                        </Button>                                \n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderUserDialog(){\n        let selectedUser = this.state.selectedUser;\n        return (\n            <Dialog\n                    open={this.state.userDialog}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    onClose={() => this.toggleDialog(false,'user')}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\">\n                        <DialogTitle id=\"alert-dialog-slide-title\">{this.state.dialogText.selected.title}</DialogTitle>\n                        <DialogContent>\n                        <DialogContentText id=\"alert-dialog-slide-description\">\n                            {this.state.dialogText.selected.desc}\n                        </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                        {!isNullOrUndefined(selectedUser) && selectedUser.role == \"INVITED\"?\n                            <Button onClick={() => this.removeUser()} color=\"primary\">\n                                Delete\n                            </Button>\n                            :\n                            null\n                        }                        \n                        <Button onClick={() => this.toggleDialog(false,'user')} color=\"primary\">\n                            Cancel\n                        </Button>                        \n                        </DialogActions>\n                </Dialog>\n        );\n    }\n\n\n    //{this.renderBlockprobeSettings()}\n    //{this.renderAddContributors()}\n    //{this.renderAddViewers()}\n    render(){\n        return (\n            <div>                \n                {this.renderUserList(this.props.coUsers)}\n                <LanguageSettingsComponent\n                    lang={this.props.lang}\n                    bpId={this.props.bpId}\n                />\n                {this.renderAddCreators()}\n                {this.renderAccountSettings()}\n                {this.renderUserDialog()}\n                <Dialog\n                    open={this.state.dialog}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    onClose={() => this.toggleDialog(false,'all')}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\">\n                        <DialogTitle id=\"alert-dialog-slide-title\">{this.state.dialogText.selected.title}</DialogTitle>\n                        <DialogContent>\n                        <DialogContentText id=\"alert-dialog-slide-description\">\n                            {this.state.dialogText.selected.desc}\n                        </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                        <Button onClick={() => this.performAction(true)} color=\"primary\">\n                            Yes\n                        </Button>\n                        <Button onClick={() => this.performAction(false)} color=\"primary\">\n                            No\n                        </Button>\n                        <Button onClick={() => this.toggleDialog(false,'all')} color=\"primary\">\n                            Cancel\n                        </Button>                        \n                        </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n\n\n}\nexport default BlockprobeSettingsComponent;","import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done'\nimport Textarea from 'react-textarea-autosize';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport Loader from 'react-loader-spinner';\nimport ImageUploader from 'react-images-upload';\nimport imageCompression from 'browser-image-compression';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport Img from 'react-image';\nimport './DraftBlockEvidenceView.css';\nimport { isNullOrUndefined } from 'util';\n\nclass DraftBlockEvidenceView extends React.Component {\n\n    constructor(props){\n        super(props);\n        //props: isClicked; updateEvidence, index; evidence: supportingDetails, evidenceLink;\n\n        //console.log('Here');\n        //console.log(this.props.evidence);\n        this.state={\n            isClicked: JSON.parse(JSON.stringify(this.props.isClicked)),\n            newEvidence: JSON.parse(JSON.stringify(this.props.evidence)),\n            isImage: false,\n            isImageUploading: false,\n            image: null\n        }\n        \n        this.getEvidenceViewOnly = this.getEvidenceViewOnly.bind(this);\n        this.clickEvidenceNotInDraft = this.clickEvidenceNotInDraft.bind(this);\n        this.getEvidenceDraft = this.getEvidenceDraft.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.removeEvidence = this.removeEvidence.bind(this);\n        this.updateEvidence = this.updateEvidence.bind(this);\n        this.cancelEvidenceAction = this.cancelEvidenceAction.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n        this.uploadEvidenceImageToDb = this.uploadEvidenceImageToDb.bind(this);\n        this.deleteEvidenceImageFromDb = this.deleteEvidenceImageFromDb.bind(this);\n    }\n\n    clickEvidenceNotInDraft(){\n        this.setState({\n            isClicked: true,\n            newEvidence: JSON.parse(JSON.stringify(this.props.evidence))\n        });\n    }\n\n    cancelEvidenceAction(){\n        this.setState({\n            isClicked: false\n        });\n    }\n\n    async removeEvidence(){\n        // console.log(this.state.newEvidence);\n        // console.log(this.props.evidence);\n        this.props.updateEvidence(this.props.evidence, null, false, true, this.props.index);\n        this.setState({\n            isClicked: false\n        });\n    }\n\n    async updateEvidence(){\n        this.props.updateEvidence(this.props.evidence, this.state.newEvidence, true, false, this.props.index);\n        this.setState({\n            isClicked: false,\n            image: null\n        });\n    }\n\n    handleChange(event, type) {\n        var shouldUpdate = true;\n        var lastChar = event.target.value[event.target.value.length-1];\n        if(lastChar=='\\n' || lastChar=='\\t'){\n            shouldUpdate=false;\n        }\n        //TODO Handle change here too!\n\n        if(shouldUpdate){\n            var evidence = this.state.newEvidence;\n            if(type==\"details\"){\n                evidence.supportingDetails = event.target.value;\n                this.setState({newEvidence: evidence});\n            }\n            else if(type==\"link\"){\n                evidence.evidenceLink = event.target.value;\n                this.setState({newEvidence: evidence});\n            }\n\n        }\n      }\n\n      async onDrop(picture) {\n        if(picture.length > 0)\n        {\n            let latestPicture = picture[picture.length-1];\n            \n\n            var options = {\n                maxSizeMB: 0.06,\n                maxWidthOrHeight: 900,\n                useWebWorker: true\n              }\n              try {\n                let compressedFile = await imageCompression(latestPicture, options);\n                this.setState({\n                    image: compressedFile\n                })\n              } catch (error) {\n\n              }\n        }\n    }\n\n    async deleteEvidenceImageFromDb(path){       \n        /*\n          if(this.props.evidence.isImage && this.props.evidence.imgPath){\n            await this.deleteEvidenceImageFromDb(this.props.evidence.imgPath);\n        }\n        */\n        try{\n            this.setState({\n                isImageUploading: true\n            });\n            console.log(path);\n            let pathRef = firebase.storage().ref(path);\n            await pathRef.delete();\n            this.setState({\n                isImageUploading: false\n            });\n        }\n        catch{\n            this.setState({\n                isImageUploading: false\n            });\n        }\n    }\n\n    async uploadEvidenceImageToDb(){\n         /*\n          if(this.props.evidence.isImage && this.props.evidence.imgPath){\n            await this.deleteEvidenceImageFromDb(this.props.evidence.imgPath);\n        }\n        await this.uploadEvidenceImageToDb();\n\n                            <Tab>Image</Tab>\n\n                    <TabPanel>\n                        <div>\n                        <ImageUploader\n                                    buttonText='Choose image'\n                                    onChange={this.onDrop}\n                                    singleImage={true}\n                                    imgExtension={['.jpg', '.gif', '.png', '.gif']}\n                                    maxFileSize={5242880}\n                                />\n                        </div>\n                    </TabPanel>\n        */\n        let scope = this;\n        let latestPicture = this.state.image;\n\n        let newEvidence = this.state.newEvidence;\n        if(!isNullOrUndefined(latestPicture)){            \n            let path = this.props.bId + '/' + 'evidences/' + this.props.uIdHash + \"_\" + String(Date.now());\n            let pathRef = firebase.storage().ref(path);\n            this.setState({\n                isImageUploading: true\n            });\n            try{\n                await pathRef.put(latestPicture);\n    \n                let url = await pathRef.getDownloadURL();\n        \n                newEvidence.evidenceLink = url; \n                newEvidence['isImage'] = true;   \n                newEvidence['imgPath'] = path;   \n                               \n                scope.setState({\n                            isImageUploading: false,\n                            newEvidence: newEvidence\n                });\n            }\n            catch(error){\n                scope.setState({isImageUploading: false});\n            }        \n        }\n        else{\n            if(newEvidence){\n                delete newEvidence['isImage'];\n                delete newEvidence['imgPath'];\n            }\n        }\n    }\n\n\n    getEvidenceDraft(){\n        return(\n            <div>\n            \n                <Tabs style={{marginTop:'10px', fontSize:'15px'}}>\n                    <TabList>\n                            <Tab>Url</Tab>\n                    </TabList>\n\n                    <TabPanel>\n                    <form>\n                        <label>\n                        <Textarea \n                        type=\"text\"\n                        placeholder=\"Paste link to evidence here.\"\n                        value={this.state.newEvidence.evidenceLink}\n                        onChange={(e) => { this.handleChange(e,\"link\")}}\n                        maxRows=\"3\"\n                        minRows=\"2\"\n                        style={{\n                            background: 'white',\n                            borderWidth:'2px', \n                            borderStyle:'solid', \n                            borderColor:'darkgrey',\n                            paddingTop:'6px',\n                            paddingBottom:'6px',\n                            width:'60%'\n                            }}/>\n                        </label>\n                    </form>\n                    </TabPanel>                    \n                </Tabs>\n                <form>\n                <label>\n                        <Textarea \n                        type=\"text\"\n                        placeholder=\"Enter relevant details about evidence here.\"\n                        value={this.state.newEvidence.supportingDetails}\n                        onChange={(e) => { this.handleChange(e,\"details\")}}\n                        maxRows=\"5\"\n                        minRows=\"3\"\n                        style={{\n                            background: 'white',\n                            borderWidth:'2px', \n                            borderStyle:'solid', \n                            borderColor:'darkgrey',\n                            paddingTop:'6px',\n                            paddingBottom:'6px',\n                            width:'60%'\n                            }}/>    \n                </label>\n                </form>\n\n                <div className='draft-evidence-button-container'>\n                    <button\n                    className=\"updateEvidenceButton\"\n                    onClick={this.updateEvidence}>\n                        <div>Confirm evidence</div>\n                    </button>\n                    <button\n                    className=\"removeEvidenceButton\"\n                    onClick={this.removeEvidence}>\n                        <div>Remove evidence</div>\n                    </button>\n                    <button\n                    className=\"removeEvidenceButton\"\n                    onClick={this.cancelEvidenceAction}>\n                        <div>Cancel</div>\n                    </button>\n                </div>\n\n            </div>\n        );\n    }\n\n    getEvidenceViewOnly(){\n\n        return(\n            <ListItem button \n                    onClick={() => { this.clickEvidenceNotInDraft()}}\n                    style={{width:'100%', minHeight:'70px', borderTop:'1px solid darkgrey'}}\n                    >\n                    <ListItemText\n                    style={{overflow:'hidden'}} \n                    primary={this.props.evidence.evidenceLink} \n                    secondary={this.props.evidence.supportingDetails}/>\n            </ListItem>        \n        );\n    }\n\n    render(){\n        return(\n            <div>\n                {this.state.isClicked?\n                    <div>\n                        {this.state.isImageUploading?\n                             <div style={{margin:'auto',width:'50px'}}>\n                                <Loader \n                                type=\"TailSpin\"\n                                color=\"#00BFFF\"\n                                height=\"50\"\t\n                                width=\"50\"\n                                /> \n                            </div>\n                            :\n                            this.getEvidenceDraft()\n                        }\n                    </div>\n                    :\n                    this.getEvidenceViewOnly()    \n            }\n            </div>\n        )\n    }\n\n}\nexport default DraftBlockEvidenceView;","import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneIcon from '@material-ui/icons/Done'\nimport Textarea from 'react-textarea-autosize';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport Loader from 'react-loader-spinner';\nimport ImageUploader from 'react-images-upload';\nimport imageCompression from 'browser-image-compression';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport Img from 'react-image';\nimport * as Utils from '../../common/utilSvc';\nimport './DraftBlockNumberView.css';\nimport { isNullOrUndefined } from 'util';\n\nclass DraftBlockNumberView extends React.Component {\n\n    constructor(props){\n        super(props);\n        //isClicked, index, number, updateNumber\n\n        this.state={\n            isClicked: JSON.parse(JSON.stringify(this.props.isClicked)),\n            newNumber: JSON.parse(JSON.stringify(this.props.number))\n        }\n\n        this.renderViewOnlyNumber = this.renderViewOnlyNumber.bind(this);\n        this.getNumberDraft = this.getNumberDraft.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n        this.clickNumberNotInDraft = this.clickNumberNotInDraft.bind(this);\n        this.cancelNumber = this.cancelNumber.bind(this);\n        this.removeNumber = this.removeNumber.bind(this);\n        this.updateNumber = this.updateNumber.bind(this);\n    }\n\n    renderViewOnlyNumber(){\n        return(\n            <div className=\"draftBlockNumberViewDiv\">\n                <span className=\"draftBlockNumberViewContainer\" onClick={this.clickNumberNotInDraft}>\n                    <span className=\"draftBlockNumberViewKey\">{this.props.number.key}:   </span>\n                    <b className=\"draftBlockNumberViewValue\">{this.props.number.value}</b>\n                </span>\n            </div>\n        )\n    }\n\n    handleChange(event, type) {\n        var shouldUpdate = true;\n        \n        //TODO Handle change here too!\n        let str = event.target.value;\n        if(!Utils.shouldUpdateText(str, ['\\n','\\t'])){\n            shouldUpdate = false;\n        }\n        if(shouldUpdate && type == 'number' && !Utils.isNumber(str)){\n            shouldUpdate = false;\n        }\n        if(shouldUpdate){\n            var number = this.state.newNumber;\n            if(type==\"key\"){\n                number.key = event.target.value;\n                this.setState({newNumber: number});\n            }\n            else if(type==\"number\"){\n                number.value = event.target.value;\n                this.setState({newNumber: number});\n            }\n        }\n      }\n\n    clickNumberNotInDraft(){\n        this.setState({\n            isClicked: true,\n            newNumber: JSON.parse(JSON.stringify(this.props.number))\n        });\n    }\n\n    cancelNumber(){\n        if(!isNullOrUndefined(this.props.number) && this.props.number.key == null){\n            this.removeNumber();\n        }\n        else{\n            this.setState({\n                isClicked: false\n            });    \n        }\n    }\n\n    async removeNumber(){\n        // console.log(this.state.newEvidence);\n        // console.log(this.props.evidence);\n        this.props.updateNumber(this.props.number, null, false, true, this.props.index);\n        this.setState({\n            isClicked: false\n        });\n    }\n\n    async updateNumber(){\n        let newNumber = this.state.newNumber;\n        newNumber.value = parseFloat(newNumber.value);\n        if(isNaN(newNumber.value))\n            newNumber.value = 0;        \n        newNumber.key = Utils.makeFirstLetterUppercase(newNumber.key);\n        if(newNumber.key.length == 0)\n            newNumber.key = 'Unknown key';\n        this.props.updateNumber(this.props.number, this.state.newNumber, true, false, this.props.index);\n        this.setState({\n            isClicked: false,\n            newNumber: newNumber\n        });\n    }\n\n    getNumberDraft(){\n        return(\n            <div>           \n                <div class='draft-number-edit-container'>\n                    <form className=\"draft-number-key-edit\">\n                        <label>\n                                <Textarea \n                                type=\"text\"\n                                placeholder=\"Key\"\n                                value={this.state.newNumber.key}\n                                onChange={(e) => { this.handleChange(e,\"key\")}}\n                                minRows=\"1\"\n                                style={{\n                                    background: 'white',\n                                    borderWidth:'2px', \n                                    borderStyle:'solid', \n                                    borderColor:'darkgrey',\n                                    paddingTop:'6px',\n                                    paddingBottom:'6px',\n                                    width:'100%'\n                                    }}/>    \n                        </label>\n                    </form>\n                    <form className=\"draft-number-value-edit\">\n                        <label>\n                                <Textarea \n                                type=\"text\"\n                                placeholder=\"Number\"\n                                value={this.state.newNumber.value}\n                                onChange={(e) => { this.handleChange(e,\"number\")}}\n                                minRows=\"1\"\n                                style={{\n                                    background: 'white',\n                                    borderWidth:'2px', \n                                    borderStyle:'solid', \n                                    borderColor:'darkgrey',\n                                    paddingTop:'6px',\n                                    paddingBottom:'6px',\n                                    width:'100%'\n                                    }}/>    \n                        </label>\n                    </form>\n                </div>\n\n                <div className='draft-number-button-container'>\n                    <button\n                    className=\"updateNumberButton\"\n                    onClick={this.updateNumber}>\n                        <div>Confirm</div>\n                    </button>\n                    <button\n                    className=\"removeNumberButton\"\n                    onClick={this.removeNumber}>\n                        <div>Remove</div>\n                    </button>\n                    <button\n                    className=\"removeNumberButton\"\n                    onClick={this.cancelNumber}>\n                        <div>Cancel</div>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    render(){\n        return(\n            <div>\n                {this.state.isClicked?\n                    <div>\n                        {this.getNumberDraft()}\n                    </div>\n                    :\n                    <div>\n                        {this.renderViewOnlyNumber()}\n                    </div>\n                }\n            </div>\n        )\n    }\n}\nexport default DraftBlockNumberView;","import React, { Component } from 'react';\nclass Checkbox extends React.Component {\n    constructor(props) {\n      //toggleChange, value, isChecked, label\n      super(props);\n    }\n    render() {\n      return (\n        <label\n            style={{fontSize:'15px', marginRight:'25px'}}\n            >\n          <input type=\"checkbox\"\n            checked={this.props.isChecked}\n            onChange={() => {this.props.toggleChange(this.props.value)}}\n          />\n          {this.props.label}\n         </label>\n      );\n    }\n  }\n  export default Checkbox;\n  ","import React, { Component } from 'react';\nimport Textarea from 'react-textarea-autosize';\nimport  MultiSelectReact  from 'multi-select-react';\nimport TextField from '@material-ui/core/TextField';\nimport  * as Utils from '../../../common/utilSvc'; \nimport './MonthPicker.css';\nimport { isNull, isNullOrUndefined } from 'util';\n\nclass MonthPicker extends React.Component {\n\n    selectedOptionsStyles = {\n        color: \"white\",\n        backgroundColor: \"rgb(117, 106, 214)\",\n        borderRadius:\"20px\",\n        fontSize:'0.6em',\n        padding:'5px',\n        maxWidth: '92%',\n        wordWrap: 'break-word'\n    };\n    optionsListStyles = {\n        backgroundColor: \"darkcyan\",\n        color: \"white\",\n\n    };\n\n    constructor(props) {\n      //updateMonth,date\n      super(props);\n      this.state={\n        monthList: [],\n        newDate: JSON.parse(JSON.stringify(props.date))\n      }\n      this.monthClicked = this.monthClicked.bind(this);\n      this.selectedMonthBadgeClicked = this.selectedMonthBadgeClicked.bind(this);\n      this.validateMonth = this.validateMonth.bind(this);\n      this.generateMonthList = this.generateMonthList.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n    }\n\n    validateMonth(monthList){\n        let selectedMonth = -1;\n        for(let i=1; i<monthList.length; i++){\n            if(monthList[i].value == true)\n            {\n                selectedMonth = monthList[i].id;\n                break;\n            }\n        }\n        let newDate = this.state.newDate;\n        if(selectedMonth == -1){\n            let prevMonth  = newDate.month;\n            selectedMonth = null;\n            monthList[0].value = true;\n        }\n        newDate.month = selectedMonth;      \n        this.setState({\n            monthList: monthList,\n            newDate: newDate\n        });\n        this.props.onChange(this.state.newDate);\n    }\n\n    handleChange(event, type) {\n\n        var shouldUpdate = true;\n        var lastChar = event.target.value[event.target.value.length-1];\n        if(lastChar=='\\n' || lastChar=='\\t'){\n            shouldUpdate=false;\n        }\n        if((!Utils.validateNumber(event.target.value) || event.target.value.length > 8) && type=='year'){\n            shouldUpdate = false;\n        }\n\n        if(shouldUpdate){\n            if(type == 'year'){\n                let date = this.state.newDate;\n                date.year = Number(event.target.value);\n                this.setState({\n                    newDate:date\n                });\n                this.props.onChange(this.state.newDate);\n            }\n            \n        }\n      }\n\n    generateMonthList(){\n        let months = ['Jan','Feb','March','April','May','June','July','Aug','Sep','Oct','Nov','Dec'];\n        let monthList = [];\n        monthList.push({\n            id:-1, value:false, label:'None'   \n        });\n        for(let i=0; i<12; i++){\n            let value = false;\n            if(this.props.date.month == i)\n                value = true;\n            monthList.push({\n                id:i, value:value, label:months[i]   \n            });\n        }\n        if(isNullOrUndefined(this.props.date.month)){\n            monthList[0].value = true;\n        }\n        this.setState({\n            monthList:monthList\n        });\n    }\n\n\n    monthClicked(monthList) {\n        this.validateMonth(monthList);\n    }\n\n    selectedMonthBadgeClicked(monthList) {\n        this.validateMonth(monthList);\n    }\n\n    componentDidMount(){\n        this.generateMonthList();\n    }\n\n    render() {\n      return (\n        <div style={{display: 'flex', flexWrap: 'wrap'}}>\n            <div style={{marginRight:'20px', width:'150px'}}>\n                <div className=\"monthPickerHeader\">Month</div>\n                <div style={{width:'80%'}}>\n                    <MultiSelectReact \n                            options={this.state.monthList}\n                            optionClicked={this.monthClicked.bind(this)}\n                            selectedBadgeClicked={this.selectedMonthBadgeClicked.bind(this)}\n                            selectedOptionsStyles={this.selectedOptionsStyles}\n                            optionsListStyles={this.optionsListStyles} \n                            isTextWrap={false} \n                            isSingleSelect={true}\n                            />\n                </div>\n            </div>\n            <div>\n            <div className=\"monthPickerHeader\">Year</div>\n                <div>\n                    <form>\n                        <label>\n                            <TextField \n                                type=\"number\"\n                                multiline\n                                value={String(this.state.newDate.year)}\n                                onChange={(e) => { this.handleChange(e,\"year\")}}\n                                rowsMax=\"12\"\n                                rows=\"1\"\n                                style={{\n                                    background: 'transparent',\n                                    textColor: 'black',\n                                    width:'200px'\n                                    }}/>\n                        </label>\n                    </form>\n                </div>\n            </div>\n        </div>\n      );\n    }\n  }\n  export default MonthPicker;\n  ","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport './DraftBlock.css';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Textarea from 'react-textarea-autosize';\nimport TextField from '@material-ui/core/TextField';\nimport  MultiSelectReact  from 'multi-select-react';\nimport DraftBlockEvidenceView from './Draft/DraftBlockEvidenceView';\nimport DraftBlockNumberView from './Draft/DraftBlockNumberView';\nimport Checkbox from './Draft/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport { isNullOrUndefined } from 'util';\nimport DatePicker from \"react-datepicker\";\nimport MonthPicker from './Draft/MonthPicker/MonthPicker';\nimport Timekeeper from 'react-timekeeper';\nimport Paper from '@material-ui/core/Paper';\nimport * as Utils from '../common/utilSvc';\nimport moment from 'moment';\nimport Joyride,{ ACTIONS, EVENTS, STATUS } from 'react-joyride';\nimport Info from '@material-ui/icons/Info';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nclass DraftBlockComponent extends React.Component {\n\n    selectedOptionsStyles = {\n        color: \"white\",\n        backgroundColor: \"rgb(117, 106, 214)\",\n        borderRadius:\"20px\",\n        fontSize:'0.6em',\n        padding:'5px',\n        maxWidth: '92%',\n        wordWrap: 'break-word'\n    };\n    optionsListStyles = {\n        backgroundColor: \"darkcyan\",\n        color: \"white\",\n\n    };\n\n    DAY = 24*60*60*1000;\n\n    constructor(props){\n        super(props);\n\n        //props:draftBlock, bpId, uId, entityPane, draftBlockTooltip, finishTooltip, bpDetails\n        this.state={\n            newBlock: {},\n            canSubmit: false,\n            newEntity: '',\n            multiSelectEntityList: [],\n            addDate: false,\n            addTime: false,\n            deleteDraftBlockDialog: false,\n            commitDraftBlockDialog: false,\n            dialogType: null,\n            dialogText:{\n                delete:{\n                    title: \"Delete block\",\n                    desc: \"You are about to delete this block. This action cannot be reversed.\\nDo you confirm?\"\n                },\n                commit:{\n                    title: \"Add block to story\",\n                    desc: \"You are about to add this block to the story.\\nDo you confirm?\"\n                },\n                selected:{\n                    title: null,\n                    desc: null\n                }\n            },\n            date: new Date(),\n            time: undefined,\n            selectedDateStyle: 'date',\n            showTooltip:{\n                draftBlockTour: JSON.parse(JSON.stringify(props.draftBlockTooltip))\n            },\n            tooltipText:{\n                draftBlockTour:[\n                    {                    \n                        title: 'Edit your block!',\n                        target: '.addDateTimeButton',\n                        content: 'You can now edit each aspect of your block here. Click on the blue info icons to learn more about the various aspects of your block such as date-time, entities and evidences.',\n                        disableBeacon: true,\n                        placement: 'center'\n                    },\n                    {                    \n                        title: 'Add block to your story after editing!',\n                        target: '.commitBlockTooltip',\n                        content: 'After editing, click this button to add to story!',\n                        disableBeacon: true,\n                        placementBeacon: 'left',\n                        event: 'hover'\n                    }\n                ]\n            },\n            adhocTooltip:{\n                datetime:{\n                    flag: false,\n                    text: [\n                        {\n                            title: 'Add date and time',\n                            target: '.tooltipDatetime',\n                            content: 'If the content of your block describes some event (someones birth, the creation of a company, a terrorist attack, etc.) that is associated with some date and time, then add that to the block. This enables your block to appear in the Timeline visualisation that shows the chronological view of your story.',\n                            disableBeacon: true\n                        }\n                    ]\n                },\n                entities:{\n                    flag: false,\n                    text: [\n                        {\n                            title: 'Tag entities/characters!',\n                            target: '.tooltipEntities',\n                            content: 'Your block will be associated with some characters of the entire story. You can tag those characters (or entities) here. Typically, some entities are autodetected in the text and tagged when you create the block. The entities from these tags appear in the Graph visualisation of your story that show how your story\\'s characters are connected with one-another. Your block will also show up in the Graph visualisation if the viewer clicks on the entities that are tagged.',\n                            disableBeacon: true\n                        }\n                    ]\n                },\n                evidences:{\n                    flag: false,\n                    text: [\n                        {\n                            title: 'Add evidences!',\n                            target: '.tooltipEvidences',\n                            content: 'You may want to add authenticity to your block\\'s content by adding evidences that is visible to any viewer. You have to provide a link to the actual evidence that viewers of the story can click and navigate to. If your evidence is a picture (a chart), then add the link of the picture here so that the viewers of the story can see it when they click on your block.',\n                            disableBeacon: true\n                        }\n                    ]\n                },\n                numbers:{\n                    flag: false,\n                    text: [\n                        {\n                            title: 'Add relevant numbers!',\n                            target: '.tooltipNumbers',\n                            content: 'You may have some numbers, like money, headcount, etc., that you want to associate with this block.',\n                            disableBeacon: true\n                        }\n                    ]\n                }\n            }\n        }//\n\n        this.handleChange = this.handleChange.bind(this);\n        this.changeDateStatus = this.changeDateStatus.bind(this);\n        this.changeTimeStatus = this.changeTimeStatus.bind(this);\n        this.renderDate = this.renderDate.bind(this);\n        this.renderTime = this.renderTime.bind(this);\n        this.renderTimeOption = this.renderTimeOption.bind(this);\n        this.generateMultiSelectEntityList = this.generateMultiSelectEntityList.bind(this);\n        this.makeEntityUppercase = this.makeEntityUppercase.bind(this);\n        this.addEntityToList = this.addEntityToList.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.updateEvidence = this.updateEvidence.bind(this);\n        this.updateNumber = this.updateNumber.bind(this);\n        this.addEvidence = this.addEvidence.bind(this);\n        this.addNumber = this.addNumber.bind(this);\n        this.singleBlockEvidence = this.singleBlockEvidence.bind(this);\n        this.singleBlockNumber = this.singleBlockNumber.bind(this);\n        this.commitDraftBlock = this.commitDraftBlock.bind(this);\n        this.saveDraftBlock = this.saveDraftBlock.bind(this);\n        this.submitDraftBlock = this.submitDraftBlock.bind(this);\n        this.cancelDraftBlock = this.cancelDraftBlock.bind(this);\n        this.removeDraftBlock = this.removeDraftBlock.bind(this);\n        this.populateEntitiesAndEvidencesToBlock = this.populateEntitiesAndEvidencesToBlock.bind(this);\n        this.showLocalTooltip = this.showLocalTooltip.bind(this);\n        this.handleAdhocTooltipJoyrideCallback = this.handleAdhocTooltipJoyrideCallback.bind(this);\n        this.isDateChecked = this.isDateChecked.bind(this);\n        this.toggleDateStyle = this.toggleDateStyle.bind(this);\n        this.toggleDeleteBlockDialog = this.toggleDeleteBlockDialog.bind(this);\n        this.performAction = this.performAction.bind(this);\n    }    \n\n    changeDateStatus(){\n        var addDate = this.state.addDate;\n        var block = this.state.newBlock;\n        var ts = new Date();\n\n        if(!addDate){\n            //Add date\n            block.blockDate = {\n                date: ts.getDate(),\n                month: ts.getMonth(),\n                year: ts.getFullYear()\n            }\n        }\n        else{\n            //Remove date\n            delete block[\"blockDate\"];\n        }\n        this.setState({\n            addDate: !addDate,\n            newBlock: block,\n            date: ts\n        });\n    }\n\n    changeTimeStatus(){\n        var addTime = this.state.addTime;\n        var block = this.state.newBlock\n        var currDate = new Date();\n        var ts = {\n            hour:currDate.getHours(),\n            minute: currDate.getMinutes()\n        };\n\n        if(!(addTime)){\n            //Set to true, add time\n            block.blockTime={\n                hours: ts.hour,\n                minutes: ts.minute,\n                time: ts\n            }\n        }\n        else{\n            //Delete blockTime\n            delete block[\"blockTime\"];\n        }\n        this.setState({\n            addTime: !addTime,\n            newBlock: block,\n            time: ts\n        });\n    }\n\n    entityClicked(entityList) {\n        this.setState({ multiSelectEntityList: entityList });\n    }\n\n    selectedBadgeClicked(entityList) {\n        this.setState({ multiSelectEntityList: entityList });\n    }\n\n    generateMultiSelectEntityList(){\n        var count = 1;\n        var entityList = this.state.multiSelectEntityList;\n        var oldEntities = this.props.draftBlock.entities;\n        var oldEntitiesDict = {};\n        var consideredEntitiesDict = {};\n        \n\n        for(var i=0;i<oldEntities.length;i++){\n            entityList.push({\n                value: true,\n                label: oldEntities[i].title,\n                id: count\n            });\n            count++;\n            consideredEntitiesDict[oldEntities[i].title] = \"\";\n            oldEntitiesDict[oldEntities[i].title]=\"\";\n        }\n\n        //Enter investigation graph entities that are not selected\n        Object.keys(this.props.investigationGraph).forEach(function(entityKey) {           \n            if(!(entityKey in oldEntitiesDict)){\n                entityList.push({\n                    value: false,\n                    label: entityKey,\n                    id: count\n                });\n                count++;\n                consideredEntitiesDict[entityKey] = \"\";           \n            }\n        });\n\n        //Get from Entity pane extra entities not added\n        var entityPane = this.props.entityPane;\n        // console.log(entityPane);\n        for(var i=0; i<entityPane.length; i++){\n            var val = false;\n            var entityLabel = entityPane[i].label;\n            if(entityLabel in oldEntitiesDict){\n                val = true;\n            }\n            if(!(entityLabel in consideredEntitiesDict)){\n                entityList.push({                \n                        value: val, \n                        label: entityLabel, \n                        id: count             \n                });\n                count++;\n            }\n        }\n\n        entityList.sort(function(a,b){\n            if(a.label.toLocaleLowerCase() < b.label.toLocaleLowerCase())\n                return -1;\n            return 1;\n        });\n        this.setState({\n            multiSelectEntityList: entityList\n        });        \n    }\n\n    handleKeyDown(event){\n        if (event.key === 'Enter') {\n            var totalStr= event.target.value;\n            var entityArr = totalStr.split(',');\n            for(var i=0; i<entityArr.length; i++){\n                var str = entityArr[i].trim();\n                if(str.length > 0)\n                    this.addEntityToList(str);\n            }\n            str = '';\n            this.setState({newEntity: str});                \n          }\n    }\n\n    makeEntityUppercase(value){\n        return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase(); \n    }  \n\n    addEntityToList(entityLabel){\n        entityLabel = this.makeEntityUppercase(entityLabel);\n        var isEntityAlreadyPresent = false;\n        var entityList = this.state.multiSelectEntityList;\n        var block = this.state.newBlock;\n        let entityListIndex = -1;\n        for( var i=0; i<entityList.length; i++){\n            var entityItem = entityList[i]\n            if(entityItem.label == entityLabel){\n                isEntityAlreadyPresent=true;\n                entityListIndex = i;\n                break;\n            }\n        }\n        if(!isEntityAlreadyPresent && entityLabel.toLowerCase()!='all' && entityLabel.toLowerCase()!='none'){\n            var count = entityList.length;\n            count = count + 1;\n            entityList.push({                \n                value: true, \n                label: entityLabel, \n                id: count             \n            });\n            if(isNullOrUndefined(block.entities)){\n                block.entities=[];\n            }\n            block.entities.push({\n                title:entityLabel\n            });\n            // console.log(block);\n            this.setState({\n                multiSelectEntityList: entityList,\n                newBlock: block,\n                newEntity: ''\n            });\n        }\n        else if(isEntityAlreadyPresent && entityLabel.toLowerCase()!='all' && entityLabel.toLowerCase()!='none'){\n                            \n            entityList[entityListIndex].value = true;\n            if(isNullOrUndefined(block.entities)){\n                block.entities=[];\n            }\n            block.entities.push({\n                title:entityList[entityListIndex].label\n            });\n            this.setState({\n                multiSelectEntityList: entityList,\n                newBlock: block,\n                newEntity: ''\n            });                                                      \n        }       \n    }\n    \n    handleChange(event, type) {\n\n        var shouldUpdate = true;\n        if(type!=\"date\" && type!=\"time\"){\n            let newStr = event.target.value;\n            if(!Utils.shouldUpdateText(newStr, '\\n\\t')){\n                shouldUpdate=false;\n            }\n        }\n\n        if(shouldUpdate){\n            var block = this.state.newBlock;\n            if(type==\"title\"){\n                block.title = event.target.value;\n                this.setState({newBlock: block});\n            }\n            else if(type==\"summary\"){\n                block.summary = event.target.value;\n                this.setState({newBlock: block});\n            }\n            else if(type==\"new-entity\"){\n                this.setState({newEntity: event.target.value});\n            }\n            else if(type == \"date\"){\n                if(this.state.selectedDateStyle == 'date'){\n                    block.blockDate = {\n                        date: event.getDate(),\n                        month: event.getMonth(),\n                        year: event.getFullYear()\n                    };    \n                }\n                else{\n                    block.blockDate = {\n                        date: null,\n                        month: event.month,\n                        year: event.year\n                    }\n                }\n                // console.log(block.blockDate);\n                this.setState({\n                    date: event,\n                    newBlock: block\n                });\n            }\n            else if(type == \"time\"){\n                block.blockTime = {\n                    minutes: event.minute,\n                    hours: event.hour24\n                }\n                // console.log(block.blockTime);\n                this.setState({\n                    time: event,\n                    newBlock: block\n                });\n            }\n\n        }\n      }\n\n    updateEvidence(oldEvidence, newEvidence, isUpdate, isDelete, index){\n          var block = this.state.newBlock;\n\n          if(isNullOrUndefined(block.evidences)){\n              block.evidences=[];\n          }\n          if(isDelete){\n              \n                let newEv = [];\n                for(let i=0;i<block.evidences.length;i++){\n                    if(i != index){\n                        newEv.push(block.evidences[i]);\n                    }\n                }\n                block.evidences = newEv;                \n          }\n          else if(isUpdate){            \n            block.evidences[index] = newEvidence;\n        }\n\n        this.setState({newBlock: block});\n      }\n\n    updateNumber(oldNumber, newNumber, isUpdate, isDelete, index){\n        var block = this.state.newBlock;\n\n        if(isNullOrUndefined(block.numbers)){\n            block.numbers=[];\n        }\n        if(isDelete){\n            \n              let newNum = [];\n              for(let i=0;i<block.numbers.length;i++){\n                  if(i != index){\n                      newNum.push(block.numbers[i]);\n                  }\n              }\n              block.numbers = newNum;                \n        }\n        else if(isUpdate){            \n          block.numbers[index] = newNumber;\n      }\n\n      block.numbers = Utils.coalesceNumbers(block.numbers);\n\n      this.setState({newBlock: block});\n    }\n\n    addEvidence(){\n        var block = this.state.newBlock;\n        var newEvidence={\n            evidenceLink:'',\n            evidenceType:'',\n            supportingDetails:''\n        }\n\n        if(isNullOrUndefined(block.evidences))\n            block.evidences = [];\n        block.evidences.push(newEvidence);\n        this.setState({newBlock: block});\n      }\n\n    addNumber(){\n        var block = this.state.newBlock;\n        var newNumber={\n            key: null,\n            value: 0\n        }\n\n        if(isNullOrUndefined(block.numbers))\n            block.numbers = [];\n        block.numbers.push(newNumber);\n        this.setState({newBlock: block});\n    }\n\n    singleBlockEvidence(blockEvidence, index){\n        var isClicked = (blockEvidence.supportingDetails =='' && blockEvidence.evidenceLink == '');\n        return(\n                <DraftBlockEvidenceView\n                    isClicked={isClicked}\n                    evidence={blockEvidence}\n                    updateEvidence = {this.updateEvidence}\n                    index = {index} \n                    bId = {this.props.bId}\n                    uIdHash = {this.props.uIdHash}\n                />\n        );\n    }\n\n    singleBlockNumber(blockNumber, index){\n        var isClicked = (isNullOrUndefined(blockNumber.key));\n        return (\n            <DraftBlockNumberView\n                isClicked={isClicked}\n                index = {index}\n                number = {blockNumber}\n                updateNumber = {this.updateNumber}\n            />\n        );\n    }\n\n    populateEntitiesAndEvidencesToBlock(){\n        var block = this.state.newBlock;\n        block.entities = [];\n        var list = this.state.multiSelectEntityList;\n        for(var i=0; i<list.length; i++){\n            if(list[i].value){\n                block.entities.push({\n                    title: list[i].label,\n                    type:\"None\"\n                });\n            }\n        }  \n\n        if(isNullOrUndefined(block.evidences)){\n            block.evidences=[];\n        }\n        \n        this.setState({\n            newBlock: block\n        });\n    }\n\n    saveDraftBlock(){\n        this.populateEntitiesAndEvidencesToBlock();\n        this.props.updateBlock(this.state.newBlock, this.props.draftBlock,'SAVE');\n    }\n\n    commitDraftBlock(){\n        this.populateEntitiesAndEvidencesToBlock();\n        this.props.updateBlock(this.state.newBlock, this.props.draftBlock,'COMMIT');\n    }\n\n    submitDraftBlock(){\n        this.populateEntitiesAndEvidencesToBlock();\n        this.props.updateBlock(this.state.newBlock, this.props.draftBlock,'SUBMIT');\n    }\n\n    cancelDraftBlock(){\n        // console.log(this.state.newBlock);\n        // console.log(this.props.draftBlock);\n        this.props.updateBlock(this.state.newBlock, this.props.draftBlock,'CANCEL');\n    }\n\n    removeDraftBlock(){\n        this.props.updateBlock(this.state.newBlock, this.props.draftBlock,'DELETE');\n    }\n\n    isDateChecked(type){\n        if(type == this.state.selectedDateStyle)\n            return true;\n        return false;\n    }\n\n    toggleDateStyle(type){\n        let block = this.state.newBlock;\n        let date = this.state.date;\n        let addTime = this.state.addTime;\n        if(type == 'month' && this.state.selectedDateStyle != 'month'){\n            if(block.blockDate){\n                block.blockDate['date'] = null;\n                date.setFullYear(block.blockDate.year);\n                date.setMonth(block.blockDate.month);\n                date.setDate(0);\n                date.setHours(0);\n                date.setMinutes(0);\n                delete block['blockTime'];\n                addTime = false;                \n            }\n        }\n        else if(type == 'date' && this.state.selectedDateStyle != 'date'){\n            if(block.blockDate){\n                date = new Date();\n                block.blockDate['date'] = 1;\n                if(isNullOrUndefined(block.blockDate['month'])){\n                    block.blockDate['month'] = 0;\n                }\n                date.setFullYear(block.blockDate.year);\n                date.setMonth(block.blockDate.month);\n                date.setDate(1);\n            }\n        }       \n\n        this.setState({\n            selectedDateStyle: type,\n            date: date,\n            newBlock: block,\n            addTime: addTime\n        });\n    }\n\n    renderDate(){\n        return (\n            <div style={{marginBottom:'15px'}}>\n                {this.state.addDate?\n                    <div>\n                        <div>\n                            <Checkbox \n                                value={'date'}\n                                isChecked={this.isDateChecked('date')}\n                                label={'Complete date'}  \n                                toggleChange = {this.toggleDateStyle}                              \n                                />\n                            <Checkbox \n                                value={'month'}\n                                isChecked={this.isDateChecked('month')}\n                                label={'Only month/year'}\n                                toggleChange = {this.toggleDateStyle}\n                                />\n                        </div>\n                        {this.state.selectedDateStyle == 'date'?\n                            <div style={{marginTop:'5px'}}>\n                                <DatePicker\n                                selected={this.state.date}\n                                onChange={(date) => {this.handleChange(date,\"date\")}}\n                                />\n                            </div>\n                            :\n                            null\n                        }\n                        {this.state.selectedDateStyle == 'month'?\n                            <div style={{marginTop:'5px'}}>\n                                <MonthPicker\n                                date={this.state.newBlock.blockDate}\n                                onChange = {(date) => {this.handleChange(date,\"date\")}}\n                                />\n                            </div>\n                            :\n                            null\n                        }                                                \n                    </div>\n                    :\n                    null\n                }\n            </div>\n        );\n    }\n\n    renderTime(){\n        return (\n            <div>\n                {this.state.addTime?\n                    <div>\n                        <Timekeeper\n                            time={this.state.time}\n                            onChange={(e)=> this.handleChange(e,\"time\")}\n                            // ...\n                        />\n                    </div>\n                    :\n                    null\n                }\n            </div>\n        )\n    }\n\n    renderTimeOption(){\n        return (\n                    <div style={{marginTop:'5px', marginBottom:'5px'}}>\n                        <span style={{fontSize:'0.8em', fontWeight:'bold', marginRight: '1em'}}> Time: </span>\n                        <Button\n                            variant=\"contained\"  \n                            className=\"addDateTimeButton\" \n                            onClick={this.changeTimeStatus}>\n                            {!this.state.addTime?\n                            <div>Add time</div>\n                            :\n                            <div>Remove time</div>\n                            }\n                        </Button>\n                        {this.renderTime()}  \n                    </div>\n        );\n    }\n\n    showLocalTooltip(type){\n        var adhocTooltip = this.state.adhocTooltip;\n       if(type=='datetime'){\n           adhocTooltip.datetime.flag = true;\n       }\n       else if(type=='entities'){\n           adhocTooltip.entities.flag = true;\n       }\n       else if(type == 'evidences'){\n           adhocTooltip.evidences.flag = true;\n       }\n       else if(type == 'numbers'){\n            adhocTooltip.numbers.flag = true;\n       }\n       this.setState({adhocTooltip: adhocTooltip});\n    }\n\n    handleAdhocTooltipJoyrideCallback(data, tooltipType){\n       const {action,index,status,type} = data;\n       if([STATUS.FINISHED, STATUS.SKIPPED].includes(status)){\n           var adhocTooltip = this.state.adhocTooltip;\n           if(tooltipType=='datetime'){\n               adhocTooltip.datetime.flag = false;\n           }\n           else if(tooltipType=='entities'){\n               adhocTooltip.entities.flag = false;\n           }\n           else if(tooltipType == 'evidences'){\n               adhocTooltip.evidences.flag = false;\n           }\n           else if(tooltipType == 'numbers'){\n                adhocTooltip.numbers.flag = false;\n            }\n           this.setState({adhocTooltip: adhocTooltip});\n       }\n   }\n      \n    EditSingleBlock(listItem, index){\n\n        var renderEvidenceList = \"\";\n        if(!isNullOrUndefined(this.state.newBlock.evidences)){\n            // console.log(this.state.newBlock.evidences);\n            renderEvidenceList = this.state.newBlock.evidences.map((blockEvidence, index) => \n                this.singleBlockEvidence(blockEvidence, index)\n            );            \n        }\n\n        var renderNumberList = \"\";\n        if(!isNullOrUndefined(this.state.newBlock.numbers)){\n            // console.log(this.state.newBlock.numbers);\n            renderNumberList = this.state.newBlock.numbers.map((blockNumber, index) => \n                this.singleBlockNumber(blockNumber, index)\n            );            \n        }\n\n        let actionType = '';\n        if(this.state.newBlock.actionType)\n            actionType = this.state.newBlock.actionType;\n\n        return(\n\n            <div className = {'draft-block-container ' + \n            (actionType =='MODIFY'? 'draft-block-color-MODIFY' : '') + \n            (actionType =='ADD'? 'draft-block-color-ADD' : '')}>\n                {this.state.newBlock.actionType =='MODIFY'?\n                    <div className='draftBlocksPaneTitle'>Modify block</div>\n                    :\n                    <div className='draftBlocksPaneTitle'>Edit block</div>\n                }   \n                \n                {this.props.bpDetails.criterion == 0?\n                                    <div>\n                                        <p className=\"openTooltipTextContainer\">\n                                                Click on <a className='tooltip-selection' onClick={() => this.toggleDeleteBlockDialog(true,'commit')}>Add to story</a> to add your block to the story. <br/><br/>\n                                        </p>\n                                    </div>\n                                    :\n                                    null\n                }       \n                <div className=\"draft-options-container\" style={{marginTop:'0.1em'}}>\n                {this.props.bpDetails.criterion == 0?\n                                    <div>\n                                        <Button \n                                            variant=\"contained\"\n                                            className=\"commitBlockButton commitBlockTooltip\" \n                                            onClick={() => this.toggleDeleteBlockDialog(true,'commit')}>\n                                                <div className=\"buttonDraftGeneral\">Add to story</div>\n                                        </Button>\n                                    </div>\n                                    :\n                                    null\n                    }\n                    <div>\n                        <Button \n                            variant=\"contained\"\n                            className=\"saveBlockButton\" \n                            onClick={this.saveDraftBlock}>\n                                <div className=\"buttonDraftGeneral\">Save as Draft</div>\n                        </Button>\n                    </div>\n                    {this.state.canSubmit?\n                        <div>\n                            <Button\n                                variant=\"contained\" \n                                className=\"submitBlockButton\" \n                                onClick={this.submitDraftBlock}>\n                                    <div className=\"buttonDraftGeneral\">Submit</div>\n                            </Button>\n                        </div>\n                        :\n                        null\n                    }\n                    <div>\n                        <Button\n                            variant=\"contained\" \n                            className=\"cancelBlockBackButton\" \n                            onClick={this.cancelDraftBlock}>\n                                <div className=\"buttonDraftGeneral\">Cancel</div>\n                        </Button>\n                    </div>\n                    <div>\n                        <Button \n                            variant=\"contained\"\n                            className=\"deleteBlockButton\" \n                            onClick={() => this.toggleDeleteBlockDialog(true,'delete')}>\n                                <div className=\"buttonDraftGeneral\">Delete</div>\n                        </Button>\n                    </div>    \n                </div>                    \n                <form>\n                <label>\n                    <TextField \n                        type=\"text\"\n                        variant=\"outlined\"\n                        multiline\n                        placeholder = \"Title of your contribution.\"\n                        value={this.state.newBlock.title}\n                        onChange={(e) => { this.handleChange(e,\"title\")}}\n                        rowsMax=\"2\"\n                        rowsMin=\"1\"\n                        style={{\n                            background: 'white',\n                            marginTop:'6px',\n                            marginBottom:'6px',\n                            width:'95%'\n                            }}/>\n                    <TextField \n                    type=\"text\"\n                    variant=\"outlined\"\n                    multiline\n                    placeholder = \"Content of your contribution.\"\n                    value={this.state.newBlock.summary}\n                    onChange={(e) => { this.handleChange(e,\"summary\")}}\n                    rowsMax=\"13\"\n                    rows=\"3\"\n                    style={{\n                        background: 'white',\n                        marginTop:'6px',\n                        marginBottom:'6px',\n                        width:'95%'\n                        }}/>\n                </label>\n                </form>\n\n                <div className=\"draft-box-datetime-container\"> \n                    <h6 style={{marginBottom:'3px', fontSize:'19px'}}>\n                        Add relevant date/time\n                        <a className='tooltipDatetime tooltips-draft' \n                        onClick={(e)=>{this.showLocalTooltip('datetime')}}>\n                            <Info style={{fontSize:'19px'}}/>\n                        </a>                         \n                        <Joyride\n                                styles={{\n                                    options: {\n                                    arrowColor: '#e3ffeb',\n                                    beaconSize: '4em',\n                                    primaryColor: '#05878B',\n                                    backgroundColor: '#e3ffeb',\n                                    overlayColor: 'rgba(10,10,10, 0.4)',\n                                    width: 900,\n                                    zIndex: 1000,\n                                    }\n                                    }}\n                                    steps={this.state.adhocTooltip.datetime.text}\n                                    run = {this.state.adhocTooltip.datetime.flag}\n                                    callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'datetime')}}                    \n                                    />\n                    </h6>\n                    <div style={{marginTop:'5px', marginBottom:'5px'}}>\n                        <span style={{fontSize:'0.8em', fontWeight:'bold', marginRight: '1em'}}> Date: </span>\n                        <Button\n                            variant=\"contained\" \n                            className=\"addDateTimeButton\" \n                            onClick={this.changeDateStatus}>\n                            {!this.state.addDate?\n                            <div>Add Date</div>\n                            :\n                            <div>Remove date</div>\n                            }\n                        </Button>\n                        {this.renderDate()}  \n                    </div>\n                    {this.state.addDate && this.state.selectedDateStyle == 'date'?\n                        this.renderTimeOption()\n                        :\n                        null}\n                                       \n                </div>\n\n                <div className=\"draft-box-entity-dropdown-container\">\n                    <h6 style={{marginBottom:'3px', fontSize:'19px'}}>\n                        Tag entities/characters\n                        <a className='tooltipEntities tooltips-draft' \n                            onClick={(e)=>{this.showLocalTooltip('entities')}}>\n                            <Info style={{fontSize:'19px'}}/>\n                        </a>                         \n                        <Joyride\n                                styles={{\n                                    options: {\n                                    arrowColor: '#e3ffeb',\n                                    beaconSize: '4em',\n                                    primaryColor: '#05878B',\n                                    backgroundColor: '#e3ffeb',\n                                    overlayColor: 'rgba(10,10,10, 0.4)',\n                                    width: 900,\n                                    zIndex: 1000,\n                                    }\n                                    }}\n                                    steps={this.state.adhocTooltip.entities.text}\n                                    run = {this.state.adhocTooltip.entities.flag}\n                                    callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'entities')}}                    \n                                    />\n                    </h6>\n                    <MultiSelectReact \n                        options={this.state.multiSelectEntityList}\n                        optionClicked={this.entityClicked.bind(this)}\n                        selectedBadgeClicked={this.selectedBadgeClicked.bind(this)}\n                        selectedOptionsStyles={this.selectedOptionsStyles}\n                        optionsListStyles={this.optionsListStyles} \n                        isTextWrap={false} \n                        />\n                    <div className=\"draft-add-new-entity-container\">\n                        <TextField \n                                type=\"text\"\n                                variant=\"outlined\"\n                                multiline\n                                value={this.state.newEntity}\n                                onChange={(e) => { this.handleChange(e,\"new-entity\")}}\n                                onKeyDown={(e) => { this.handleKeyDown(e)}}\n                                placeholder = \"Type entity tags seperated by commas and press 'Enter'\"\n                                rowsMax=\"2\"\n                                rows=\"1\"\n                                style={{\n                                    background: 'white',\n                                    marginTop:'6px',\n                                    marginBottom:'6px',\n                                    minWidth:'60%',\n                                    maxWidth: '90%'\n                                    }}/>                                   \n                    </div> \n                    <div>\n                        <p style={{fontSize:'12px'}}>\n                            Type entity tags seperated by commas (eg: Black Widow,Thor,Ironman) and press 'Enter'\n                        </p>\n                    </div>      \n                </div>\n\n                <div className=\"draft-box-evidence-container\">\n                    <h6 style={{marginBottom:'3px',marginTop:'3px', fontSize:'19px'}}>\n                        Add evidences\n                        <a className='tooltipEvidences tooltips-draft' \n                            onClick={(e)=>{this.showLocalTooltip('evidences')}}>\n                            <Info style={{fontSize:'19px'}}/>\n                        </a>                         \n                        <Joyride\n                                styles={{\n                                    options: {\n                                    arrowColor: '#e3ffeb',\n                                    beaconSize: '4em',\n                                    primaryColor: '#05878B',\n                                    backgroundColor: '#e3ffeb',\n                                    overlayColor: 'rgba(10,10,10, 0.4)',\n                                    width: 900,\n                                    zIndex: 1000,\n                                    }\n                                    }}\n                                    steps={this.state.adhocTooltip.evidences.text}\n                                    run = {this.state.adhocTooltip.evidences.flag}\n                                    callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'evidences')}}                    \n                                    />\n                    </h6>                    \n                    <Button \n                        variant=\"contained\"\n                        className=\"addEvidenceButton\" \n                        onClick={this.addEvidence}\n                        >                    \n                            <div>Add new evidence</div>\n                        </Button>  \n                    <div>\n                        {renderEvidenceList}\n                    </div> \n                </div>\n                <div className=\"draft-box-number-container\">\n                    <h6 style={{marginBottom:'3px',marginTop:'3px', fontSize:'19px'}}>\n                        Add relevant numbers\n                        <a className='tooltipNumbers tooltips-draft' \n                            onClick={(e)=>{this.showLocalTooltip('numbers')}}>\n                            <Info style={{fontSize:'19px'}}/>\n                        </a>    \n                        <Joyride\n                                styles={{\n                                    options: {\n                                    arrowColor: '#e3ffeb',\n                                    beaconSize: '4em',\n                                    primaryColor: '#05878B',\n                                    backgroundColor: '#e3ffeb',\n                                    overlayColor: 'rgba(10,10,10, 0.4)',\n                                    width: 900,\n                                    zIndex: 1000,\n                                    }\n                                    }}\n                                    steps={this.state.adhocTooltip.numbers.text}\n                                    run = {this.state.adhocTooltip.numbers.flag}\n                                    callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'numbers')}}                    \n                                    />                     \n                    </h6>                    \n                        <Button \n                        variant=\"contained\"\n                        className=\"addNumberButton\" \n                        onClick={this.addNumber}\n                        >                    \n                            <div>Add new number</div>\n                        </Button>  \n                    <div>\n                        {renderNumberList}\n                    </div> \n\n                    \n                </div>\n                <div className=\"draft-options-container\" style={{marginTop:'0.1em'}}>\n                {this.props.bpDetails.criterion == 0?\n                                    <Button \n                                        variant=\"contained\"\n                                        className=\"commitBlockButton\" \n                                        onClick={() => this.toggleDeleteBlockDialog(true,'commit')}>\n                                            <div className=\"buttonDraftGeneral\">Add to story</div>\n                                    </Button>\n                                    :\n                                    null\n                    }\n                    <Button \n                        variant=\"contained\"\n                        className=\"saveBlockButton\" \n                        onClick={this.saveDraftBlock}>\n                            <div className=\"buttonDraftGeneral\">Save as Draft</div>\n                    </Button>\n                    {this.state.canSubmit?\n                        <Button \n                            variant=\"contained\"\n                            className=\"submitBlockButton\" \n                            onClick={this.submitDraftBlock}>\n                                <div className=\"buttonDraftGeneral\">Submit</div>\n                        </Button>\n                        :\n                        null\n                    }\n                    <Button\n                        variant=\"contained\" \n                        className=\"cancelBlockBackButton\" \n                        onClick={this.cancelDraftBlock}>\n                            <div className=\"buttonDraftGeneral\">Cancel</div>\n                    </Button>\n                    <Button\n                        variant=\"contained\"  \n                        className=\"deleteBlockButton\" \n                        onClick={() => this.toggleDeleteBlockDialog(true,'delete')}>\n                            <div className=\"buttonDraftGeneral\">Delete</div>\n                    </Button>    \n                </div>\n                {this.props.bpDetails.criterion == 0?\n                                    <div>\n                                        <p className=\"openTooltipTextContainer\">\n                                                Click on <a className='tooltip-selection' onClick={() => this.toggleDeleteBlockDialog(true,'commit')}>Add to story</a> to add your block to the story. <br/><br/>\n                                        </p>\n                                    </div>\n                                    :\n                                    null\n                }                                \n            </div>\n\n        );\n    }\n\n    componentDidMount(){\n        this.generateMultiSelectEntityList();\n\n        //Deepcopy props to state\n        const blockStr = JSON.stringify(this.props.draftBlock);\n        var block = JSON.parse(blockStr);\n        var date = new Date();\n        var time = undefined;\n        var addDate = false;\n        var addTime = false;\n        let selectedDateStyle = 'date';\n\n        if((\"blockDate\" in block) && block.blockDate!=null){\n            date.setFullYear(block.blockDate.year);\n            date.setMonth(block.blockDate.month);\n            if(!isNullOrUndefined(block.blockDate.date))\n                date.setDate(block.blockDate.date);\n            else{\n                date.setDate(0);\n                selectedDateStyle = 'month';\n            }\n            date.setHours(0);\n            date.setMinutes(0);\n            date.setSeconds(0);\n            date.setMilliseconds(0);\n\n            addDate = true;\n\n            if((\"blockTime\" in block) && block.blockTime!=null){\n                time = {\n                    hour: block.blockTime.hours,\n                    minute: block.blockTime.minutes\n                }\n                addTime = true;\n                // console.log(\"Blocktime\");\n                // console.log(time);\n            }\n        }\n        this.setState({\n            newBlock:JSON.parse(blockStr),\n            date: date,\n            addDate: addDate,\n            addTime: addTime,\n            time: time,\n            selectedDateStyle: selectedDateStyle\n        });\n    }\n\n    toggleDeleteBlockDialog(value, type){\n        let dialogText = this.state.dialogText;\n        if(type == 'delete'){\n            dialogText.selected.title = dialogText.delete.title;\n            dialogText.selected.desc = dialogText.delete.desc;\n        }\n        else if(type == 'commit'){\n            dialogText.selected.title = dialogText.commit.title;\n            dialogText.selected.desc = dialogText.commit.desc;\n        }\n        this.setState({\n            deleteDraftBlockDialog: value,\n            dialogType: type\n        });\n    }\n\n    performAction(type){\n        if(type == 'delete'){\n            this.removeDraftBlock();\n        }\n        else if(type == 'commit'){\n            this.commitDraftBlock();\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <Joyride\n                styles={{\n                    options: {\n                      arrowColor: '#e3ffeb',\n                      beaconSize: '3em',\n                      primaryColor: '#05878B',\n                      backgroundColor: '#e3ffeb',\n                      overlayColor: 'rgba(10,10,10, 0.4)',\n                      width: 900,\n                      zIndex: 1000,\n                    }\n                  }}\n                    steps={this.state.tooltipText.draftBlockTour}\n                    run = {this.state.showTooltip.draftBlockTour}                    \n                    /> \n                    <Dialog\n                    open={this.state.deleteDraftBlockDialog}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    onClose={() => this.toggleDeleteBlockDialog(false,'delete')}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\">\n                        <DialogTitle id=\"alert-dialog-slide-title\">{this.state.dialogText.selected.title}</DialogTitle>\n                        <DialogContent>\n                        <DialogContentText id=\"alert-dialog-slide-description\">\n                            {this.state.dialogText.selected.desc}\n                        </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                        <Button onClick={() => this.toggleDeleteBlockDialog(false,this.state.dialogType)} color=\"primary\">\n                            No\n                        </Button>\n                        <Button onClick={() => this.performAction(this.state.dialogType)} color=\"primary\">\n                            Yes\n                        </Button>\n                        </DialogActions>\n                    </Dialog>\n                {this.EditSingleBlock()}\n            </div>\n        );\n    }\n\n}\nexport default DraftBlockComponent;","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport './SingleBlock.css';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DraftBlockComponent from './DraftBlock';\nimport { isNullOrUndefined } from 'util';\n\nclass SingleUserBlock extends React.Component {\n\n    constructor(props){\n        super(props);\n        //props: isNewBlock, deleteNewBlcok, addDraftBlock, entityPane, draftBlockTooltip, finishTooltip, bId\n        //changeSelectedBlock, bpDetails, isMultiSelect, multiSelectBlocks(block), isBlockSelectedInMultiselect\n\n        this.state={\n            isBlockClicked: false\n        }\n        this.BlockEntity = this.BlockEntity.bind(this);\n        this.clickBlockInDraft = this.clickBlockInDraft.bind(this);\n        this.revertBlockInDraft = this.revertBlockInDraft.bind(this);\n        this.clickBlockNotInDraft = this.clickBlockNotInDraft.bind(this);\n        this.updateDraftBlock = this.updateDraftBlock.bind(this);        \n    }\n\n    BlockEntity(entity){\n        return(\n        <span className=\"user-block-entity\">\n            {entity.title}\n        </span>\n        );  \n    }\n\n    clickBlockNotInDraft(block){\n        if(!this.props.isMultiSelect)\n            this.props.selectBlock(block);\n    }\n\n    renderViewOnlyBlock(){\n\n        var renderBlockEntities = '';\n        if(this.props.block.entities!=null && this.props.block.entities.length>0){            \n            renderBlockEntities = this.props.block.entities.map((blockEntity) => \n               this.BlockEntity(blockEntity)\n           );            \n       }\n\n       return(\n            <ListItem button \n                onClick={() => { this.clickBlockNotInDraft(this.props.block)}}\n                style={{width:'100%'}}\n                >\n                <ListItemText \n                 primary={this.props.block.title} \n                secondary={this.props.block.summary}/>\n            </ListItem>                    \n        );\n        \n    }\n\n    clickBlockInDraft(){\n        if(!this.props.isMultiSelect){\n            if(!this.state.isBlockClicked){\n                this.setState({\n                    isBlockClicked: true\n                });\n            }\n            if(this.props.block.key != this.props.selectedDraftBlockId){\n                this.props.changeSelectedBlock(this.props.block.key);\n            }\n        }\n        else{            \n            let key = this.props.block.key;\n            this.props.multiSelectBlocks(key);\n        }\n    }\n\n    revertBlockInDraft(){\n        if(this.state.isBlockClicked){\n            this.setState({\n                isBlockClicked: false\n            });\n        }\n    }\n\n    renderDraftBlock(){\n        let actionType = '';\n        if(this.props.block)\n             actionType = this.props.block.actionType;\n             \n        return(\n            <div>\n                {this.props.selectedDraftBlockId == this.props.block.key?\n                    <div>\n                        <DraftBlockComponent \n                        draftBlock={this.props.block}\n                        investigationGraph = {this.props.investigationGraph}\n                        updateBlock = {this.updateDraftBlock}\n                        entityPane = {this.props.entityPane}\n                        draftBlockTooltip = {this.props.draftBlockTooltip}\n                        finishTooltip = {this.props.finishTooltip}\n                        bpDetails = {this.props.bpDetails}\n                        bId = {this.props.bId}\n                        uIdHash = {this.props.uIdHash}\n                        />\n                    </div>                    \n                    :\n                    <div className={(actionType =='MODIFY' && !this.props.isMultiSelect? 'user-block-color-MODIFY' : '') + \n                            (actionType =='ADD' && !this.props.isMultiSelect? 'user-block-color-ADD' : '') + \n                            (this.props.isMultiSelect && !this.props.isBlockSelectedInMultiselect? 'user-block-color-multiselect-UNSELECTED' : '') +\n                            (this.props.isMultiSelect && this.props.isBlockSelectedInMultiselect? 'user-block-color-multiselect-SELECTED' : '')}>\n                        <ListItem button \n                            onClick={() => { this.clickBlockInDraft()}}\n                            style={{width:'100%'}}\n                            >\n                            <ListItemText \n                            primary={this.props.block.title} \n                            secondary={this.props.block.summary}/>\n                        </ListItem>\n                    </div>\n                }\n            </div>\n        )\n    }\n\n    updateDraftBlock(newBlock, oldBlock, updateType){\n        if(updateType=='SAVE'){\n            //SAVE\n            if(this.props.isNewBlock){\n                this.props.addDraftBlock(newBlock);\n            }\n            else{\n                this.props.updateDraftBlock(newBlock.key, newBlock);\n            }\n\n                this.setState({\n                        isBlockClicked: false\n                });\n                this.props.changeSelectedBlock(null);                \n            }\n        else if(updateType=='COMMIT'){\n            this.props.commitBlockToBlockprobe(newBlock);\n        }\n        else if(updateType=='SUBMIT'){\n            //SUBMIT\n\n            //Remove children\n            delete newBlock[\"children\"];\n            this.props.submitDraftBlock(newBlock);\n\n            this.setState({\n                isBlockClicked: false\n            });\n            this.props.changeSelectedBlock(null);\n        }\n        else if(updateType=='CANCEL'){\n            //CANCEL CHANGES\n            if(!this.props.isNewBlock){\n                \n                //If block is an existing draft, then just revert to view state if changes cancelled\n                this.setState({\n                    isBlockClicked: false\n                });\n                this.props.changeSelectedBlock(null);                              \n            }\n            else{\n\n                //If block is a new block, then delete it\n                this.props.deleteNewBlock();\n            }              \n        }\n        else if(updateType=='DELETE'){\n            //DELETE CHANGES\n\n            if(this.props.isNewBlock){\n\n                //If block is a new block, then delete it\n                this.props.deleteNewBlock();\n            }\n            else{\n                this.props.deleteDraftBlock(newBlock.key)\n                this.setState({\n                    isBlockClicked: false\n                });\n                this.props.changeSelectedBlock(null);\n            }\n        }\n    }\n\n    render(){\n\n        return(\n            <div>\n                {this.props.block.blockState==\"DRAFT\"?\n                this.renderDraftBlock():\n                this.renderViewOnlyBlock()\n                }\n            </div>\n        )\n\n    }\n}\nexport default SingleUserBlock;","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport ImageUploader from 'react-images-upload';\nimport Loader from 'react-loader-spinner';\nimport imageCompression from 'browser-image-compression';\nimport Checkbox from '../../Draft/Checkbox';\nimport * as Utils from '../../../common/utilSvc';\nimport  \"./OcrComponent.css\";\nimport { isNullOrUndefined } from 'util';\n\nclass OcrComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n        //addText\n\n        this.state={\n            text: 'none',\n            loadingText: false,\n            fileName: null,\n            pictures: [],\n            showPreview: true\n        }\n\n        this.functions = firebase.functions();\n        this.onDrop = this.onDrop.bind(this);\n        this.uploadOcrFileToDb = this.uploadOcrFileToDb.bind(this);\n        this.getText = this.getText.bind(this);\n        this.canSubmit = this.canSubmit.bind(this);\n        this.clickSubmit = this.clickSubmit.bind(this);\n        this.togglePreviewImages = this.togglePreviewImages.bind(this);\n    }\n\n    async uploadOcrFileToDb(latestPicture,  index){\n         \n        let scope = this;\n        let path = this.props.bId + '/users/' + this.props.uId +'/ocr_' + String(index) ;\n        let pathRef = firebase.storage().ref(path);\n        try{\n            await pathRef.put(latestPicture);\n        }\n        catch(error){\n\n        }        \n    }\n\n    async getText(latestPicture, options, index){\n        let compressedFile = await imageCompression(latestPicture, options);\n        let url = URL.createObjectURL(compressedFile);\n\n        \n        let text = '';\n\n        try{\n            await this.uploadOcrFileToDb(compressedFile, index);\n\n            var ocrFunc = this.functions.httpsCallable('ocrTextExtraction');\n\n            let finResult = await ocrFunc({bpId: this.props.bId, userId: this.props.uId, index: index}); \n            text = finResult.data;\n            text = Utils.filterText(text);\n            text += '\\n\\n';                                       \n        }\n        catch(e){\n            text = '';\n        }\n        return text;\n    }\n\n    onDrop(picture){\n        this.setState({\n            pictures: picture\n        });        \n    }\n\n    async clickSubmit(){\n        let pictures = this.state.pictures;\n        var options = {\n            maxSizeMB: 1,\n            useWebWorker: true\n          }\n        this.setState({\n            loadingText: true\n        });\n\n        let name = '';\n        let textPromises = [];\n        for(let i=0; i<pictures.length; i++){\n            try{\n                let picture  = pictures[i];\n                if(i==pictures.length-1 && !isNullOrUndefined(picture.name)){\n                    name  = picture.name;\n                }\n                let textPromise =  this.getText(picture, options, i); \n                textPromises.push(textPromise);             \n            }\n            catch (error) {\n                console.log(error);\n            }\n        }\n        let results = await Promise.all(textPromises);\n\n        for(let i=0; i<results.length; i++){\n            if(!isNullOrUndefined(results[i]) && results[i].length>0)\n                this.props.addText(results[i]);\n        }\n\n        this.setState({\n            loadingText: false,\n            fileName: name\n        });\n    }\n\n    canSubmit(){\n        if(this.state.pictures.length > 0)\n            return true;\n        return false;\n    }\n\n    togglePreviewImages(){\n        this.setState({\n            showPreview: !this.state.showPreview            \n        });\n    }\n\n    render(){\n        return (\n            <div>                  \n                    {this.state.loadingText?\n                            <div>\n                                <div style={{margin:'auto',width:'50px'}}>\n                                    <Loader \n                                        type=\"TailSpin\"\n                                        color=\"#00BFFF\"\n                                        height=\"50\"\t\n                                        width=\"50\"\n                                        /> \n                                </div>\n                                <div style={{padding:'3px', textAlign:'center'}}>\n                                    <p className=\"processingOcrText\">\n                                        Your image is being processed. This may take 15 seconds or more to complete.\n                                    </p>\n                                </div> \n                            </div>                            \n                            :\n                            <div>\n                                <div style={{textAlign:'center'}}>\n                                    {this.canSubmit()?\n                                        <button className=\"converOcrButton\" onClick={this.clickSubmit}>Save</button>\n                                        :\n                                        null\n                                    }\n                                </div>\n                                <div style={{marginLeft:'1em'}}>\n                                    <Checkbox \n                                        value={'showPreview'}\n                                        isChecked={this.state.showPreview}\n                                        label={'Preview images'}  \n                                        toggleChange = {this.togglePreviewImages}                              \n                                        />\n                                </div>\n                                <ImageUploader\n                                    withIcon={true}\n                                    buttonText='Choose image'\n                                    onChange={this.onDrop}\n                                    singleImage={true}\n                                    imgExtension={['.jpg', '.gif', '.png', '.gif']}\n                                    maxFileSize={5242880}\n                                    withPreview={this.state.showPreview}\n                                    />\n                                {!isNullOrUndefined(this.state.fileName)?\n                                    <div style={{textAlign:'center'}}>\n                                        <p className=\"processingOcrText\">\n                                            Your last image upload was <span style={{color:'blue'}}>{this.state.fileName}</span>.\n                                        </p>\n                                    </div>\n                                    :\n                                    null\n                                }\n                            </div>                              \n                    }             \n            </div>\n        );\n    }\n}\nexport default OcrComponent;","import React, { Component } from 'react';\nimport Loader from 'react-loader-spinner';\nimport Textarea from 'react-textarea-autosize';\nimport * as firebase from 'firebase';\nimport  \"./ArticleLinkComponent.css\";\n\nclass ArticleLinkComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n        //addText, text\n\n        this.state={\n            url: '',\n            loadingText: false\n        }\n\n        this.functions = firebase.functions();\n        this.handleChange = this.handleChange.bind(this);\n        this.isValidLink = this.isValidLink.bind(this);\n        this.getArticleText = this.getArticleText.bind(this);\n    }\n\n    async getArticleText(){\n        this.setState({\n            loadingText: true\n        });\n\n        try{\n            let url = this.state.url;\n\n            var articleFunc = this.functions.httpsCallable('articleTextExtraction');\n            let result = '';\n            try{\n                let finResult = await articleFunc({url: url}); \n                result = finResult.data.content + '\\n\\n'; \n            }\n            catch(e){\n                result = '';\n            }\n            finally{\n            }\n\n            this.props.addText(result);\n            this.setState({\n                loadingText: false\n            });\n        }\n        catch{\n            this.setState({\n                loadingText: false\n            });\n        }\n        finally{\n        }\n\n    }\n\n    handleChange(event, type) {\n\n        var shouldUpdate = true;\n      \n        var lastChar = event.target.value[event.target.value.length-1];\n        if(lastChar=='\\n' || lastChar=='\\t')\n            shouldUpdate=false;\n\n        if(shouldUpdate){\n            let url = this.state.url;\n            if(type==\"url\"){\n                    url = event.target.value;                    \n                    this.setState({url: url});\n                }\n            }       \n    }\n\n    isValidLink(){\n        if(this.state.url.trim() == '')\n            return false;\n        return true;\n    }\n\n    render(){\n        return (\n            \n            <div>       \n                {this.state.loadingText?\n                    <div>\n                        <div style={{margin:'auto',width:'50px'}}>\n                            <Loader \n                                type=\"TailSpin\"\n                                color=\"#00BFFF\"\n                                height=\"50\"\t\n                                width=\"50\"\n                                /> \n                        </div>\n                        <div style={{padding:'3px', textAlign:'center'}}>\n                            <p className=\"processingArticleLinkText\">\n                                Your link is being processed. Kindly wait for a few moments.\n                            </p>\n                        </div> \n                    </div>    \n                    :\n                    <div>\n                        <form className=\"articleLinkForm\">\n                            <label>\n                            <Textarea \n                                type=\"text\"\n                                placeholder=\"Paste link to article here.\"\n                                value={this.state.url}\n                                onChange={(e) => { this.handleChange(e,\"url\")}}\n                                maxRows=\"1\"\n                                minRows=\"1\"\n                                style={{\n                                    background: 'white',\n                                    borderWidth:'2px', \n                                    borderStyle:'solid', \n                                    borderColor:'darkgrey',\n                                    paddingTop:'6px',\n                                    paddingBottom:'6px',\n                                    width:'96%'\n                                    }}/>                            \n                            </label>\n                        </form>\n                        {this.isValidLink()?\n                            <button\n                            className=\"submitArticleLinkButton\"\n                            onClick={this.getArticleText}>\n                                <div>Get Text</div>\n                            </button>                    \n                        :\n                            null\n                        }\n                    </div>\n                }                       \n            </div>\n        );\n    }\n}\nexport default ArticleLinkComponent;","import React, { Component } from 'react';\nimport Loader from 'react-loader-spinner';\nimport Textarea from 'react-textarea-autosize';\nimport * as firebase from 'firebase';\nimport * as Utils  from '../../../common/utilSvc';\nimport Checkbox from '../../Draft/Checkbox';\nimport  \"./FilterTextComponent.css\";\nimport { isNullOrUndefined } from 'util';\n\nclass FilterTextComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n        //addText, text\n\n        this.state={\n            delimiters: '()',\n            loadingText: false,\n            oldText: [],\n            canUndo: false,\n            showPreview: false\n        }\n\n       this.handleChange = this.handleChange.bind(this);\n       this.filterText = this.filterText.bind(this);\n       this.isValidDelimter = this.isValidDelimter.bind(this);\n       this.undoOperation = this.undoOperation.bind(this);\n       this.toggleDelimiterPreview = this.toggleDelimiterPreview.bind(this);\n    }\n\n    handleChange(event, type){\n        var shouldUpdate = true;\n      \n        shouldUpdate =Utils.isValidDelimiter(event.target.value)\n        if(shouldUpdate){\n            let delimiters = this.state.delimiters;\n            if(type==\"delimiters\"){\n                    delimiters = event.target.value;                    \n                    this.setState({delimiters: delimiters});\n                    this.props.setDelims(delimiters);\n                }            \n            }  \n    }\n\n    toggleDelimiterPreview(){\n        let showPreview = !this.state.showPreview;\n        this.props.setDelims(this.state.delimiters);\n        this.props.togglePreview('delims',showPreview);\n        this.setState({\n            showPreview: showPreview      \n        });\n    }\n\n    filterText(){\n        let text  = this.props.text;\n        let delimiters = this.state.delimiters;\n        let oldText = this.state.oldText;\n        oldText.push(text);\n        this.setState({\n            oldText:oldText,\n            canUndo: true\n        });\n        text = Utils.filterTextBasedOnDelimter(text, delimiters[0], delimiters[1], true);\n        this.props.addText(text);\n    }\n\n    undoOperation(){\n        let oldText = this.state.oldText;\n        let text = oldText.pop();\n        let canUndo = true;\n        if(oldText.length == 0)\n            canUndo = false;\n\n        this.setState({\n            canUndo: canUndo,\n            oldText: oldText\n        });\n        this.props.addText(text);\n    }\n\n    isValidDelimter(){\n        let delimiters = this.state.delimiters;\n        if(isNullOrUndefined(delimiters))\n            return false;\n        \n        if(delimiters.length < 2)\n            return false;\n\n        return true;\n    }\n\n    render(){\n        return (\n            <div className=\"filterTextComponent\">                \n                <div>\n                    <p>Delimiter</p>\n                    <form>\n                            <label>\n                            <Textarea \n                                type=\"text\"\n                                value={this.state.delimiters}\n                                onChange={(e) => { this.handleChange(e,\"delimiters\")}}\n                                maxRows=\"1\"\n                                minRows=\"1\"\n                                style={{\n                                    background: 'white',\n                                    borderWidth:'2px', \n                                    borderStyle:'solid', \n                                    borderColor:'darkgrey',\n                                    paddingTop:'6px',\n                                    paddingBottom:'6px',\n                                    width:'80px'\n                                    }}/>                            \n                            </label>\n                    </form>\n\n                    {this.isValidDelimter()?\n                        <div style={{marginTop:'10px', marginBottom:'10px'}}>\n                            <Checkbox \n                                value={'showPreview'}\n                                isChecked={this.state.showPreview}\n                                label={'Preview text with filter'}  \n                                toggleChange = {this.toggleDelimiterPreview}                              \n                                />\n                        </div>\n                        :\n                        null\n                    }\n\n                    <div className=\"filterTextOptionsContainer\">\n                        {this.isValidDelimter()?\n                            <button\n                                className=\"filterTextDelimiterButton\"\n                                onClick={this.filterText}>\n                                    <div>Filter</div>\n                            </button>\n                            :\n                            false\n                        }\n\n                        {this.state.canUndo?\n                            <button\n                                className=\"undoFilterTextDelimiterButton\"\n                                onClick={this.undoOperation}>\n                                    <div>Undo</div>\n                            </button>\n                            :\n                            false\n                        }\n                    </div>\n                    \n\n                    {this.state.canUndo?\n                    <p className=\"filterTextUndoOperation\">\n                        You have filter text based on the delimiters  <span className=\"filterTextDelimText\">{this.state.delimiters}</span>.\n                        To undo this action, please click <a className=\"filterTextUndoAction\" onClick={() => this.undoOperation()}>Undo</a>.\n                    </p>\n                    :\n                    null\n                    }\n                     \n                </div>\n            </div>\n        );\n    }\n}\nexport default FilterTextComponent;","import React, { Component } from 'react';\nimport Loader from 'react-loader-spinner';\nimport Textarea from 'react-textarea-autosize';\nimport * as firebase from 'firebase';\nimport * as Utils  from '../../../common/utilSvc';\nimport Checkbox from '../../Draft/Checkbox';\nimport  MultiSelectReact  from 'multi-select-react';\nimport * as Const from '../../../common/constants';\nimport  \"./translateComponent.css\";\nimport { isNullOrUndefined } from 'util';\n\nclass TranslateTextComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n        //text, translatedText\n\n        this.state = {\n            firstLangSelectList: [],\n            selectedLang: String(this.props.lang),\n            currentLangLabel: null,\n            oldTexts: []\n        }\n\n        this.functions = firebase.functions();\n\n        this.generateLangLists = this.generateLangLists.bind(this);\n        this.canSubmit = this.canSubmit.bind(this);\n        this.canPreview = this.canPreview.bind(this);\n        this.canUndo = this.canUndo.bind(this);\n        this.translateText = this.translateText.bind(this);\n        this.previewText = this.previewText.bind(this);\n        this.submitText = this.submitText.bind(this);\n        this.undoAction = this.undoAction.bind(this);\n    }\n\n    firstLangClicked(entityList) {\n        var selectedEntity = null;\n        for(var i=0; i<entityList.length; i++){\n            if(entityList[i].value){\n                selectedEntity = entityList[i].id;    \n            }\n        }\n        this.setState({ \n            firstLangSelectList: entityList, \n            selectedLang: selectedEntity\n        });\n    }\n\n    firstSelectedBadgeClicked(entityList) {\n        var selectedEntity = null;\n        for(var i=0; i<entityList.length; i++){\n            if(entityList[i].value){\n                selectedEntity = entityList[i].id;\n            }\n        }\n\n        this.setState({ \n            firstLangSelectList: entityList, \n            selectedLang: selectedEntity\n        });\n    }\n\n    generateLangLists(){\n        var count = 1;\n        var firstEntityList = this.state.firstLangSelectList;\n        let selectedLangLabel = this.state.selectedLangLabel;\n        \n        for(let i=0; i<Const.langs.length; i++){\n            let langSelected =  false;\n            if(this.state.selectedLang == Const.langs[i].id){\n                langSelected = true;\n                selectedLangLabel = Const.langs[i].label;\n            }\n            firstEntityList.push({                \n                value: langSelected, \n                label: Const.langs[i].label,\n                id: Const.langs[i].id\n            }); \n        }\n               \n        this.setState({\n            firstLangSelectList: firstEntityList,\n            currentLangLabel: selectedLangLabel\n        });\n    }\n\n    componentDidMount(){\n        this.generateLangLists();\n    }\n\n    canPreview(){\n        if(!isNullOrUndefined(this.state.selectedLang))\n            return true;\n        return false;\n    }\n\n    canSubmit(){\n        if(!isNullOrUndefined(this.props.translatedText) && this.props.translatedText.length>0)\n            return true;\n        return false;\n    }\n\n    canUndo(){\n        if(this.state.oldTexts.length>0)\n            return true;\n        return false;\n    }\n\n    async previewText(){\n        let target = this.state.selectedLang;\n        let text = this.props.text;\n        let translatedText = await this.translateText(text,target);\n        await this.props.setTranslatedText(translatedText);\n    }\n\n    async submitText(){\n        await this.previewText();\n        let text = this.props.translatedText;\n        let currText = JSON.parse(JSON.stringify(this.props.text));\n        let oldTexts = this.state.oldTexts;\n        oldTexts.push(currText);\n        this.setState({\n            oldTexts: oldTexts\n        });\n        this.props.updateText(text);\n    }\n\n    undoAction(){\n        let oldTexts = this.state.oldTexts;\n        let oldText = oldTexts.pop();\n        this.setState({\n            oldTexts: oldTexts\n        });\n        this.props.updateText(oldText);\n    }\n    \n    async translateText(text,target){\n        var translateFunc = this.functions.httpsCallable('translateText');\n        var result = {};\n        try{\n            result = await translateFunc({text: text, target: target});\n        }\n        catch(e){\n            result = {\n                data: []\n            };\n        }\n        finally{\n        }\n        // console.log(result);\n        let translatedText = \"\";\n        for(let i=0; i<result.data.length; i++){\n            translatedText += (result.data[i] + ' ');\n        }\n        return translatedText;\n    }\n\n    render(){\n        const selectedOptionsStyles = {\n            color: \"white\",\n            backgroundColor: \"rgb(117, 106, 214)\",\n            borderRadius:\"20px\",\n            fontSize:'0.6em',\n            padding:'10px',\n            maxWidth: '92%',\n            wordWrap: 'break-word'\n        };\n        const optionsListStyles = {\n            backgroundColor: \"darkcyan\",\n            color: \"white\",\n\n        };\n\n        return(\n            <div className=\"translateTextContainer\">\n                <div className='translatepane-filter-container'>                \n                    <div className=\"translatepane-dropdown-container\">\n                        <MultiSelectReact \n                        options={this.state.firstLangSelectList}\n                        optionClicked={this.firstLangClicked.bind(this)}\n                        selectedBadgeClicked={this.firstSelectedBadgeClicked.bind(this)}\n                        selectedOptionsStyles={selectedOptionsStyles}\n                        optionsListStyles={optionsListStyles} \n                        isSingleSelect={true}\n                        isTextWrap={false} \n                        />\n                        \n                    </div>     \n\n                    {this.canPreview()?\n                        <button className=\"translatePaneButton\" onClick={this.previewText}>Preview</button>\n                        :\n                        null\n                    }\n\n                    {this.canSubmit()?\n                        <button className=\"submitPaneButton\" onClick={this.submitText}>Submit</button>\n                        :\n                        null\n                    }\n\n                    {this.canUndo()?\n                        <button className=\"undoPaneButton\" onClick={this.undoAction}>Undo</button>\n                        :\n                        null\n                    }\n                                \n                </div>\n            </div>\n        )\n    }\n}\nexport default TranslateTextComponent;","import React, { Component } from 'react';\nimport ContentEditable from 'react-contenteditable';\nimport  * as Utils from '../../../common/utilSvc';\nimport  \"./BulkBlockEditable.css\";\nimport { isNullOrUndefined } from 'util';\n\nclass BulkBlockEditable extends React.Component {\n\n    constructor(props){\n        super(props);\n        //value, onChange, delims, type\n\n        this.state = {\n            html: '',\n            delims: ['(',')']\n        }\n\n        this.htmlToText = require('html-to-text');\n\n        this.handleChange = this.handleChange.bind(this);    \n        this.unmakeHtml = this.unmakeHtml.bind(this);\n        this.formatHtml = this.formatHtml.bind(this);\n        this.removeExtraEffects = this.removeExtraEffects.bind(this);\n        this.getDelimiters = this.getDelimiters.bind(this);\n    }\n\n    handleChange(e){\n        let htmlStr = String(e.target.value);\n        console.log(e.target);\n        console.log(htmlStr);\n        console.log(this.unmakeHtml(htmlStr));\n        let newHtml = htmlStr;\n        if(this.unmakeHtml(this.state.html)!=this.unmakeHtml(htmlStr))\n            newHtml = this.formatHtml(htmlStr);\n\n        this.setState({\n            html: newHtml\n        });\n/*        let text = e.currentTarget.textContent;\n        let event = {\n            target: {\n                value: text\n            }\n        };\n        this.props.onChange(event);\n        */\n    }\n\n    unmakeHtml(html){\n        // replace br with \\n\n\n        let ans = html;\n        ans = ans.replace(/<div/g,'<br><div');\n        ans = this.htmlToText.fromString(ans);\n        return ans;\n    }\n\n    removeExtraEffects(htmlStr){\n        let ans = htmlStr;\n\n        //replace title\n        ans = ans.replace(new RegExp('<span style=\"color: green\">','g'),'');\n\n        //replace delim bold\n        ans = ans.replace(new RegExp('<span style=\"font-weight:bold\">','g'),'');\n\n        //replace delim bold\n        ans = ans.replace(new RegExp('<b style=\"color: green\">','g'),'');\n        ans = ans.replace(new RegExp('</b>','g'),'');\n        \n        //Replace endings\n        ans = ans.replace(new RegExp('</span>','g'),'');\n\n        return ans;\n    }\n\n    getDelimiters(html){\n        //Check for consequtive title\n        let delim = this.props.delims;\n        let ans = html;\n        if(!isNullOrUndefined(delim) && delim.length==2){\n            ans = Utils.HtmlBasedOnDelimter(html,delim[0],delim[1],true); \n        }\n        return ans;\n    }\n\n    formatHtml(html){\n        let ans = html;\n\n        //Delimiters\n        if(this.props.type['delims'])\n            ans = this.getDelimiters(html);\n        /*for(let i=0; i<html.length; i++){\n            if(html[i]=='#'){\n                ans += `<span style=\"color: green\">`;\n                while(i<html.length && (html[i]!='\\n') && (html[i]!='<'))\n                {\n                    ans += html[i];\n                    i++;\n                }\n                ans += `</span>`;\n                i--;\n\n            }\n            else{\n                ans+=html[i];\n            }\n        }*/\n        return ans;\n    }\n\n    render(){\n        let html = this.props.value;\n        html ='<div class=\"nonEditablePreviewText\">' + html + '</div>';\n        html = this.formatHtml(html);\n        return (\n            <div style={{width:'100%'}}>\n                <ContentEditable\n                    className=\"editableBulkDivMain\"\n                    html={html} // innerHTML of the editable div\n                    disabled={true}       // use true to disable editing\n                    />\n            </div>\n        );\n    }\n}\nexport default BulkBlockEditable;\n\n/*\n<div\n                    className=\"editableBulkDiv\"\n                    contentEditable='true'\n                    onInput={e => this.handleChange(e)}>\n                    {this.props.value}\n                    </div>\n                    */","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport './BulkDraftBlock.css';\nimport '../DraftBlock.css';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Textarea from 'react-textarea-autosize';\nimport  MultiSelectReact  from 'multi-select-react';\nimport AddIcon from '@material-ui/icons/Add';\nimport SaveIcon from '@material-ui/icons/Save';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Info from '@material-ui/icons/Info';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport Loader from 'react-loader-spinner';\nimport OcrComponent  from './ocrComponent/OcrComponent';\nimport ArticleLinkComponent from './articleLinkComponent/ArticleLinkComponent';\nimport FilterTextComponent from './filterTextComponent/FilterTextComponent';\nimport TranslateTextComponent from './translateComponent/translateComponent';\nimport { isNullOrUndefined } from 'util';\nimport * as Utils from '../../common/utilSvc';\nimport Joyride,{ ACTIONS, EVENTS, STATUS } from 'react-joyride';\nimport BulkBlockEditable from './BulkBlockEditable/BulkBlockEditable';\nimport { setTimeout } from 'timers';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nclass BulkDraftBlockComponent extends React.Component {\n\n\n    constructor(props){\n        super(props);\n        //cancelBulkDraftBlock, addDraftBlock,investigationGraph, addBlocksTooltip\n\n        this.state ={\n            value:'',\n            oldValue: '',\n            translatedValue: '',\n            isSavingBlocks: false,\n            isLoadingText: false,\n            isSavingText: false,\n            openOcr: false,\n            openArticleLink: false,\n            openFilterText: false,\n            openTranslateText: false,\n            openConfirmDialog: false,\n            placeholderOld: \"Paste text here in the following format:\\n\\nTitle of block1\\nContent of block1\\n\\nTitle of block2\\nContent of block2\\n\\n(Note:\\nAdding #2 at the start of the title will give the block a rank of 2, which is useful in sorting the block.\\nAdding #2s at the start of the title will put the block in summary view and give it the rank 2.)\",\n            placeholder: \"Input your story (broken into paragraphs) here\",\n            tooltipText:{\n                addBlocks:[\n                    {\n                        title: 'Write your story as short paragraphs and save!',\n                        target: '.addBlocksPaneInput',\n                        content: '',\n                        disableBeacon: true\n                    }/*,\n                    {\n                        title: 'Additional info!',\n                        target: '.bulkdraft-list',\n                        content: 'You can learn more by clicking the info icons in blue',\n                        disableBeacon: true\n                    }\n                    ,\n                    {\n                        title: 'Save your blocks!',\n                        target: '.saveBlocksInBulk',\n                        content: 'Once you are done copy-pasting the red text into the input, please save your content.',\n                        disableBeacon: false,\n                        placementBeacon: 'left',\n                        event: 'hover'\n                    }*/\n                ]            \n            },\n            showTooltip:{\n                addBlocks: JSON.parse(JSON.stringify(props.addBlocksTooltip))\n            },\n            adhocTooltip:{\n                para:{\n                    flag: false,\n                    text: [\n                        {\n                            title: 'Importance of paragraphs in input!',\n                            target: '.tooltipPara',\n                            content: 'Your input must be in the forms of paras with every two paras seperated by atleast one empty line. Each para becomes one block. To add titles to your blocks, you can add a title to each para but please note that the title and the content must NOT have empty lines between them. In the example shown in red text, \\'#1s Avengers\\' is the title while \\'Thor, Rogers,...\\' is the content. In the same example, another block is inputed without a title but with content \\'Thor is from Asgard.\\' ',\n                            disableBeacon: true\n                        }\n                    ]\n                },\n                hashtag:{\n                    flag: false,\n                    text: [\n                        {\n                            title: 'Importance of hashtags in the title of each block!',\n                            target: '.tooltipHashtag',\n                            content: 'Each block has a title. If you want to order your blocks to provide structure to your content (in the same way paragraphs follow a certain order in a story), you can start the title using a hashtag. For example, the block with \\'#1\\' as title will show up before the block with \\'#2\\'. The text in red inputs a block with a title that starts with #1.',\n                            disableBeacon: true\n                        }\n                    ]\n                },\n                summary:{\n                    flag: false,\n                    text: [\n                        {\n                            title: 'Importance of hashtags in the summary view!',\n                            target: '.tooltipSummary',\n                            content: 'Your story dashboard contains a summary visualisation that provides a summary of your story to any viewer. As a contributor to the story, you may want your block to surface in the summary. To do so, you need to append the letter \\'s\\' to the hashtag in the title. Note that the \\'s\\' must come after the number in the hashtag. For example, in the red text, the first block as a title that begins with \\'#1s\\', so it will surface in the summary view. The ordering of blocks in the summary view is the same as described in the previous tooltip.',\n                            disableBeacon: true\n                        }\n                    ]\n                }\n            },\n            previewEditorType: {},\n            delims: ''\n        }\n        this.functions = firebase.functions();\n        this.textarea = null;\n\n        //this.EditSingleBlock = this.EditSingleBlock.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.sendMessage = this.sendMessage.bind(this);\n        this.getParas = this.getParas.bind(this);\n        this.formatParas = this.formatParas.bind(this);\n        this.isValidNlpEntity = this.isValidNlpEntity.bind(this);\n        this.isDate = this.isDate.bind(this);\n        this.isLocation = this.isLocation.bind(this);        \n        this.isRepeatedNlpEntity = this.isRepeatedNlpEntity.bind(this);\n        this.saveDraftInBulk = this.saveDraftInBulk.bind(this);\n        this.showLocalTooltip = this.showLocalTooltip.bind(this);\n        this.handleAdhocTooltipJoyrideCallback = this.handleAdhocTooltipJoyrideCallback.bind(this);\n        this.makeEntityUppercase = this.makeEntityUppercase.bind(this);\n        this.closeAdvancedTabs = this.closeAdvancedTabs.bind(this);\n        this.toggleAdvancedTab = this.toggleAdvancedTab.bind(this);\n        this.isAnyAdvancedTabOpened = this.isAnyAdvancedTabOpened.bind(this);        \n        this.addText = this.addText.bind(this);\n        this.reformText = this.reformText.bind(this);        \n        this.deleteExistingBulkText = this.deleteExistingBulkText.bind(this);\n        this.closeBulkDraft = this.closeBulkDraft.bind(this);\n        this.saveBulkDraft = this.saveBulkDraft.bind(this);\n        this.toggleSaveDialog = this.toggleSaveDialog.bind(this);\n        this.togglePreview = this.togglePreview.bind(this);\n        this.setDelims = this.setDelims.bind(this);\n        this.getBulkPreviewText = this.getBulkPreviewText.bind(this);\n        this.setTranslatedText = this.setTranslatedText.bind(this);\n    }\n\n    togglePreview(type, value){\n        let previewEditorType = this.state.previewEditorType;\n        if(value){\n            previewEditorType[type] = true;\n        }\n        else{\n            delete previewEditorType[type];\n        }\n        this.setState({\n            previewEditorType: previewEditorType\n        });\n    }\n\n    setDelims(delims){\n        this.setState({delims:delims});\n    }\n    \n    formatParas(currentPara, allParas){\n        var newPara={};\n \n        if(currentPara){\n            newPara.title='';\n            newPara.body='';\n            newPara.entities = [];\n            let entityMap = {};\n            let start = 0;\n            for(let i=0; i<currentPara.length; i++){\n                if(Utils.isTitleHashtag(currentPara[i])){\n                    if(i>0){\n                        currentPara[i] = Utils.removeTitleHashtag(currentPara[i]);\n                    }\n                    newPara.title += currentPara[i] + ' ';\n                    start++;                    \n                }\n                else{\n                    break;\n                }\n            }\n            var paraBody = '';\n            for(var j=start;j<currentPara.length;j++){\n                if(Utils.isEntitiesDollar(currentPara[j])){\n                    let paraEntites = Utils.getEntities(currentPara[j]);\n                    // console.log(paraEntites);\n                    for(let entity in paraEntites){\n                        paraEntites[entity] = this.makeEntityUppercase(paraEntites[entity]);\n                        if(!(paraEntites[entity] in entityMap)){\n                            entityMap[entity] = {\n                                title: paraEntites[entity],\n                                type: \"None\"\n                            }\n                        }\n                    }\n                }\n                else{\n                    const currParaSent = currentPara[j];\n                    // console.log(\"currSent \"+ currParaSent);\n                    paraBody = paraBody + currentPara[j];\n                }\n            }\n            newPara.body = paraBody;\n            for(let entity in entityMap){\n                newPara.entities.push(entityMap[entity]);\n            }\n        }\n        allParas.push(newPara);    \n    }\n\n    getParas(text){\n        var sentence=\"\";\n        var prev='0';\n        var prev2 = '0';\n        var currentPara=[], allParas=[];\n        var ans=\"\";\n        let start  = 0;\n        text = text.trim();\n        while(start<text.length && (text[start] == '\\n' || text[start] == '\\t'))\n            start++;\n        text = text.substring(start);\n        for(var i=0;i<text.length;i++){\n            if(text[i]=='\\n'){\n              \n                if(prev!='\\n'){\n                    sentence=sentence + ' ';\n                    currentPara.push(sentence);\n                    sentence = '';\n                }\n                else if(prev2!='\\n'){\n                    // sentence=sentence+'|';\n                    sentence = '';\n                    if(currentPara.length>0){\n                        this.formatParas(currentPara,allParas);\n                        currentPara = [];\n                    }\n\n                }\n            }\n            else{\n                sentence=sentence+text[i];\n                ans = ans + text[i];\n            }\n\n            prev2 = prev;\n            prev = text[i];\n        }\n\n            //Remaining sentence added\n            if(sentence!=''){\n                currentPara.push(sentence);\n            }\n            if(currentPara.length>0){\n               this.formatParas(currentPara,allParas);\n               currentPara = [];\n            }\n\n            // console.log(allParas);\n        return allParas;\n    }\n\n    isAnyAdvancedTabOpened(){\n        return(this.state.openArticleLink || this.state.openOcr);\n    }\n\n    closeAdvancedTabs(){\n        this.togglePreview('delims',false);\n        this.togglePreview('translate',false);\n        this.setState({\n            openOcr: false,\n            openArticleLink: false,\n            openFilterText: false,\n            openTranslateText: false\n        });\n    }\n\n    toggleAdvancedTab(type){\n        this.closeAdvancedTabs();\n        if(type == 'ocr'){\n            this.setState({\n                openOcr: !this.state.openOcr\n            }); \n        }\n        else if(type == 'article'){\n            this.setState({\n                openArticleLink: !this.state.openArticleLink\n            });\n        }\n        else if(type == 'filterText'){\n            this.setState({\n                openFilterText: !this.state.openFilterText\n            });\n        }\n        else if(type == 'translateText'){\n            this.togglePreview('translate',!this.state.openTranslateText);\n            this.setState({\n                openTranslateText: !this.state.openTranslateText\n            });\n        }\n    }\n\n    toggleSaveDialog(value){\n        this.setState({\n            openConfirmDialog: value\n        });\n    }\n\n    handleChange(event) {\n        this.setState({\n            value: event.target.value,\n        });\n    \n      }\n\n    reformText(text){\n        this.setState({value: text});\n    }\n    \n    addText(text){\n        let value = this.state.value;\n        value += text;        \n\n        this.setState({\n            value: value\n        });\n       // if(!isNullOrUndefined(this.textarea))\n       //     this.textarea.focus();\n    }\n\n    handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n          \n        }\n      }\n\n    sendMessage(e) {\n        if (e.key === 'Enter') {\n          //this.props.onKeyUp(e.target.value) your work with value\n          // I want to clear the textarea around here\n         // e.target.value = '';\n         \n        }\n      }\n\n    isLocation(nlpEntity){\n        if(nlpEntity.type != 'LOCATION')\n            return false;\n        return true;\n    }\n\n     isValidNlpEntity(nlpItem, nounType){\n\n        if(isNullOrUndefined(nlpItem))\n            return false;\n\n         let mentions = nlpItem.mentions;\n\n         if(!isNullOrUndefined(nlpItem.name) && (nlpItem.name.toLowerCase() == 'all' ||(nlpItem.name.toLowerCase() == 'none')))\n            return false;\n\n         for(var i=0;i<mentions.length;i++){\n             if(mentions[i].type == nounType)\n                return true;\n         }\n         return false;\n     }\n\n     isDate(nlpEntity){\n        if(nlpEntity.type != 'DATE')\n            return false;\n\n        if(nlpEntity.metadata){\n            let date = nlpEntity.metadata;\n            if(!('year' in date))\n                return false;  \n        }\n        return true;\n     }\n\n     isRepeatedNlpEntity(nlpItem){\n        var entityPane = this.props.entityPane;\n        var nlpKey = nlpItem.name;\n        for(var j =0; j< entityPane.length; j++){\n            var key = entityPane[j].label;\n            if(key.toLowerCase().indexOf(nlpKey.toLowerCase())>=0 || nlpKey.toLowerCase().indexOf(key.toLowerCase())>=0){\n                return true;\n            }\n        }\n        return false;\n     }\n\n     makeEntityUppercase(value){\n        return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase(); \n        }  \n\n     async saveDraftInBulk(){\n        this.setState({isSavingBlocks: true});\n        var bulkBlocks = [];\n        bulkBlocks = this.getParas(this.state.value);\n        var draftBlocks=[];\n        \n        //Takin 10 blocks at a time for summary\n        var concatSummaryText = '';\n        var nlpEntities = [];\n        var nlpCommonNounEntities = [];\n        let nlpDates = [];\n        let nlpLocations = [];\n        for(var i=0;i<bulkBlocks.length;i++){\n            concatSummaryText += bulkBlocks[i].body;\n            concatSummaryText += '.';\n            if(i%10==9 || i==bulkBlocks.length-1){\n                var entitiesFunc = this.functions.httpsCallable('entityExtraction');\n                var result = {};\n                try{\n                    result = await entitiesFunc({text: concatSummaryText});\n                }\n                catch(e){\n                    result = {\n                        data: []\n                    };\n                }\n                finally{\n                }\n                   \n                if(result.data){\n                    // console.log(result.data);\n                    for(var j=0;j<result.data.length;j++){\n                        result.data[j].name = this.makeEntityUppercase(result.data[j].name);\n                        if(this.isValidNlpEntity(result.data[j],'PROPER') && !this.isLocation(result.data[j]) &&  !this.isRepeatedNlpEntity(result.data[j])){\n                            nlpEntities.push(result.data[j]);\n                        }\n                        if(this.isValidNlpEntity(result.data[j],'COMMON') &&  !this.isRepeatedNlpEntity(result.data[j])){\n                            nlpCommonNounEntities.push(result.data[j]);\n                        }\n                        if(this.isDate(result.data[j])){\n                            nlpDates.push(result.data[j]);\n                        }\n                        if(this.isLocation){\n                            nlpLocations.push(result.data[j]);\n                        }\n                    }\n                }\n                 //   nlpEntities.concat(result.data);\n                concatSummaryText = '';        \n            }\n        }\n\n        nlpEntities.sort(function(a, b){return b.salience - a.salience});\n        nlpCommonNounEntities.sort(function(a, b){return b.salience - a.salience});\n        nlpDates.sort(function(A, B){\n            let a = A.metadata;\n            let b = B.metadata;\n            if(a.year != b.year)\n                return Number(a.year) - Number(b.year);\n            if((isNullOrUndefined(a.month) && isNullOrUndefined(b.month)) || a.month==b.month){\n                if(isNullOrUndefined(a.day) && isNullOrUndefined(b.day)){\n                    return a.day;\n                }\n                if(isNullOrUndefined(a.day))\n                    return 1;\n                if(isNullOrUndefined(b.day))\n                    return -1;\n                return Number(a.day) - Number(b.day);\n            }\n            if(isNullOrUndefined(a.month))\n                return 1;\n            if(isNullOrUndefined(b.month))\n                return -1;\n            return Number(b.month) - Number(a.month);            \n        });\n\n         // console.log(nlpEntities);\n         // console.log(nlpCommonNounEntities);\n         // console.log(nlpDates);\n        \n         for(var i=0;i<bulkBlocks.length;i++){\n             var newDraftBlock = {\n                 entities:[],\n                 evidences:[],\n                 summary: bulkBlocks[i].body,\n                 title: bulkBlocks[i].title\n             }\n\n             //MARK HERE ENTITIES\n            \n             var entityPane = this.props.entityPane;\n\n             // console.log(bulkBlocks[i]);  \n\n             for(var j =0;!isNullOrUndefined(bulkBlocks[i]) && !isNullOrUndefined(bulkBlocks[i].entities) \n                    && j< bulkBlocks[i].entities.length; j++)\n            {\n                newDraftBlock.entities.push(bulkBlocks[i].entities[j]);\n            }\n\n             for(var j =0; j< entityPane.length; j++){\n                var key = entityPane[j].label;\n                if(Utils.isEntityPartOfString(newDraftBlock.summary.toLowerCase(), key.toString().toLowerCase())){\n                    newDraftBlock.entities.push({\n                        title:key,\n                        type:\"None\"\n                    })\n                } \n             }\n\n             for(var j=0; j<nlpEntities.length && newDraftBlock.entities.length<=3; j++){\n                var key = nlpEntities[j].name;\n                if(newDraftBlock.summary.toLowerCase().indexOf(key.toString().toLowerCase()) >= 0){\n                    newDraftBlock.entities.push({\n                        title:key,\n                        type:\"None\"\n                    })\n                } \n             }\n\n             //If entities are less, use common nouns also\n             for(var j=0; j<nlpCommonNounEntities.length && newDraftBlock.entities.length<2; j++){\n                var key = nlpCommonNounEntities[j].name;\n                if(newDraftBlock.summary.toLowerCase().indexOf(key.toString().toLowerCase()) >= 0){\n                    newDraftBlock.entities.push({\n                        title:key,\n                        type:\"None\"\n                    })\n                } \n             }\n\n             if(newDraftBlock.entities){\n                 //Dedup done here\n                var result = newDraftBlock.entities.reduce((unique, o) => {\n                    if(!unique.some(obj => obj.title === o.title)) {\n                      unique.push(o);\n                    }\n                    return unique;\n                },[]); \n                newDraftBlock.entities = result;\n            }\n\n            for(let j=0; j<nlpDates.length; j++){\n                let key = nlpDates[j].name;\n                if(newDraftBlock.summary.toLowerCase().indexOf(key.toString().toLowerCase()) >= 0){\n                    let blockDate = {\n                        date: null,\n                        month: Number(nlpDates[j].metadata.month)-1,\n                        year: Number(nlpDates[j].metadata.year)\n                    }\n                    if(!isNullOrUndefined(nlpDates[j].metadata.day)){\n                        blockDate.date = Number(nlpDates[j].metadata.day);\n                    }\n                    newDraftBlock['blockDate'] = blockDate;\n                    break;\n                }\n            }\n             \n             \n             draftBlocks.push(newDraftBlock);             \n         }\n         // console.log(draftBlocks);\n\n         try{\n            await this.deleteExistingBulkText();\n         }\n         catch{\n\n         }\n         this.setState({isSavingBlocks: false});\n         this.props.addDraftBlocksInBulk(draftBlocks);\n     } \n\n     showLocalTooltip(type){\n         var adhocTooltip = this.state.adhocTooltip;\n        if(type=='para'){\n            adhocTooltip.para.flag = true;\n        }\n        else if(type=='hashtag'){\n            adhocTooltip.hashtag.flag = true;\n        }\n        else if(type == 'summary'){\n            adhocTooltip.summary.flag = true;\n        }\n        this.setState({adhocTooltip: adhocTooltip});\n     }\n\n     handleAdhocTooltipJoyrideCallback(data, tooltipType){\n        const {action,index,status,type} = data;\n        if([STATUS.FINISHED, STATUS.SKIPPED].includes(status)){\n            var adhocTooltip = this.state.adhocTooltip;\n            if(tooltipType=='para'){\n                adhocTooltip.para.flag = false;\n            }\n            else if(tooltipType=='hashtag'){\n                adhocTooltip.hashtag.flag = false;\n            }\n            else if(tooltipType == 'summary'){\n                adhocTooltip.summary.flag = false;\n            }\n            this.setState({adhocTooltip: adhocTooltip});\n        }\n    }\n\n    async deleteExistingBulkText(){\n        let bulkText = firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n        .collection(\"users\").doc(this.props.uIdHash).collection(\"bulkText\");\n\n        let allDocs = await bulkText.get();\n\n        if(allDocs){\n            let deletePromises = [];\n            allDocs.forEach((doc) => {\n                let deletePromise = firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n                .collection(\"users\").doc(this.props.uIdHash).collection(\"bulkText\").doc(doc.id).delete();\n                deletePromises.push(deletePromise);\n            });    \n            await Promise.all(deletePromises);\n        }\n    }\n\n    async saveBulkDraft(){\n        this.setState({\n            isSavingText: true,\n            previewEditorType: {}\n        });\n        let textList = Utils.getTextListForBulk(this.state.value);\n\n        try{\n            if(this.state.value != this.state.oldValue){\n                await this.deleteExistingBulkText();\n                let writePromises = [];\n                for(let i=0; i<textList.length; i++){\n                    let textPage = {\n                        id: i,\n                        text: textList[i]\n                    };\n                    let writePromise = firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n                        .collection(\"users\").doc(this.props.uIdHash).collection(\"bulkText\").doc(String(i)).set(textPage);\n                    writePromises.push(writePromise);\n                }\n                await Promise.all(writePromises);    \n            }\n        }\n        catch(e){\n        }\n        finally{\n            this.setState({\n                isSavingText: false\n            });\n        }\n    }\n\n    async closeBulkDraft(){\n        this.setState({\n            isSavingText: true\n        });\n        let textList = Utils.getTextListForBulk(this.state.value);\n\n        try{\n            if(this.state.value != this.state.oldValue){\n                await this.deleteExistingBulkText();\n                let writePromises = [];\n                for(let i=0; i<textList.length; i++){\n                    let textPage = {\n                        id: i,\n                        text: textList[i]\n                    };\n                    let writePromise = firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n                        .collection(\"users\").doc(this.props.uIdHash).collection(\"bulkText\").doc(String(i)).set(textPage);\n                    writePromises.push(writePromise);\n                }\n                await Promise.all(writePromises);    \n            }\n        }\n        catch(e){\n        }\n        finally{\n            this.setState({\n                isSavingText: false\n            });\n            this.props.cancelBulkDraftBlock();\n        }\n    }\n\n    async componentDidMount(){\n        this.setState({\n            isLoadingText: true\n        });\n        try{\n            let bulkText = firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n            .collection(\"users\").doc(this.props.uIdHash).collection(\"bulkText\");\n\n            let allDocs = await bulkText.orderBy(\"id\").get();\n            let text = this.state.value;\n            if(allDocs){\n                allDocs.forEach((doc) => {\n                    text += doc.data().text;\n                })\n            };    \n            this.setState({\n                value: text,\n                oldValue: text\n            });\n        }\n        catch{\n        }\n        finally{\n            this.setState({\n                isLoadingText: false\n            });\n            if(!isNullOrUndefined(this.textarea))\n                this.textarea.focus();\n        }        \n    }\n\n    oldTooltips(){\n        return (\n            <div  style={{marginLeft: '1em'}} className='addBlocksPane'>\n                <p className='tooltips-list-bulkdraft'>**The following key points are important while contributing to any story. Click on the info icons to learn more<br/>\n                </p>\n                <ol className='tooltips-list-bulkdraft bulkdraft-list'>\n                    <li>\n                        How paragraphs get converted into blocks. \n                        <a className='tooltipPara tooltips-bulkdraft' onClick={(e)=>{this.showLocalTooltip('para')}} >\n                            <Info style={{fontSize:'19px'}}/>\n                        </a>\n                        <Joyride\n                        styles={{\n                            options: {\n                            arrowColor: '#e3ffeb',\n                            beaconSize: '4em',\n                            primaryColor: '#05878B',\n                            backgroundColor: '#e3ffeb',\n                            overlayColor: 'rgba(10,10,10, 0.4)',\n                            width: 900,\n                            zIndex: 1000,\n                            }\n                            }}\n                            steps={this.state.adhocTooltip.para.text}\n                            run = {this.state.adhocTooltip.para.flag}\n                            callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'para')}}                    \n                            />  \n                        \n                    </li>\n                    <li>\n                        Role of the title hashtag in ordering of content \n                        <a className='tooltipHashtag tooltips-bulkdraft' onClick={(e)=>{this.showLocalTooltip('hashtag')}} >\n                            <Info style={{fontSize:'19px'}}/>\n                        </a>\n                        <Joyride\n                        styles={{\n                            options: {\n                            arrowColor: '#e3ffeb',\n                            beaconSize: '4em',\n                            primaryColor: '#05878B',\n                            backgroundColor: '#e3ffeb',\n                            overlayColor: 'rgba(10,10,10, 0.4)',\n                            width: 900,\n                            zIndex: 1000,\n                            }\n                            }}\n                            steps={this.state.adhocTooltip.hashtag.text}\n                            run = {this.state.adhocTooltip.hashtag.flag}\n                            callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'hashtag')}}                    \n                            />  \n                    </li>\n                    <li>\n                        Role of the title hashtag in the creation of the story summary \n                        <a className='tooltipSummary tooltips-bulkdraft' onClick={(e)=>{this.showLocalTooltip('summary')}} >\n                            <Info style={{fontSize:'19px'}}/>\n                        </a>\n                        <Joyride\n                        styles={{\n                            options: {\n                            arrowColor: '#e3ffeb',\n                            beaconSize: '4em',\n                            primaryColor: '#05878B',\n                            backgroundColor: '#e3ffeb',\n                            overlayColor: 'rgba(10,10,10, 0.4)',\n                            width: 900,\n                            zIndex: 1000,\n                            }\n                            }}\n                            steps={this.state.adhocTooltip.summary.text}\n                            run = {this.state.adhocTooltip.summary.flag}\n                            callback={(data)=>{this.handleAdhocTooltipJoyrideCallback(data,'summary')}}                    \n                            />  \n                    </li>\n                </ol>                \n            </div>\n        );\n    }\n\n    getBulkPreviewText(){\n        if(this.state.previewEditorType['delims']){\n            return this.state.value;\n        }\n        else if(this.state.previewEditorType['translate']){\n            return this.state.translatedValue;\n        }\n    }\n\n    setTranslatedText(text){\n        this.setState({\n            translatedValue: text\n        });\n    }\n\n    render(){\n        return(\n            <div className='bulkDraftBlocksPaneContainer'>\n                {this.state.isSavingBlocks || this.state.isLoadingText || this.state.isSavingText?\n                    <div>\n                        <div style={{padding:'3px', textAlign:'center'}}>\n                                    {this.state.isSavingBlocks?\n                                        <p className=\"processingDraftBlockText\">\n                                            We are processing your contribution. Kindly wait for a few moments.\n                                        </p>\n                                        :\n                                        null\n                                    }\n                                    {this.state.isSavingText?\n                                        <p className=\"processingDraftBlockText\">\n                                            We are saving your contribution. Kindly wait for a few moments.\n                                        </p>\n                                        :\n                                        null\n                                    }\n                                    \n                        </div>                        \n                        <div style={{margin:'auto',width:'50px'}}>\n                            <Loader \n                            type=\"TailSpin\"\n                            color=\"#00BFFF\"\n                            height=\"50\"\t\n                            width=\"50\"\n                            /> \n                        </div>\n                    </div>\n                    :\n                    <div>\n                        <div  style={{marginLeft: '1em'}} className='addBlocksPane'>\n                                <p style={{fontSize:'13px', color:'grey', fontStyle:'italic'}}>Copy paste your content. Your content must be divided into paragraphs. Add subtitles for each para if needed. <br/> \n                                For example, copy paste the entire text in red as input. \n                                    <a href='https://youtu.be/SCDA-rUVdMA?t=192' target='blank'>                            \n                                        Learn More\n                                    </a>\n                                </p>\n                                <p className='copyBlockBulkText' style={{fontSize:'13px', color:'red', fontStyle:'italic', background:'rgba(255,0,0,0.3)'}}>                           \n                                    # Avengers<br/>\n                                    Thor, Rogers and Ironman are the Avengers.<br/><br/>\n                                    Thor is from Asgard\n                                </p>\n                        </div>\n\n                        <div className='bulkDraftBlocksPaneTitle' style={{marginBottom:'0'}}>Advanced options</div>\n                        \n                        <div className=\"bulk-draft-options-container\" style={{marginTop:'0'}}>\n                                <Button \n                                    variant=\"contained\" \n                                    className={\"advancedImageOption \" + (this.state.openOcr ? 'advancedImageOptionSelected' : 'advancedImageOptionUnselected')} \n                                    onClick={() => {this.toggleAdvancedTab('ocr')}}>\n                                        <div style={{fontWeight:'bold'}}>Retrieve text from image</div>                                                                    \n                                </Button>\n                                <Button \n                                    variant=\"contained\" \n                                    className={\"advancedImageOption \" + (this.state.openArticleLink ? 'advancedImageOptionSelected' : 'advancedImageOptionUnselected')}\n                                    onClick={() => {this.toggleAdvancedTab('article')}}>\n                                        <div style={{fontWeight:'bold'}}>Retrieve text from article</div>                                                                    \n                                </Button>  \n                                <Button \n                                    variant=\"contained\" \n                                    className={\"advancedImageOption \" + (this.state.openFilterText ? 'advancedImageOptionSelected' : 'advancedImageOptionUnselected')}\n                                    onClick={() => {this.toggleAdvancedTab('filterText')}}>\n                                        <div style={{fontWeight:'bold'}}>Quickfilter</div>                                                                    \n                                </Button>  \n                                <Button\n                                    variant=\"contained\" \n                                    className={\"advancedImageOption \" + (this.state.openTranslateText ? 'advancedImageOptionSelected' : 'advancedImageOptionUnselected')}\n                                    onClick={() => {this.toggleAdvancedTab('translateText')}}>\n                                        <div style={{fontWeight:'bold'}}>Translate</div>                                                                    \n                                </Button>                              \n                        </div>\n\n                        {this.state.openOcr?\n                            <OcrComponent\n                                addText={this.addText}\n                                closeComponent={this.closeAdvancedTabs}\n                                uIdHash={this.props.uIdHash}\n                                bId={this.props.bId}\n                                uId={this.props.uId}\n                                ></OcrComponent>\n                            :\n                            null\n                        }\n\n                        {this.state.openArticleLink?\n                            <ArticleLinkComponent\n                                addText={this.addText}\n                                closeComponent={this.closeAdvancedTabs}\n                            ></ArticleLinkComponent>\n                            :\n                            null\n                        }\n\n                        {this.state.openFilterText?\n                            <FilterTextComponent\n                                addText={this.reformText}\n                                text={this.state.value}\n                                togglePreview={this.togglePreview}\n                                setDelims = {this.setDelims}\n                            ></FilterTextComponent>\n                            :\n                            null\n                        }\n\n                        {this.state.openTranslateText?\n                            <TranslateTextComponent\n                                updateText={this.reformText}\n                                text={this.state.value}\n                                lang = {this.props.lang}\n                                translatedText={this.state.translatedValue}\n                                setTranslatedText = {this.setTranslatedText}\n                            ></TranslateTextComponent>\n                            :\n                            null\n                        }\n\n                        <div className='bulkDraftBlocksPaneTitle'>Input your text here</div>\n                        <Joyride\n                        styles={{\n                            options: {\n                            arrowColor: '#e3ffeb',\n                            beaconSize: '4em',\n                            primaryColor: '#05878B',\n                            backgroundColor: '#e3ffeb',\n                            overlayColor: 'rgba(10,10,10, 0.4)',\n                            width: 900,\n                            zIndex: 1000,\n                            }\n                            }}\n                            steps={this.state.tooltipText.addBlocks}\n                            run = {this.state.showTooltip.addBlocks}                    \n                            />  \n                        <div style={{display:'flex', flexWrap: 'wrap'}}>\n                            <div className={(Object.keys(this.state.previewEditorType).length==0? 'bulkEdit-nonPreview': 'bulkEdit-preview')}>\n                                <form className='addBlocksPaneInput'>\n                                    <label>\n                                        <Textarea \n                                        inputRef={tag => (this.textarea = tag)}\n                                        type=\"text\"\n                                        value={this.state.value}\n                                        onKeyPress={this.handleKeyPress}\n                                        placeholder={this.state.placeholder}\n                                        onChange={(e) => { this.handleChange(e)}}\n                                        minRows=\"10\"\n                                        onKeyUp = {this.sendMessage}\n                                        style={{\n                                            background: 'white',\n                                            borderRadius:'5px',\n                                            borderWidth:'2px', \n                                            borderStyle:'solid', \n                                            borderColor:'black',\n                                            marginLeft:'1%',\n                                            marginRight:'1%',\n                                            paddingTop:'6px',\n                                            paddingBottom:'6px',\n                                            width:'95%',\n                                            color: 'blue',\n                                            fontWeight:'500',\n                                            fontSize: '16px',\n                                            fontStyle: 'normal',\n                                            maxHeight: '1150px',\n                                            overflowY:  'auto'\n                                            }}/>\n                                    </label>\n                                </form>\n                            </div>\n                            <div \n                                className = {(Object.keys(this.state.previewEditorType).length==0? 'bulkPreview-nonPreview': 'bulkEdit-preview')}\n                                style =  {{maxHeight:'1165px', overflowY:'auto'}}>\n                                <BulkBlockEditable\n                                    style={{width:'100%'}}\n                                    value = {this.getBulkPreviewText()}\n                                    type = {this.state.previewEditorType}\n                                    delims = {this.state.delims}></BulkBlockEditable>  \n                            </div>\n                        </div>\n                        <div className=\"bulk-draft-options-container\" style={{marginTop:'0'}}>\n                            <Button\n                                variant=\"contained\"  \n                                className=\"convertToBlocksButton saveBlocksInBulk\" \n                                onClick={() => this.toggleSaveDialog(true)}>\n                                    <div>Confirm</div>\n                            </Button>\n                            <Dialog\n                                open={this.state.openConfirmDialog}\n                                TransitionComponent={Transition}\n                                keepMounted\n                                onClose={() => this.toggleSaveDialog(false)}\n                                aria-labelledby=\"alert-dialog-slide-title\"\n                                aria-describedby=\"alert-dialog-slide-description\"\n                            >\n                                <DialogTitle id=\"alert-dialog-slide-title\">{\"Save content as blocks\"}</DialogTitle>\n                                <DialogContent>\n                                <DialogContentText id=\"alert-dialog-slide-description\">\n                                    This action will convert your text to blocks that can be added to your story, and remove all existing text from here. \n                                    Do you confirm?\n                                </DialogContentText>\n                                </DialogContent>\n                                <DialogActions>\n                                <Button onClick={() => this.toggleSaveDialog(false)} color=\"primary\">\n                                    No\n                                </Button>\n                                <Button onClick={this.saveDraftInBulk} color=\"primary\">\n                                    Yes\n                                </Button>\n                                </DialogActions>\n                            </Dialog>\n                            <Button\n                                variant=\"contained\"  \n                                className=\"saveDraftBulkBlockprobeButton\" \n                                onClick={this.saveBulkDraft}>\n                                    <div>Save draft</div>\n                            </Button>\n                            <Button\n                                variant=\"contained\"  \n                                className=\"cancelBlockBackButton\" \n                                onClick={this.closeBulkDraft}>\n                                    <div>Close</div>\n                            </Button>\n                        </div>                        \n                    </div>\n                }                         \n            </div>\n        );\n    }\n\n}\nexport default BulkDraftBlockComponent;\n\n/*\n<BulkBlockEditable\n                    value = {this.state.value}\n                    onChange = {this.handleChange}></BulkBlockEditable>  \n                    */","import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Textarea from 'react-textarea-autosize';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Joyride from 'react-joyride';\nimport './EntityPane.css';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\n\nclass EntityPaneView extends React.Component {\n\n    constructor(props){\n        super(props);\n        // closeEntityPane, this.props.investigationGraph, bId, uIdHash, finishTooltip\n\n        this.state={\n            entities:[],\n            haveEntitiesLoaded: false,\n            newEntity: '',\n            entityPresent: {},\n            tooltipText:{\n                entityPane:[                    \n                    {                    \n                        title: 'Let us add characters (entities) to your story',\n                        target: '.createNewEntitiesPane',\n                        content: 'Copy paste the text in red and press enter',\n                        disableBeacon: true\n                    }             \n                ],\n                cancelButton:[                    \n                    {                    \n                        title: 'Well done! Your entities have been defined!',\n                        target: '.cancelEntityPaneButton',\n                        content: 'Click on close. We are done here!',\n                        disableBeacon: false,\n                        placementBeacon: 'left',\n                        event: 'hover'\n                    }             \n                ]\n            },\n            showTooltip:{\n                cancel: false\n            }\n        }\n\n        this.addEntityToList = this.addEntityToList.bind(this);\n        this.makeEntityUppercase = this.makeEntityUppercase.bind(this);\n        this.initEntities = this.initEntities.bind(this);\n        this.getEntities = this.getEntities.bind(this);\n        this.removeEntity = this.removeEntity.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.clickOkayButton = this.clickOkayButton.bind(this);\n        this.addEntitiesInBulk = this.addEntitiesInBulk.bind(this);\n        this.closeEntityPane = this.closeEntityPane.bind(this);\n    }\n\n    componentDidUpdate(){\n\n    }\n\n    initEntities(snapshot, scope){\n        var entities = snapshot.data().entities;        \n        var isEntityPresent = scope.state.entityPresent;\n        for(var i=0; i<entities.length;i++){\n            isEntityPresent[entities[i].label] = entities[i].canRemove;\n        }\n        \n        scope.props.updateEntityPaneList(entities);\n        scope.setState({\n            entityPresent: isEntityPresent,\n            entities: entities,\n            haveEntitiesLoaded: true\n        });         \n    }\n\n    componentDidMount(){\n        //Get data for entities\n        var scope = this;\n        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n        .collection(\"users\").doc(this.props.uIdHash).collection(\"session\")\n        .doc(\"entityPane\").get().then((snapshot) => {\n            if(snapshot.exists)\n                scope.initEntities(snapshot,scope);\n        });\n    }\n\n    addEntitiesInBulk(totalStr){\n        var entityArr = totalStr.split(',');\n        for(var i=0; i<entityArr.length; i++){\n            var str = entityArr[i].trim();\n            if(str.length > 0)\n                this.addEntityToList(str);\n        }\n        str = '';\n        var showTooltip = this.state.showTooltip;\n\n        if(totalStr.trim() != ''){\n            if(this.props.entityPaneTooltip){                   \n                showTooltip.cancel = true;\n            }                \n        }             \n        this.setState({\n            newEntity: str,\n            showTooltip: showTooltip\n        }); \n\n    }\n\n    clickOkayButton(){\n        var totalStr = this.state.newEntity;\n        this.addEntitiesInBulk(totalStr);\n    }\n\n    handleKeyDown(event){\n        if (event.key === 'Enter') {\n            var totalStr= event.target.value;\n            this.addEntitiesInBulk(totalStr);\n          }\n    }\n\n\n    handleChange(event, type) {\n\n        var shouldUpdate = true;\n        if(type!=\"date\" && type!=\"time\"){            \n            event.target.value = event.target.value.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n            event.target.value = event.target.value.replace('\\t','');\n            event.target.value.trim();          \n        }\n\n        if(shouldUpdate){\n            if(type==\"new-entity\"){\n                this.setState({newEntity: event.target.value});\n            }\n\n        }\n      }\n    makeEntityUppercase(value){\n        return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase(); \n    }  \n\n    addEntityToList(entityLabel){\n        var entityList = this.state.entities;\n        var isEntityPresent = this.state.entityPresent;\n        entityLabel = this.makeEntityUppercase(entityLabel);\n        if(!(entityLabel in isEntityPresent) && entityLabel.toLowerCase()!='all' && entityLabel.toLowerCase()!='none'){\n            entityList.push({                \n                canRemove: true, \n                label: entityLabel, \n            });\n            isEntityPresent[entityLabel] = true;\n\n            firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n            .collection(\"users\").doc(this.props.uIdHash).collection(\"session\")\n            .doc(\"entityPane\").set({\n                entities:entityList\n            });\n\n            this.props.updateEntityPaneList(this.getEntities());\n            this.setState({\n                entities: entityList,\n                newEntity: '',\n                entityPresent: isEntityPresent\n            });\n        }       \n    }\n\n    removeEntity(entity){\n        var entityList = this.state.entities.filter(e => e.label!=entity.label);\n        var isEntityPresent = this.state.entityPresent;\n        delete isEntityPresent[entity.label];\n        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n            .collection(\"users\").doc(this.props.uIdHash).collection(\"session\")\n            .doc(\"entityPane\").set({\n                entities:entityList\n            });\n        this.setState({\n            entities: entityList,\n            entityPresent: isEntityPresent\n        });\n    }\n\n    BlockEntity(entity){\n        return(\n        <span className=\"block-entity\">\n            {entity.label}\n            {entity.canRemove? \n            <a style={{marginLeft:'5px', color: 'black', cursor: 'pointer'}} \n            onClick={() => { this.removeEntity(entity)}}>X</a>\n            : \n            null}\n        </span>\n        );   \n    }\n\n    getEntities(){\n\n        var entities = this.state.entities;\n        // console.log(entities);\n        var isEntityPresent = {};\n        for(var i=0; i<entities.length; i++){\n            isEntityPresent[entities[i].label]=entities[i].canRemove;\n        }\n        if(this.props.investigationGraph !=null){\n            Object.keys(this.props.investigationGraph).forEach(function(entityLabel) {\n                if(!(entityLabel in isEntityPresent)){\n                    entities.push({                \n                        canRemove: false, \n                        label: entityLabel, \n                    });\n                }\n                isEntityPresent[entityLabel] = false;\n            });\n        }\n\n        \n        for(var i=0;i<entities.length;i++){\n            entities[i].canRemove = isEntityPresent[entities[i].label];\n        }\n        // console.log(entities);\n        return entities;\n    }\n\n    closeEntityPane(){\n        var shouldFinishTooltips = false;\n        if(this.state.showTooltip.cancel)\n            shouldFinishTooltips = true;\n        this.props.closeEntityPane(shouldFinishTooltips);\n    }\n\n    render(){\n\n        /*\n         Create render template for the entities\n         */\n        var renderBlockEntities = '';\n        var entities = this.getEntities();\n        if(entities!=null && entities.length>0){            \n            renderBlockEntities = entities.map((blockEntity) => \n               this.BlockEntity(blockEntity)\n           );            \n       }\n\n        return(\n            <div className='entityPaneContainer'>\n                <div className='entityPaneTitle'>Entities of your story</div>\n                <div>\n                    {renderBlockEntities}\n                </div>\n                <Joyride\n                styles={{\n                    options: {\n                      arrowColor: '#e3ffeb',\n                      beaconSize: '3em',\n                      primaryColor: '#05878B',\n                      backgroundColor: '#e3ffeb',\n                      overlayColor: 'rgba(10,10,10, 0.4)',\n                      width: 900,\n                      zIndex: 1000,\n                    }\n                  }}\n                    steps={this.state.tooltipText.entityPane}\n                    run = {this.props.entityPaneTooltip}                    \n                    /> \n                 \n                <TextField \n                                type=\"text\"\n                                variant=\"outlined\"\n                                multiline\n                                className=\"createNewEntitiesPane\"\n                                value={this.state.newEntity}\n                                onChange={(e) => { this.handleChange(e,\"new-entity\")}}\n                                onKeyDown={(e) => { this.handleKeyDown(e)}}\n                                placeholder = \"Input your entity names seperated by ',' and press 'Enter key' or 'Ok button'\"\n                                rowsMax=\"2\"\n                                rows=\"1\"\n                                style={{\n                                    background: 'white',\n                                    marginTop:'6px',\n                                    marginBottom:'6px',\n                                    minWidth:'60%',\n                                    maxWidth: '80%',\n                                    marginLeft:'1em',\n                                    color: 'darkBlue',\n                                    fontWeight:'600'\n                                    }}/>\n                <div style={{marginLeft:'1em'}}>\n                    <span style={{fontSize:'14px', color:'grey', fontStyle:'italic'}}>**Input your entity names seperated by comma and press 'Enter key' or 'Ok button'. For example, copy-paste the text below shown in red as input. <a href='https://youtu.be/SCDA-rUVdMA?t=122' target='blank'>Learn More</a><br/></span> \n                    <span style={{fontSize:'14px', fontWeight:'bold', color:'red', background:'rgba(255,0,0,0.3)', fontStyle:'italic'}}>Ironman, Thor, Rogers, Asgard, Thanos</span>\n                </div>\n                <Joyride\n                styles={{\n                    options: {\n                      arrowColor: '#e3ffeb',\n                      beaconSize: '4em',\n                      primaryColor: '#05878B',\n                      backgroundColor: '#e3ffeb',\n                      overlayColor: 'rgba(10,10,10, 0.4)',\n                      width: 900,\n                      zIndex: 1000\n                    }\n                  }}\n                    steps={this.state.tooltipText.cancelButton}\n                    run = {this.state.showTooltip.cancel}                    \n                    />                                     \n                <div className=\"draft-add-new-entity-container\">                                       \n                        <Button\n                            color=\"primary\" \n                            variant=\"contained\" \n                            className=\"cancelBlockButton cancelEntityPaneButton\" \n                            onClick={this.closeEntityPane}>\n                                <div>Close</div>\n                        </Button>  \n                        {this.state.newEntity != ''?\n                            <Button \n                                color=\"primary\" \n                                variant=\"contained\"\n                                className=\"addEntityButton\" \n                                onClick={this.clickOkayButton}>\n                                    <div>Ok</div>\n                            </Button>        \n                                :\n                            null}\n                </div>   \n            </div>\n        );\n    }\n}\nexport default EntityPaneView;","import React, { Component } from 'react';\nimport  MultiSelectReact  from 'multi-select-react';\nimport Button from '@material-ui/core/Button';\nimport './ImagePane.css';\nimport Textarea from 'react-textarea-autosize';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport Loader from 'react-loader-spinner';\nimport ImageUploader from 'react-images-upload';\nimport imageCompression from 'browser-image-compression';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport Img from 'react-image';\nimport { isNullOrUndefined } from 'util';\n\nclass ImagePaneView extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state={\n            firstEntitySelectList: [\n\n            ],\n            selectedEntityUrl: '',\n            selectedEntity: '',\n            changedEntities: {},\n            uploadedImages: {},\n            entityTabIndex: {},\n            selectedTabIndex: 0,\n            isImageUploading: false,\n            hasUpdated: false\n        }\n\n        this.generateEntityLists = this.generateEntityLists.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.submitEntityImage = this.submitEntityImage.bind(this);\n        this.canSubmit = this.canSubmit.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n        this.getImageOptions = this.getImageOptions.bind(this);\n        this.getImageUrlFromFile = this.getImageUrlFromFile.bind(this);\n        this.onChangeImageTab = this.onChangeImageTab.bind(this);\n        this.removeImageFromDb = this.removeImageFromDb.bind(this);\n        this.closeImagePane = this.closeImagePane.bind(this);\n        this.isImagePresent = this.isImagePresent.bind(this);\n    }\n\n    async submitEntityImage(){\n        if(this.state.selectedEntity.length > 0){\n            let tasks = [];\n            for(let key in this.state.changedEntities){\n                let url = this.state.changedEntities[key];\n                let imageUploadtype = 0;\n                if(key in this.state.entityTabIndex && this.state.entityTabIndex[key]==1){\n                    //Uploaded image\n                    url = this.state.uploadedImages[key];\n                    imageUploadtype = 1;\n                }\n                var newImage = {\n                    entity: key,\n                    url: url,\n                    timestamp: Date.now(),\n                    imageUploadtype: imageUploadtype\n                }\n\n                let taskResult = firebase.firestore().collection(\"Blockprobes\").\n                    doc(this.props.bId).collection(\"images\").\n                    doc(newImage.entity).set(newImage);\n                tasks.push(taskResult);                \n            }\n            await Promise.all(tasks);\n            this.props.refreshBlockprobe();\n        }\n    }\n\n    generateEntityLists(){\n        var count = 1;\n        var firstEntityList = this.state.firstEntitySelectList;\n        Object.keys(this.props.investigationGraph).forEach(function(entityLabel) {\n            firstEntityList.push({                \n                    value: false, \n                    label: entityLabel, \n                    id: count             \n            });           \n            count++;\n        });\n\n        firstEntityList.sort(function(a,b){\n            if(a.label.toLocaleLowerCase() == 'none')\n                return -1;\n            if(b.label.toLocaleLowerCase() == 'none')\n                return 1;\n            if(a.label.toLocaleLowerCase() < b.label.toLocaleLowerCase())\n                return -1;\n            return 1;\n        });\n       \n        let selectedEntity = '', url = '';\n        if(firstEntityList.length > 0){\n            selectedEntity = firstEntityList[0].label;\n            if(selectedEntity in this.props.imageMapping){\n                url = this.props.imageMapping[selectedEntity];\n            }\n            firstEntityList[0].value = true;\n        }\n        this.setState({\n            firstEntitySelectList: firstEntityList,\n            selectedEntity: selectedEntity,\n            selectedEntityUrl: url \n        });\n    }\n\n    firstEntityClicked(entityList) {\n        var selectedEntity = '', url = '';\n        for(var i=0; i<entityList.length; i++){\n            if(entityList[i].value){\n                selectedEntity = entityList[i].label;\n                if(selectedEntity in this.state.changedEntities){\n                    url = this.state.changedEntities[selectedEntity];\n                }\n                else if(selectedEntity in this.props.imageMapping){\n                    url = this.props.imageMapping[selectedEntity];\n                }\n            }\n        }\n        this.setState({ \n            firstEntitySelectList: entityList, \n            selectedEntity: selectedEntity,\n            selectedEntityUrl: url \n        });\n    }\n    \n    firstSelectedBadgeClicked(entityList) {\n        var selectedEntity = '', url = '';\n        for(var i=0; i<entityList.length; i++){\n            if(entityList[i].value){\n                selectedEntity = entityList[i].label;\n                if(selectedEntity in this.state.changedEntities){\n                    url = this.state.changedEntities[selectedEntity];\n                }\n                else if(selectedEntity in this.props.imageMapping){\n                    url = this.props.imageMapping[selectedEntity];\n                }\n            }\n        }\n\n        let selectedIndex = 0;\n        if(selectedEntity in this.state.entityTabIndex){\n            selectedIndex = this.state.entityTabIndex[selectedEntity];\n        }\n\n        this.setState({ \n            firstEntitySelectList: entityList, \n            selectedEntity: selectedEntity,\n            selectedEntityUrl: url,\n            selectedTabIndex: selectedIndex\n        });\n    }\n\n    componentDidMount(){\n        this.generateEntityLists();\n    }\n\n    handleChange(event, type) {\n\n        var shouldUpdate = true;\n        if(type!=\"date\" && type!=\"time\"){\n            var lastChar = event.target.value[event.target.value.length-1];\n            if(lastChar=='\\n' || lastChar=='\\t'){\n                shouldUpdate=false;\n            }\n        }\n\n        if(shouldUpdate){\n            if(type==\"entity\"){\n                let selectedEntityUrl = event.target.value;\n                let changedEntities = this.state.changedEntities;\n                let selectedEntity = this.state.selectedEntity;\n                if(this.state.selectedEntity){\n                    changedEntities[selectedEntity] = selectedEntityUrl;\n                }\n                \n                this.setState({\n                    selectedEntityUrl: selectedEntityUrl,\n                    changedEntities: changedEntities\n                });\n            }\n        }\n           \n      }\n\n    canSubmit(){\n      //  if(this.props.permit == 'CREATOR' && this.state.selectedEntity.length > 0)\n      //      return true;\n        return false;\n    }  \n\n    async uploadFileToDb(latestPicture){\n        let uploadedImages = this.state.uploadedImages;\n        let selectedEntity = this.state.selectedEntity;            \n        let scope = this;\n        let path = this.props.bId + '/' + selectedEntity;\n        let pathRef = firebase.storage().ref(path);\n        this.setState({\n            isImageUploading: true\n        });\n        try{\n            await pathRef.put(latestPicture);\n\n            let url = await pathRef.getDownloadURL();\n    \n            uploadedImages[selectedEntity] = url;    \n            var newImage = {\n                    entity: selectedEntity,\n                    url: url,\n                    timestamp: Date.now(),\n                    imageUploadtype: 1\n                }\n    \n            await firebase.firestore().collection(\"Blockprobes\").\n                    doc(scope.props.bId).collection(\"images\").\n                    doc(newImage.entity).set(newImage);\n                         \n            scope.setState({\n                        uploadedImages: uploadedImages,\n                        isImageUploading: false,\n                        hasUpdated: true\n                    });\n        }\n        catch(error){\n            scope.setState({isImageUploading: false});\n        }        \n    }\n\n    async removeImageFromDb(){\n        let uploadedImages = this.state.uploadedImages;\n        let selectedEntity = this.state.selectedEntity;            \n        let scope = this;\n        let path = this.props.bId + '/' + selectedEntity;\n        let pathRef = firebase.storage().ref(path);\n        this.setState({\n            isImageUploading: true\n        });\n\n        try{    \n            uploadedImages[selectedEntity] = null;\n\n            var newImage = {\n                entity: selectedEntity,\n                url: '',\n                timestamp: Date.now(),\n                imageUploadtype: 1\n            }\n\n            await pathRef.delete();\n\n            await firebase.firestore().collection(\"Blockprobes\").\n                doc(scope.props.bId).collection(\"images\").\n                doc(newImage.entity).set(newImage);\n                         \n            scope.setState({\n                        uploadedImages: uploadedImages,\n                        isImageUploading: false,\n                        hasUpdated: true\n                    });\n        }\n        catch(error){\n            scope.setState({isImageUploading: false});\n        }   \n    }\n\n    async onDrop(picture) {\n        if(picture.length > 0)\n        {\n            let latestPicture = picture[picture.length-1];\n            \n\n            var options = {\n                maxSizeMB: 0.015,\n                maxWidthOrHeight: 1920,\n                useWebWorker: true\n              }\n              try {\n                let compressedFile = await imageCompression(latestPicture, options);\n                this.uploadFileToDb(compressedFile);\n              } catch (error) {\n\n              }\n        }\n    }\n\n    getImageUrlFromFile(entity){\n        let uploadedImages = this.state.uploadedImages;\n        let url = null;\n        if(entity in uploadedImages)\n            url = uploadedImages[entity];\n        else if(entity in this.props.imageMapping)\n            url = this.props.imageMapping[entity];\n        return url;\n    }\n\n    isImagePresent(entity){\n        let uploadedImages = this.state.uploadedImages;\n        let url = null;\n        if(entity in this.props.imageMapping)\n            url = this.props.imageMapping[entity];\n        if(entity in uploadedImages)\n            url = uploadedImages[entity];\n        if(url == null || url == '')\n            return false;\n        return true;\n    }\n\n    onChangeImageTab(index, lastIndex, event){\n        let entityTabIndex = this.state.entityTabIndex;\n        entityTabIndex[this.state.selectedEntity] = index;\n        \n        let changedEntities = this.state.changedEntities;\n        changedEntities[this.state.selectedEntity] = '';\n\n        this.setState({\n            selectedTabIndex: index,\n            entityTabIndex: entityTabIndex\n        });\n    }\n\n    /*\n        Old url input\n          <TabPanel>\n                            <div>\n                                <div className=\"imagepane-url-container\">\n                                        <form>\n                                            <label>\n                                                <Textarea \n                                                    type=\"text\"\n                                                    placeholder = \"Image url\"\n                                                    value={this.state.selectedEntityUrl}\n                                                    onChange={(e) => { this.handleChange(e,\"entity\")}}\n                                                    maxRows=\"2\"\n                                                    minRows=\"1\"\n                                                    style={{\n                                                        background: 'white',\n                                                        borderWidth:'2px', \n                                                        borderStyle:'solid', \n                                                        borderColor:'black',\n                                                        paddingTop:'6px',\n                                                        paddingBottom:'6px',\n                                                        width:'95%'\n                                                        }}/>\n                                            </label>\n                                        </form>\n                                </div>\n                                <div>\n                                    <Img src={[this.state.selectedEntityUrl]}\n                                        style={{width:'200px', maxHeight:'200px', marginLeft: '1.1em'}}></Img>\n                                </div>\n                            </div>\n                        </TabPanel>\n\n\n    */\n\n    getImageOptions(){\n        return (\n            <div style={{marginBottom: '40px'}}>\n                <Tabs selectedIndex={this.state.selectedTabIndex}\n                    onSelect={this.onChangeImageTab}>\n                        <TabList>\n                            <Tab>Upload Image</Tab>\n                        </TabList>\n                        \n                        <TabPanel>\n                            <div>\n                                <ImageUploader\n                                    withIcon={true}\n                                    label={'Max-size: 5MB, Accepted formats: jpg|png|jpeg|gif|svg'}\n                                    buttonText='Choose image'\n                                    onChange={this.onDrop}\n                                    singleImage={true}\n                                    imgExtension={['.jpg', '.gif', '.png', '.svg','.jpeg']}\n                                    maxFileSize={5242880}\n                                />\n                                <div>\n                                    {this.state.isImageUploading?\n                                        <div style={{margin:'auto',width:'50px'}}>\n                                            <Loader \n                                            type=\"TailSpin\"\n                                            color=\"#00BFFF\"\n                                            height=\"50\"\t\n                                            width=\"50\"\n                                            /> \n                                        </div>\n                                        :\n                                        <div>\n                                            {this.isImagePresent(this.state.selectedEntity)?\n                                                <div style={{textAlign: 'center', marginBottom: '35px'}}>\n                                                    <span className=\"removeImageButton\" onClick={this.removeImageFromDb}>\n                                                        Remove image\n                                                    </span>\n                                                </div>\n                                                :\n                                                null\n                                            }                                            \n                                            <div style={{textAlign: 'center'}}>\n                                                <Img src={[this.getImageUrlFromFile(this.state.selectedEntity)]}\n                                                    style={{width:'200px', maxHeight:'200px', marginLeft: '1.1em'}}></Img>\n                                            </div>\n                                        </div>\n                                    }                                    \n                                </div>\n                            </div>\n                        </TabPanel>                  \n                </Tabs>\n            </div>\n        )\n    }\n\n    closeImagePane(){\n        if(this.state.hasUpdated)\n            this.props.refreshBlockprobe();\n        this.props.closeImagePane();\n    }\n\n    render(){\n\n        const selectedOptionsStyles = {\n            color: \"white\",\n            backgroundColor: \"rgb(117, 106, 214)\",\n            borderRadius:\"20px\",\n            fontSize:'0.6em',\n            padding:'10px',\n            maxWidth: '92%',\n            wordWrap: 'break-word'\n        };\n        const optionsListStyles = {\n            backgroundColor: \"darkcyan\",\n            color: \"white\",\n\n        };\n\n        return (\n            <div>\n                <div className='imagepane-filter-container'>                \n                \n                    <div className=\"imagepane-dropdown-container\">\n                        <MultiSelectReact \n                        options={this.state.firstEntitySelectList}\n                        optionClicked={this.firstEntityClicked.bind(this)}\n                        selectedBadgeClicked={this.firstSelectedBadgeClicked.bind(this)}\n                        selectedOptionsStyles={selectedOptionsStyles}\n                        optionsListStyles={optionsListStyles} \n                        isSingleSelect={true}\n                        isTextWrap={false} \n                        />\n                        \n                    </div>     \n\n                    {this.canSubmit()?\n                        <Button\n                            color=\"primary\" \n                            variant=\"contained\" \n                            className=\"imagePaneButton\" onClick={this.submitEntityImage}>Save</Button>\n                        :\n                        null\n                    }\n                    \n                    <Button\n                        color=\"primary\" \n                        variant=\"contained\" \n                        className=\"imagePaneButton\" onClick={this.closeImagePane}>Close</Button>              \n                </div>\n                {this.state.selectedEntity == ''?\n                    null\n                    :\n                    this.getImageOptions()   \n                }                \n            </div>\n        );\n    }\n}\nexport default ImagePaneView;","import React, { Component } from 'react';\nimport Textarea from 'react-textarea-autosize';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport  * as Utils from '../../../common/utilSvc';\nimport './SingleEntityView.css';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport { isNull, isNullOrUndefined } from 'util';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nclass SingleEntityView extends React.Component {\n\n    constructor(props){\n        super(props);\n        //entity, bpId, uIdHash\n\n        this.state={\n            entityName: null,\n            label: null,\n            dialogType: null,\n            dialogText:{\n                delete:{\n                    title: \"Delete entity\",\n                    desc: \"You are about to delete this entity. This action cannot be reversed.\\nDo you confirm?\"\n                },\n                rename:{\n                    title: \"Rename entity\",\n                    desc: \"You are about to rename this entity. This action cannot be reversed.\\nDo you confirm?\"\n                },\n                selected:{\n                    title: null,\n                    desc: null\n                }\n            },\n            dialog: false,\n        }\n\n        if(!isNullOrUndefined(props.entity) && !isNullOrUndefined(props.entity.label)){\n            this.state.entityName = JSON.parse(JSON.stringify(props.entity.label));\n            this.state.label = JSON.parse(JSON.stringify(props.entity.label));\n        }\n\n        this.handleChange = this.handleChange.bind(this);\n        this.isEntityNameChanged = this.isEntityNameChanged.bind(this);\n        this.renameEntity = this.renameEntity.bind(this);\n        this.deleteEntity = this.deleteEntity.bind(this);\n        this.createBlockForEntityChange = this.createBlockForEntityChange.bind(this);\n        this.toggleDialog = this.toggleDialog.bind(this);\n        this.performAction = this.performAction.bind(this);\n    }\n\n    toggleDialog(value, type){\n        let dialogText = this.state.dialogText;\n        if(type == 'delete'){\n            dialogText.selected.title = dialogText.delete.title;\n            dialogText.selected.desc = dialogText.delete.desc;\n        }\n        else if(type == 'rename'){\n            dialogText.selected.title = dialogText.rename.title;\n            dialogText.selected.desc = dialogText.rename.desc;\n        }\n        this.setState({\n            dialog: value,\n            dialogType: type\n        });\n    }\n\n    performAction(type){\n        if(type == 'delete'){\n            this.deleteEntity();\n        }\n        else if(type  == 'rename'){\n            this.renameEntity();   \n        }\n\n        this.setState({\n            dialog: false,\n            dialogType: null\n        });\n    }\n\n    handleChange(event, type) {\n        let str = event.target.value;\n        var shouldUpdate = true;\n        shouldUpdate = Utils.shouldUpdateText(str, ['\\n','\\t']);\n        if(shouldUpdate){\n            if(type==\"entity-name\"){\n                this.setState({entityName: event.target.value});\n            }\n        }\n      }\n\n    isEntityNameChanged(){\n        let entityName = this.state.entityName;\n        if(!isNullOrUndefined(entityName) && !isNullOrUndefined(this.props.entity.label) \n            && entityName.length>0 && entityName!=this.props.entity.label)\n            return true;\n        return false;\n    }\n\n    componentWillReceiveProps(newProps){\n        if(newProps.entity != this.props.entity){\n            let entityName = JSON.parse(JSON.stringify(newProps.entity.label));\n            let label = JSON.parse(JSON.stringify(newProps.entity.label));\n            this.setState({\n                entityName:entityName,\n                label: label}\n            );\n        }\n    }\n\n    createBlockForEntityChange(currEntity, newEntity){\n        let entityMap = {\n            curr: currEntity,\n            new: newEntity\n        };\n\n        let fullBlock = {\n            title: '',\n            summary: '',\n            entities: [],\n            evidences: [],\n            referenceBlock: null,\n            timestamp: Date.now(),\n            actionType: 'entityChange',\n            entityMap: entityMap\n        };\n\n        this.props.commitBlockToBlockprobe(fullBlock);\n\n    }\n\n    renameEntity(){\n        let newName = this.state.entityName;\n        let oldName = JSON.parse(JSON.stringify(this.props.entity.label));\n\n        this.createBlockForEntityChange(oldName,newName);\n    }\n\n    deleteEntity(){\n        let newName = null;\n        let oldName = JSON.parse(JSON.stringify(this.props.entity.label));\n\n        this.createBlockForEntityChange(oldName,newName);\n    }\n\n    render(){\n        return(\n            <div>\n                <h4 className=\"manageSingleEntityTitle\"> Manage entity {this.state.label}</h4>\n                <Dialog\n                    open={this.state.dialog}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    onClose={() => this.toggleDialog(false,'delete')}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\">\n                    <DialogTitle id=\"alert-dialog-slide-title\">{this.state.dialogText.selected.title}</DialogTitle>\n                    <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n                        {this.state.dialogText.selected.desc}\n                    </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => this.toggleDialog(false,this.state.dialogType)} color=\"primary\">\n                            No\n                        </Button>\n                        <Button onClick={() => this.performAction(this.state.dialogType)} color=\"primary\">\n                            Yes\n                        </Button>\n                    </DialogActions>\n                </Dialog>                \n                <div className=\"entityEditLabelContainer\">\n                    <div style={{marginBottom:'6px'}}>Edit Name</div>\n                    <TextField \n                                type=\"text\"\n                                variant=\"outlined\"\n                                value={this.state.entityName}\n                                onChange={(e) => { this.handleChange(e,\"entity-name\")}}\n                                placeholder = \"Entity name\"\n                                multiline\n                                rowsMax=\"3\"\n                                rows=\"1\"\n                                style={{\n                                    background: 'white',\n                                    marginTop:'6px',\n                                    marginBottom:'6px',\n                                    minWidth:'40%',\n                                    maxWidth: '50%',\n                                    color: 'darkBlue',\n                                    fontWeight:'600'\n                                    }}/>\n                </div>\n                <div className=\"entityOptionsContainer\">\n                    {this.isEntityNameChanged()?\n                        <Button\n                            variant=\"contained\" \n                            className=\"renameEntityButton\" \n                            onClick={() => {this.toggleDialog(true,'rename')}}>\n                                <div>Rename</div>\n                        </Button>\n                        :\n                        null\n                    }\n\n                    <Button\n                        variant=\"contained\" \n                        className=\"deleteEntityButton\" \n                        onClick={() => {this.toggleDialog(true,'delete')}}>\n                            <div>Delete</div>\n                    </Button>\n                        \n                </div>\n\n            </div>\n        )\n    }\n}\nexport default SingleEntityView;","import React, { Component } from 'react';\nimport Textarea from 'react-textarea-autosize';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Chip from '@material-ui/core/Chip';\nimport Slide from '@material-ui/core/Slide';\nimport  * as Utils from '../../../common/utilSvc';\nimport './AddEdgeView.css';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport { isNull, isNullOrUndefined } from 'util';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\n\nconst filter = createFilterOptions();\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nclass AddEdgeView extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state ={\n            summary: '',\n            selectedEntities: []\n        }\n\n        this.confirmEdge = this.confirmEdge.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.getEntities = this.getEntities.bind(this);\n    }\n\n    handleChange(event, type) {\n        let str = event.target.value;\n        var shouldUpdate = true;\n        shouldUpdate = Utils.shouldUpdateText(str, ['\\n','\\t']);\n        if(shouldUpdate){\n            if(type==\"connection-description\"){\n                this.setState({summary: event.target.value});\n            }\n            else  if(type==\"entityA\"){\n                this.setState({entityA: event.target.value});\n            }\n        }\n      }\n\n    getEntities(investigationGraph, entityPane){\n        var entities = [];\n        // console.log(entities);\n        var isEntityPresent = {};\n        if(!isNullOrUndefined(investigationGraph)){\n            Object.keys(investigationGraph).forEach(function(entityLabel) {\n                if(!(entityLabel in isEntityPresent)){\n                    entities.push({                \n                        label: entityLabel, \n                    });\n                }\n                isEntityPresent[entityLabel] = false;\n            });\n        }\n        if(!isNullOrUndefined(entityPane)){\n            for(let i=0; i<entityPane.length; i++){\n                if(!(entityPane[i].label in isEntityPresent)){\n                    entities.push({\n                        label: entityPane[i].label\n                    });\n                }\n            }\n        }\n        // console.log(entities);\n        return entities;\n    }\n\n    getLatestIndex(){\n        let latestIndex = 0 ;\n        if(this.props.lastIndexDraftBlocks.length > 0)\n            latestIndex = Math.max(latestIndex, this.props.lastIndexDraftBlocks[this.props.lastIndexDraftBlocks.length - 1]);\n\n        if(this.props.lastIndex){\n            latestIndex = Math.max(latestIndex, this.props.lastIndex);\n        }\n        return latestIndex;\n    }\n\n    commitBlockToBlockprobe(){\n        let entities = [];\n        for(let i=0; i<this.state.selectedEntities.length; i++){\n            entities.push({\n                title: Utils.makeFirstLetterUppercase(this.state.selectedEntities[i]),\n                type: 'None'\n            });\n        }\n        let index = this.getLatestIndex();\n        index += 0.1;\n        let fullBlock = {\n            title: `#${index} `,\n            summary: this.state.summary,\n            entities: entities,\n            evidences: [],\n            referenceBlock: null,\n            timestamp: Date.now(),\n            actionType: 'ADD'\n        };\n        this.props.commitBlockToBlockprobe(fullBlock);\n    }\n\n    confirmEdge(){\n        // console.log(this.state.selectedEntities, this.state.summary);\n        this.commitBlockToBlockprobe();\n    }\n\n    render(){\n        let entityList = this.getEntities(this.props.investigationGraph, this.props.entityPane);\n        return (\n            <div>\n                <h4 className=\"addEdgeTitle\"> Add connection</h4>\n                <div className=\"addEdgeBlockTextContainer\">\n                    <TextField \n                                type=\"text\"\n                                variant=\"outlined\"\n                                value={this.state.summary}\n                                onChange={(e) => { this.handleChange(e,\"connection-description\")}}\n                                label = \"Add connection description\"\n                                multiline\n                                rowsMax=\"3\"\n                                rows=\"2\"\n                                style={{\n                                    background: 'white',\n                                    marginTop:'6px',\n                                    marginBottom:'6px',\n                                    width:'100%',\n                                    color: 'darkBlue',\n                                    fontWeight:'600'\n                                    }}/>\n                </div>\n                <div className=\"addEdgeEntityContainer\">\n                    <Autocomplete\n                        multiple\n                        id=\"tags-filled\"\n                        options={entityList.map((option) => option.label)}\n                        freeSolo\n                        renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                            <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\n                        ))\n                        }\n                        value={this.state.selectedEntities}\n                        onChange = {(event, newValue) => {\n                            this.setState({\n                                selectedEntities: newValue\n                            });\n                        }}\n                        renderInput={(params) => (\n                        <TextField {...params} variant=\"outlined\" label=\"Add topics\" />\n                        )}\n                    />\n                </div>\n                {this.state.selectedEntities.length == 2?\n                    <Button\n                        variant=\"contained\" \n                        onClick={() => this.confirmEdge()}\n                        className=\"confirmEdgeButton\"\n                        >Confirm</Button>\n                        :\n                        <p className=\"edgeEntityMessage\">*Input exactly two topics that you want to create a connection between!</p>\n                }\n                \n            </div>\n        )\n    }\n}\nexport default AddEdgeView;\n","import React, { Component } from 'react';\nimport Textarea from 'react-textarea-autosize';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Chip from '@material-ui/core/Chip';\nimport Slide from '@material-ui/core/Slide';\nimport  * as Utils from '../../../common/utilSvc';\nimport './AddEdgeView.css';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport { isNull, isNullOrUndefined } from 'util';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\n\nconst filter = createFilterOptions();\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nclass AddStarEdgesView extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state ={\n            summary: '',\n            selectedEntities: [],\n            baseEntity: []\n        }\n\n        this.confirmEdge = this.confirmEdge.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.getEntities = this.getEntities.bind(this);\n    }\n\n    handleChange(event, type) {\n        let str = event.target.value;\n        var shouldUpdate = true;\n        shouldUpdate = Utils.shouldUpdateText(str, ['\\n','\\t']);\n        if(shouldUpdate){\n            if(type==\"connection-description\"){\n                this.setState({summary: event.target.value});\n            }\n            else  if(type==\"entityA\"){\n                this.setState({entityA: event.target.value});\n            }\n        }\n      }\n\n    getEntities(investigationGraph, entityPane){\n        var entities = [];\n        // console.log(entities);\n        var isEntityPresent = {};\n        if(!isNullOrUndefined(investigationGraph)){\n            Object.keys(investigationGraph).forEach(function(entityLabel) {\n                if(!(entityLabel in isEntityPresent)){\n                    entities.push({                \n                        label: entityLabel, \n                    });\n                }\n                isEntityPresent[entityLabel] = false;\n            });\n        }\n        if(!isNullOrUndefined(entityPane)){\n            for(let i=0; i<entityPane.length; i++){\n                if(!(entityPane[i].label in isEntityPresent)){\n                    entities.push({\n                        label: entityPane[i].label\n                    });\n                }\n            }\n        }\n        // console.log(entities);\n        return entities;\n    }\n\n    getLatestIndex(){\n        let latestIndex = 0 ;\n        if(this.props.lastIndexDraftBlocks.length > 0)\n            latestIndex = Math.max(latestIndex, this.props.lastIndexDraftBlocks[this.props.lastIndexDraftBlocks.length - 1]);\n\n        if(this.props.lastIndex){\n            latestIndex = Math.max(latestIndex, this.props.lastIndex);\n        }\n        return latestIndex;\n    }\n\n    commitBlocksToBlockprobe(){\n        let index = this.getLatestIndex();\n        let blocks = [];\n        let timeCurr = Date.now();\n        index += 0.1;\n        for(let i=0; i<this.state.selectedEntities.length; i++){\n            if(Utils.makeFirstLetterUppercase(this.state.baseEntity[0]) \n                != Utils.makeFirstLetterUppercase(this.state.selectedEntities[i])){                \n                timeCurr += 10;\n                let entities = [];\n                entities.push({\n                    title: Utils.makeFirstLetterUppercase(this.state.baseEntity[0]),\n                    type: 'None'\n                });\n                entities.push({\n                    title: Utils.makeFirstLetterUppercase(this.state.selectedEntities[i]),\n                    type: 'None'\n                });                \n                let fullBlock = {\n                    title: `#${index} `,\n                    summary: this.state.summary,\n                    entities: entities,\n                    evidences: [],\n                    referenceBlock: null,\n                    timestamp: timeCurr,\n                    actionType: 'ADD'\n                };\n                blocks.push(fullBlock);\n            }\n        }\n        this.props.commitMultipleBlocksToBlockprobe(blocks);        \n    }\n\n    confirmEdge(){\n        // console.log(this.state.selectedEntities, this.state.summary);\n        this.commitBlocksToBlockprobe();\n    }\n\n    render(){\n        let entityList = this.getEntities(this.props.investigationGraph, this.props.entityPane);\n        return (\n            <div>\n                <h4 className=\"addEdgeTitle\"> Add connections</h4>\n                <div className=\"addEdgeBlockTextContainer\">\n                    <TextField \n                                type=\"text\"\n                                variant=\"outlined\"\n                                value={this.state.summary}\n                                onChange={(e) => { this.handleChange(e,\"connection-description\")}}\n                                label = \"Add connection description\"\n                                multiline\n                                rowsMax=\"3\"\n                                rows=\"2\"\n                                style={{\n                                    background: 'white',\n                                    marginTop:'6px',\n                                    marginBottom:'6px',\n                                    width:'100%',\n                                    color: 'darkBlue',\n                                    fontWeight:'600'\n                                    }}/>\n                </div>\n                <div className=\"addEdgeEntityContainer primaryEntityContainer\">\n                    <Autocomplete\n                        multiple\n                        id=\"tags-filled\"\n                        options={entityList.map((option) => option.label)}\n                        freeSolo\n                        renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                            <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\n                        ))\n                        }\n                        value={this.state.baseEntity}\n                        onChange = {(event, newValue) => {\n                            this.setState({\n                                baseEntity: newValue\n                            });\n                        }}\n                        renderInput={(params) => (\n                        <TextField {...params} variant=\"outlined\" label=\"Primary topic\" />\n                        )}\n                    />\n                </div>\n                <div className=\"addEdgeEntityContainer\">                    \n                    <Autocomplete\n                        multiple\n                        id=\"tags-filled\"\n                        options={entityList.map((option) => option.label)}\n                        freeSolo\n                        renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                            <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\n                        ))\n                        }\n                        value={this.state.selectedEntities}\n                        onChange = {(event, newValue) => {\n                            this.setState({\n                                selectedEntities: newValue\n                            });\n                        }}\n                        renderInput={(params) => (\n                        <TextField {...params} variant=\"outlined\" label=\"Secondary topics\" />\n                        )}\n                    />\n                </div>\n                {this.state.selectedEntities.length >= 1 && this.state.baseEntity.length == 1?\n                    <Button\n                        variant=\"contained\" \n                        onClick={() => this.confirmEdge()}\n                        className=\"confirmEdgeButton\"\n                        >Confirm</Button>\n                        :\n                        <p className=\"edgeEntityMessage\">*Input one primary topic and atleast one secondary topic!</p>\n                }\n                \n            </div>\n        )\n    }\n}\nexport default AddStarEdgesView;\n","import React, { Component } from 'react';\nimport Textarea from 'react-textarea-autosize';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Chip from '@material-ui/core/Chip';\nimport Slide from '@material-ui/core/Slide';\nimport  * as Utils from '../../../common/utilSvc';\nimport './AddEdgeView.css';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport { isNull, isNullOrUndefined } from 'util';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\n\nconst filter = createFilterOptions();\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nclass AddSingleTopicView extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state ={\n            summary: '',\n            selectedEntities: []\n        }\n\n        this.confirmEdge = this.confirmEdge.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.getEntities = this.getEntities.bind(this);\n    }\n\n    handleChange(event, type) {\n        let str = event.target.value;\n        var shouldUpdate = true;\n        shouldUpdate = Utils.shouldUpdateText(str, ['\\n','\\t']);\n        if(shouldUpdate){\n            if(type==\"connection-description\"){\n                this.setState({summary: event.target.value});\n            }\n            else  if(type==\"entityA\"){\n                this.setState({entityA: event.target.value});\n            }\n        }\n      }\n\n    getEntities(investigationGraph, entityPane){\n        var entities = [];\n        // console.log(entities);\n        var isEntityPresent = {};\n        if(!isNullOrUndefined(investigationGraph)){\n            Object.keys(investigationGraph).forEach(function(entityLabel) {\n                if(!(entityLabel in isEntityPresent)){\n                    entities.push({                \n                        label: entityLabel, \n                    });\n                }\n                isEntityPresent[entityLabel] = false;\n            });\n        }\n        if(!isNullOrUndefined(entityPane)){\n            for(let i=0; i<entityPane.length; i++){\n                if(!(entityPane[i].label in isEntityPresent)){\n                    entities.push({\n                        label: entityPane[i].label\n                    });\n                }\n            }\n        }\n        // console.log(entities);\n        return entities;\n    }\n\n    getLatestIndex(){\n        let latestIndex = 0 ;\n        if(this.props.lastIndexDraftBlocks.length > 0)\n            latestIndex = Math.max(latestIndex, this.props.lastIndexDraftBlocks[this.props.lastIndexDraftBlocks.length - 1]);\n\n        if(this.props.lastIndex){\n            latestIndex = Math.max(latestIndex, this.props.lastIndex);\n        }\n        return latestIndex;\n    }\n\n    commitBlockToBlockprobe(){\n        let entities = [];\n        for(let i=0; i<this.state.selectedEntities.length; i++){\n            entities.push({\n                title: Utils.makeFirstLetterUppercase(this.state.selectedEntities[i]),\n                type: 'None'\n            });\n        }\n        let index = this.getLatestIndex();\n        index += 0.1;\n        let fullBlock = {\n            title: `#${index} `,\n            summary: this.state.summary,\n            entities: entities,\n            evidences: [],\n            referenceBlock: null,\n            timestamp: Date.now(),\n            actionType: 'ADD'\n        };\n        this.props.commitBlockToBlockprobe(fullBlock);\n    }\n\n    confirmEdge(){\n        // console.log(this.state.selectedEntities, this.state.summary);\n        this.commitBlockToBlockprobe();\n    }\n\n    render(){\n        let entityList = this.getEntities(this.props.investigationGraph, this.props.entityPane);\n        return (\n            <div>\n                <h4 className=\"addEdgeTitle\">Add topic</h4>\n                <div className=\"addEdgeBlockTextContainer\">\n                    <TextField \n                                type=\"text\"\n                                variant=\"outlined\"\n                                value={this.state.summary}\n                                onChange={(e) => { this.handleChange(e,\"connection-description\")}}\n                                label = \"Describe topic\"\n                                multiline\n                                rowsMax=\"3\"\n                                rows=\"2\"\n                                style={{\n                                    background: 'white',\n                                    marginTop:'6px',\n                                    marginBottom:'6px',\n                                    width:'100%',\n                                    color: 'darkBlue',\n                                    fontWeight:'600'\n                                    }}/>\n                </div>\n                <div className=\"addEdgeEntityContainer\">\n                    <Autocomplete\n                        multiple\n                        id=\"tags-filled\"\n                        options={entityList.map((option) => option.label)}\n                        freeSolo\n                        renderTags={(value, getTagProps) =>\n                        value.map((option, index) => (\n                            <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\n                        ))\n                        }\n                        value={this.state.selectedEntities}\n                        onChange = {(event, newValue) => {\n                            this.setState({\n                                selectedEntities: newValue\n                            });\n                        }}\n                        renderInput={(params) => (\n                        <TextField {...params} variant=\"outlined\" label=\"Add topics\" />\n                        )}\n                    />\n                </div>\n                {this.state.selectedEntities.length == 1 && !isNullOrUndefined(this.state.summary)\n                && this.state.summary.length > 0?\n                    <Button\n                        variant=\"contained\" \n                        onClick={() => this.confirmEdge()}\n                        className=\"confirmEdgeButton\"\n                        >Confirm</Button>\n                        :\n                        <p className=\"edgeEntityMessage\">*Input exactly one topic and describe it!</p>\n                }\n                \n            </div>\n        )\n    }\n}\nexport default AddSingleTopicView;\n","import React, { Component } from 'react';\nimport Checkbox from '../Checkbox';\nimport Button from '@material-ui/core/Button';\nimport DatePicker from \"react-datepicker\";\nimport MonthPicker from '../MonthPicker/MonthPicker';\nimport TextField from '@material-ui/core/TextField';\nimport { isNullOrUndefined } from 'util';\nimport Grid from '@material-ui/core/Grid';\nimport  * as Utils from '../../../common/utilSvc';\nimport './AddTimeView.css';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nclass AddTimeView extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state={\n            date: new Date(),\n            selectedDateStyle: 'date',\n            newBlock: {\n                title: '',\n                summary: '',\n                blockDate: {}\n            }\n        }\n        this.state.newBlock.blockDate = {\n            date: this.state.date.getDate(),\n            month: this.state.date.getMonth(),\n            year: this.state.date.getFullYear()\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.isDateChecked = this.isDateChecked.bind(this);\n        this.toggleDateStyle = this.toggleDateStyle.bind(this);\n        this.getLatestIndex = this.getLatestIndex.bind(this);\n        this.commitBlockToBlockprobe = this.commitBlockToBlockprobe.bind(this);\n        this.confirmTime = this.confirmTime.bind(this);\n    }\n\n    getLatestIndex(){\n        let latestIndex = 0 ;\n        if(this.props.lastIndexDraftBlocks.length > 0)\n            latestIndex = Math.max(latestIndex, this.props.lastIndexDraftBlocks[this.props.lastIndexDraftBlocks.length - 1]);\n\n        if(this.props.lastIndex){\n            latestIndex = Math.max(latestIndex, this.props.lastIndex);\n        }\n        return latestIndex;\n    }\n\n    commitBlockToBlockprobe(){\n        let index = this.getLatestIndex();\n        index += 0.1;\n        let fullBlock = {\n            title: `#${index} ${this.state.newBlock.title.trim()}`,\n            summary: this.state.newBlock.summary.trim(),\n            entities: [],\n            evidences: [],\n            blockDate: this.state.newBlock.blockDate,\n            referenceBlock: null,\n            timestamp: Date.now(),\n            actionType: 'ADD'\n        };\n        this.props.commitBlockToBlockprobe(fullBlock);\n    }\n\n    confirmTime(){\n        //Confirm time\n        this.commitBlockToBlockprobe();\n    }\n\n    toggleDateStyle(type){\n        let block = this.state.newBlock;\n        let date = this.state.date;\n        if(type == 'month' && this.state.selectedDateStyle != 'month'){\n            if(block.blockDate){\n                block.blockDate['date'] = null;\n                date.setFullYear(block.blockDate.year);\n                date.setMonth(block.blockDate.month);\n                date.setDate(0);\n                date.setHours(0);\n                date.setMinutes(0);\n                delete block['blockTime'];\n            }\n        }\n        else if(type == 'date' && this.state.selectedDateStyle != 'date'){\n            if(block.blockDate){\n                date = new Date();\n                block.blockDate['date'] = 1;\n                if(isNullOrUndefined(block.blockDate['month'])){\n                    block.blockDate['month'] = 0;\n                }\n                date.setFullYear(block.blockDate.year);\n                date.setMonth(block.blockDate.month);\n                date.setDate(1);\n            }\n        }       \n\n        this.setState({\n            selectedDateStyle: type,\n            date: date,\n            newBlock: block\n        });\n    }\n\n    isDateChecked(type){\n        if(type == this.state.selectedDateStyle)\n            return true;\n        return false;\n    }\n\n    handleChange(event, type) {\n\n        var shouldUpdate = true;\n        if(type!=\"date\" && type!=\"time\"){\n            let newStr = event.target.value;\n            if(!Utils.shouldUpdateText(newStr, '\\n\\t')){\n                shouldUpdate=false;\n            }\n        }\n\n        if(shouldUpdate){\n            var block = this.state.newBlock;\n            if(type==\"title\"){\n                block.title = event.target.value;\n                this.setState({newBlock: block});\n            }\n            else if(type==\"summary\"){\n                block.summary = event.target.value;\n                this.setState({newBlock: block});\n            }\n            else if(type==\"new-entity\"){\n                this.setState({newEntity: event.target.value});\n            }\n            else if(type == \"date\"){\n                if(this.state.selectedDateStyle == 'date'){\n                    block.blockDate = {\n                        date: event.getDate(),\n                        month: event.getMonth(),\n                        year: event.getFullYear()\n                    };    \n                }\n                else{\n                    block.blockDate = {\n                        date: null,\n                        month: event.month,\n                        year: event.year\n                    }\n                }\n                // console.log(block.blockDate);\n                this.setState({\n                    date: event,\n                    newBlock: block\n                });\n            }\n            else if(type == \"time\"){\n                block.blockTime = {\n                    minutes: event.minute,\n                    hours: event.hour24\n                }\n                // console.log(block.blockTime);\n                this.setState({\n                    time: event,\n                    newBlock: block\n                });\n            }\n\n        }\n      }\n\n    render(){\n\n        return(\n            <div>\n                <h4 className=\"addTimeTitle\"> Add timeline event</h4>\n                <div style={{marginBottom:'15px'}}>\n                    <div>\n                        <div className=\"addTimelineBlockTextContainer\">\n                            <form>\n                                <label>\n                                    <TextField \n                                        type=\"text\"\n                                        variant=\"outlined\"\n                                        multiline\n                                        label = \"Add title\"\n                                        value={this.state.newBlock.title}\n                                        onChange={(e) => { this.handleChange(e,\"title\")}}\n                                        rowsMax=\"2\"\n                                        rowsMin=\"1\"\n                                        style={{\n                                            background: 'white',\n                                            marginTop:'6px',\n                                            marginBottom:'6px',\n                                            width:'100%'\n                                            }}/>\n                                    <TextField \n                                    type=\"text\"\n                                    variant=\"outlined\"\n                                    multiline\n                                    label = \"Add description\"\n                                    value={this.state.newBlock.summary}\n                                    onChange={(e) => { this.handleChange(e,\"summary\")}}\n                                    rowsMax=\"13\"\n                                    rows=\"3\"\n                                    style={{\n                                        background: 'white',\n                                        marginTop:'6px',\n                                        marginBottom:'6px',\n                                        width:'100%'\n                                        }}/>\n                                </label>\n                            </form>\n                        </div>\n                        <div>\n                            <Checkbox \n                                value={'date'}\n                                isChecked={this.isDateChecked('date')}\n                                label={'Complete date'}  \n                                toggleChange = {this.toggleDateStyle}                              \n                                />\n                            <Checkbox \n                                value={'month'}\n                                isChecked={this.isDateChecked('month')}\n                                label={'Only month/year'}\n                                toggleChange = {this.toggleDateStyle}\n                                />\n                        </div>\n                        {this.state.selectedDateStyle == 'date'?\n                            <div style={{marginTop:'5px'}}>\n                                <DatePicker\n                                selected={this.state.date}\n                                onChange={(date) => {this.handleChange(date,\"date\")}}\n                                />\n                            </div>\n                            :\n                            null\n                        }\n                        {this.state.selectedDateStyle == 'month'?\n                            <div style={{marginTop:'5px'}}>\n                                <MonthPicker\n                                date={this.state.newBlock.blockDate}\n                                onChange = {(date) => {this.handleChange(date,\"date\")}}\n                                />\n                            </div>\n                            :\n                            null\n                        }                                                \n                    </div>\n                    {!isNullOrUndefined(this.state.newBlock.blockDate)?\n                        <Button\n                            variant=\"contained\" \n                            onClick={() => this.confirmTime()}\n                            className=\"confirmTimeButton\"\n                            >Confirm</Button>\n                            :\n                            <p className=\"timeEntityMessage\">*Select a date for the timeline event!</p>\n                    }\n                </div>\n            </div>\n        )\n    }\n}\nexport default AddTimeView;","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport ReactGA from 'react-ga';\nimport SingleBlock from '../view/SingleBlock';\nimport BulkDraftBlockComponent from '../view/Bulk/BulkDraftBlockComponent';\nimport List from '@material-ui/core/List';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport IconButton from '@material-ui/core/IconButton';\nimport './UserBlocksComponent.css';\nimport { isNullOrUndefined } from 'util';\nimport EntityPaneView from \"../view/EntityPane/EntityPane\";\nimport ImagePaneView from \"../view/ImagePane/ImagePane\";\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport Paper from '@material-ui/core/Paper';\nimport GraphComponent from \"../viso/GraphComponent\";\nimport  TimelineComponent from \"../viso/TimelineComponent\";\nimport SummaryViewComponent from \"../viso/summary/SummaryView\";\nimport * as Utils from '../common/utilSvc';\nimport SingleEntityView from '../view/Draft/SingleEntityView/SingleEntityView';\nimport AddEdgeView from  '../view/Draft/AddEdgeView/AddEdgeView';\nimport AddStarEdgesView from  '../view/Draft/AddEdgeView/AddStarEdgesView';\nimport AddSingleTopicView from  '../view/Draft/AddEdgeView/AddSingleTopic';\nimport AddTimeView from '../view/Draft/AddTimeView/AddTimeView';\n\nimport Joyride from 'react-joyride';\nimport Checkbox from '../view/Draft/Checkbox';\n\n////var uIdHash = crypto.createHash('sha256').update(`${userId}`).digest('hex');\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\nclass UserBlocksComponent extends React.Component {\n    \n    constructor(props){\n        super(props);\n        //props: finishBuildingStoryTooltip, bpDetails, finishAddingBlockToStoryTooltip, blockStatus, lastIndex\n\n        this.state={            \n            uIdHash:'',\n            shajs:null,\n            selectedDraftBlockId: null,\n            displaySingleEntity: true,\n            entityPaneList: [],\n            draftBlocks:{},\n            successBlocks:{},\n            toReviewBlocks:{},\n            inReviewBlocks:{},\n            blockStateMap:{},\n            lastIndexDraftBlocks: [0],\n            newBlock: {\n                title:'',\n                summary:'',\n                blockState:'DRAFT',\n                entities:[]\n            },\n            graphViewAddType: 'single_connection',\n            multiSelectedBlocks: {},\n            dialogType: null,\n            dialogText:{\n                delete:{\n                    title: \"Delete blocks\",\n                    desc: \"You are about to delete these blocks. This action cannot be reversed.\\nDo you confirm?\"\n                },\n                commit:{\n                    title: \"Add blocks to story\",\n                    desc: \"You are about to add these blocks to the story.\\nDo you confirm?\"\n                },\n                selected:{\n                    title: null,\n                    desc: null\n                }\n            },\n            dialog: false,\n            imageUploading: false,\n            blocksUploading: false,\n            viewPublishLink: false,\n            multiSelectDraftBlockStatus: false,\n            isCreateBlockClicked:false,\n            isCreateBulkBlockClicked: false,\n            isEntityPaneOpen: false,\n            isImagePaneOpen: false,\n            urlPrefix: 'https://blprobe.com/view/',\n            gameUrlPrefix: 'https://blprobe.com/game/',\n            tooltipText:{\n                entityPane:[                    \n                    {                    \n                        title: 'Your story is empty!',\n                        target: '.entityPaneButtonTooltip',\n                        content: 'First you have to define the entities or characters of your story. Click on this button to start defining the entities',\n                        disableBeacon: true\n                    }             \n                ],\n                addBlocks:[                    \n                    {                    \n                        title: 'Click on \\'Contribute\\' to start adding content to your story!',\n                        target: '.addBulkBlockButton',\n                        content: '',\n                        disableBeacon: true\n                    }             \n                ],\n                draftBlock:[\n                    {\n                        title: 'Click on any block (para) that you just added from the Draft list!',\n                        target: '.draftBlocksList',\n                        content: '',\n                        disableBeacon: true\n                    }\n                ],\n                commitBlock:[\n                    {\n                        title: 'Add your block to the story!',\n                        target: '.inReviewBlockList',\n                        content: 'Your block is in review. You can see it in this list. Since you are the creator of the story, you also get to review the block. But for now, you can skip the review and directly add it to the story. Click on your block in review.',\n                        disableBeacon: true\n                    }\n                ]\n            },\n            showTooltip:{\n                entityPane: false, //JSON.parse(JSON.stringify(props.buildStory)),\n                addBlocks: JSON.parse(JSON.stringify(props.buildStory)), //false,\n                draftBlock: false,\n                commitBlock: false\n            },\n            selectedGraphNode: null\n        }\n        \n        //props include bpId, uId\n        var shajs = require('sha.js');\n        this.state.uIdHash = shajs('sha256').update(this.props.uId).digest('hex');\n        this.state.shajs = shajs;\n\n        ReactGA.initialize('UA-143383035-1');   \n        ReactGA.pageview('/userBlocks');\n\n        this.modifyBlockList = this.modifyBlockList.bind(this);\n        this.modifyBlockListWrapper = this.modifyBlockListWrapper.bind(this);\n        this.selectBlock = this.selectBlock.bind(this);\n        this.renderSingleBlock = this.renderSingleBlock.bind(this);\n        this.renderSingleDraftBlock = this.renderSingleDraftBlock.bind(this);\n        this.renderBlockOptions = this.renderBlockOptions.bind(this);\n        this.createBlock = this.createBlock.bind(this);\n        this.createBulkBlock = this.createBulkBlock.bind(this);\n        this.cancelBulkBlock = this.cancelBulkBlock.bind(this);\n        this.changeSelectedBlock = this.changeSelectedBlock.bind(this);\n        this.openEntityPane = this.openEntityPane.bind(this);\n        this.closeEntityPane = this.closeEntityPane.bind(this);\n        this.openImagePane = this.openImagePane.bind(this);\n        this.closeImagePane = this.closeImagePane.bind(this);\n        this.deleteNewBlock = this.deleteNewBlock.bind(this);\n        this.deleteMultipleDraftBlocks = this.deleteMultipleDraftBlocks.bind(this);\n        this.commitMultipleDraftBlocks = this.commitMultipleDraftBlocks.bind(this);\n        this.deleteDraftBlock = this.deleteDraftBlock.bind(this);\n        this.addDraftBlock = this.addDraftBlock.bind(this);\n        this.addDraftBlocksInBulk = this.addDraftBlocksInBulk.bind(this);\n        this.updateStoryEntities = this.updateStoryEntities.bind(this);\n        this.updateDraftBlock = this.updateDraftBlock.bind(this);\n        this.getRandomReviewer = this.getRandomReviewer.bind(this);\n        this.giveBlockToFirstReviewer = this.giveBlockToFirstReviewer.bind(this);\n        this.submitDraftBlock = this.submitDraftBlock.bind(this);     \n        this.updateEntityPaneList = this.updateEntityPaneList.bind(this);  \n        this.initEntityPane = this.initEntityPane.bind(this); \n        this.finishTooltip = this.finishTooltip.bind(this);\n        this.commitBlockToBlockprobe = this.commitBlockToBlockprobe.bind(this);\n        this.setDashboardVisualisation = this.setDashboardVisualisation.bind(this);\n        this.setShareVisualization = this.setShareVisualization.bind(this);\n        this.convertBlockMapToList = this.convertBlockMapToList.bind(this);\n        this.sortBlocks = this.sortBlocks.bind(this);\n        this.isSummaryBlocksAvailable = this.isSummaryBlocksAvailable.bind(this);\n        this.isGraphAvailable = this.isGraphAvailable.bind(this);\n        this.isTimelineAvailable = this.isTimelineAvailable.bind(this);\n        this.onSelectTab = this.onSelectTab.bind(this);\n        this.toggleMultiSelect = this.toggleMultiSelect.bind(this);\n        this.multiSelectBlocks = this.multiSelectBlocks.bind(this);\n        this.toggleDialog = this.toggleDialog.bind(this);\n        this.performAction = this.performAction.bind(this);\n        this.toggleGraphOptionStyle = this.toggleGraphOptionStyle.bind(this);\n        this.selectGraphNode = this.selectGraphNode.bind(this);\n        this.publishStory = this.publishStory.bind(this);\n    }\n\n    toggleDialog(value, type){\n        let dialogText = this.state.dialogText;\n        if(type == 'delete'){\n            dialogText.selected.title = dialogText.delete.title;\n            dialogText.selected.desc = dialogText.delete.desc;\n        }\n        else if(type == 'commit'){\n            dialogText.selected.title = dialogText.commit.title;\n            dialogText.selected.desc = dialogText.commit.desc;\n        }\n        this.setState({\n            dialog: value,\n            dialogType: type\n        });\n    }\n\n    updateEntityPaneList(list){\n        this.setState({entityPaneList: list});\n    }\n\n    getRandomReviewer(reviewerList, revMap)\n    {\n        if(!isNullOrUndefined(reviewerList)){\n            var val = (Date.now()%reviewerList.length);\n            \n            for(var i=0;i<reviewerList.length;i++)\n            {\n                var curr=(val+i)%(reviewerList.length);\n                // console.log(reviewerList[i]);\n                if(!(reviewerList[curr].id in revMap))\n                {\n                    return reviewerList[curr];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    giveBlockToFirstReviewer(block)\n    {\n        var revMap={};\n\n        //Deepcopy of reviewerList\n        const reviewersStr = JSON.stringify(this.props.bpDetails.reviewers);\n        var reviewersList = JSON.parse(reviewersStr);\n        var randomReviewer = this.getRandomReviewer(reviewersList, revMap);\n\n        if(randomReviewer!=null) {\n\n            block.blockState = \"TO REVIEW\";\n\n            revMap[randomReviewer.id]=\"-\";\n            firebase.firestore().collection(\"Blockprobes\").\n                doc(block.bpID).\n                collection(\"users\").doc(randomReviewer.id).\n                collection(\"userBlocks\").\n                doc(block.key+\"_r\").set(block);\n\n        }\n        else{\n            //console.log(\"No other reviewers left!\");\n        }\n\n\n\n        var newBlock = {\n            actionType: block.actionType,\n            blockAuthor: this.state.uIdHash,\n            entities: isNullOrUndefined(block.entities)?null:block.entities,\n            evidences: isNullOrUndefined(block.evidences)?null:block.evidences,\n            reviewers:revMap,\n            summary: block.summary,\n            timestamp: block.timestamp,\n            title: block.title,\n        }\n\n        firebase.database().ref(\"Blockprobes/\"+block.bpID\n                        +\"/reviewBlocks/\"+block.key).set(newBlock);\n\n    }\n\n\n    modifyBlockList(block, add){\n        if(block.blockState==\"SUCCESSFUL\" && \n            !(block.actionType==\"entityChange\") ){\n            var currMap = this.state.successBlocks;\n            if(add && this.props.blockStatus[block.key])\n                currMap[block.key]=block;\n            else\n                delete currMap[block.key];\n            this.setState({\n                successBlocks:currMap\n            });\n        }\n        else if(block.blockState==\"UNDER REVIEW\"){\n            var currMap = this.state.inReviewBlocks;\n            if(add)\n                currMap[block.key]=block;\n            else\n                delete currMap[block.key];\n            this.setState({\n                inReviewBlocks:currMap\n            });\n        }\n        else if(block.blockState==\"TO REVIEW\"){\n            var currMap = this.state.toReviewBlocks;\n            if(add)\n                currMap[block.key]=block;\n            else\n                delete currMap[block.key];\n            this.setState({\n                toReviewBlocks:currMap\n            });\n        }\n        else if(block.blockState==\"DRAFT\"){\n            let lastIndex = this.state.lastIndexDraftBlocks;\n            var currMap = this.state.draftBlocks;\n            if(add){\n                currMap[block.key]=block;\n\n                //get index here\n                let blockIndex = Utils.extractBlockIndex(block);                \n                if(!isNullOrUndefined(blockIndex)){\n                    lastIndex.push(blockIndex); \n                    lastIndex.sort();\n                }\n            }\n            else{\n                let blockIndex = Utils.extractBlockIndex(currMap[block.key]);\n                delete currMap[block.key];                                \n                if(!isNullOrUndefined(blockIndex)){                    \n                    let newList = [], hasBeenRemoved = false;\n                    for(let i=0; i<lastIndex.length; i++){\n                        if(!hasBeenRemoved && lastIndex[i]==blockIndex){\n                            hasBeenRemoved = true;\n                        }\n                        else{\n                            newList.push(lastIndex[i]);\n                        }\n                    }\n                    lastIndex = newList;\n                }\n            }\n                        \n            this.setState({\n                draftBlocks: currMap,\n                lastIndexDraftBlocks: lastIndex\n            });           \n        }\n    }\n\n\n    modifyBlockListWrapper(doc, add){\n        var block = doc.data();\n        var blockId = doc.id;\n        var blockStateMap = this.state.blockStateMap;\n        if(blockId in blockStateMap){\n            var prevState = blockStateMap[blockId];\n            var oldBlock = {\n                key:block.key,\n                blockState: prevState\n            };\n            //delete old block\n            this.modifyBlockList(oldBlock,false);\n\n            if(add){\n                //add new block\n                this.modifyBlockList(block,true);\n\n                 //Update blockstate\n               blockStateMap[blockId] = block.blockState;\n            }\n        }\n        else if(add){\n            //First time block gets added\n            blockStateMap[blockId] = block.blockState;\n            this.modifyBlockList(block,true);\n        }\n    }\n\n    deleteMultipleDraftBlocks(){\n        let multiSelectBlocks = this.state.multiSelectedBlocks;\n        const scope = this;\n        Object.keys(multiSelectBlocks).map((key) => {\n            scope.deleteDraftBlock(key);\n        });\n        multiSelectBlocks = {};\n        this.setState({\n            multiSelectedBlocks: multiSelectBlocks\n        });\n    }\n\n    commitMultipleDraftBlocks(){\n        let multiSelectBlocks = this.state.multiSelectedBlocks;\n        const scope = this;\n        let blocks = [];\n        Object.keys(multiSelectBlocks).map((key) => {\n            if(key in this.state.draftBlocks){\n                blocks.push(this.state.draftBlocks[key]);\n            }\n        });\n        this.props.commitMultipleBlocksToBlockprobe(blocks);\n\n        multiSelectBlocks = {};\n        this.setState({\n            multiSelectedBlocks: multiSelectBlocks\n        });\n    }\n\n    deleteDraftBlock(blockKey){\n        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n        .collection(\"users\").doc(this.state.uIdHash).collection(\"userBlocks\").\n        doc(blockKey).delete();\n    }\n\n    updateDraftBlock(blockKey, newBlock){\n        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n        .collection(\"users\").doc(this.state.uIdHash).collection(\"userBlocks\").\n        doc(blockKey).set(newBlock);\n\n        this.updateStoryEntities(newBlock);\n\n    }\n\n     addDraftBlocksInBulk(blocks){\n\n        let latestIndex = 0 ;\n        if(this.state.lastIndexDraftBlocks.length > 0)\n            latestIndex = Math.max(latestIndex, this.state.lastIndexDraftBlocks[this.state.lastIndexDraftBlocks.length - 1]);\n\n        if(this.props.lastIndex){\n            latestIndex = Math.max(latestIndex, this.props.lastIndex);\n        }\n\n        var allEntitiesMap = {};\n        var allEntities = [];\n        for(var i=0; i<blocks.length; i++){\n            if(blocks[i].entities){\n                for(var j=0;j<blocks[i].entities.length;j++){\n                    var currEntity = blocks[i].entities[j];\n                    if(!(currEntity.title in allEntitiesMap)){\n                        //new entity\n                        allEntitiesMap[currEntity.title] = '';\n                        allEntities.push(currEntity);\n                    }\n                }\n            }\n\n            if(!('title' in blocks[i])){\n                blocks[i]['title'] = '';\n            }\n            let index = Utils.extractBlockIndex(blocks[i]);\n            let isSummary = Utils.isTitleSummary(blocks[i].title);\n\n            if(index == null){\n                blocks[i].title = Utils.removeTitleHashtag(blocks[i].title);\n                latestIndex += 0.1;\n                blocks[i].title = '#' + String(latestIndex.toFixed(1)) + (isSummary? 's': '') \n                                    + ' ' + blocks[i].title;\n            }\n            else{\n                if(index > latestIndex)\n                    latestIndex = index;\n            }\n        }\n        var dummyBlock = {entities:allEntities};\n        this.updateStoryEntities(dummyBlock);\n\n        var currTime = Date.now();\n        for(var i =0;i<blocks.length; i++){\n            blocks[i].timestamp = currTime + 1000*i;\n            this.addDraftBlock(blocks[i], true);\n        }\n        this.setState({isCreateBulkBlockClicked: false});\n\n        var args = {\n            blockprobe: this.props.bId,\n            count: blocks.length\n        }    \n    \n        //console.log(blocks);\n        if(blocks.length>0)\n            this.finishTooltip('addBlocks');\n\n\n        ReactGA.event({\n            category: 'blocks',\n            action: 'Add blocks in bulk',\n            label: JSON.stringify(args)\n          });\n    }\n\n    publishStory(){\n        this.setState({\n            blocksUploading: true,\n            imageUploading: true\n        });\n        var bTree = this.props.blockTree;\n        let allBlocks = Utils.getShortenedListOfBlockTree(bTree);\n        if(allBlocks.length>0){\n\n            firebase.firestore().collection(\"public\").doc(this.props.bId)\n                .collection(\"aggBlocks\").get().then((snapshot) => {\n                    snapshot.forEach((doc) => {\n                        var ref = firebase.firestore().collection(\"public\").doc(this.props.bId)\n                            .collection(\"aggBlocks\").doc(doc.id).delete();\n                    });\n                    for(var i=0; i<allBlocks.length; i++){\n                        firebase.firestore().collection('public').doc(this.props.bId)\n                        .collection('aggBlocks').doc(String(i)).set(allBlocks[i]);        \n                    }\n        \n                }).then(\n                    this.setState({\n                        blocksUploading: false\n                    })\n                );\n        }\n        else{\n            this.setState({\n                blocksUploading: false\n            });\n        }\n\n        //Add images\n        var imageMap = this.props.imageMapping;\n        let allImages = Utils.getShortenedListOfImages(imageMap);         \n        if(allImages.length>0){\n\n            //console.log(allImages);\n\n            firebase.firestore().collection(\"public\").doc(this.props.bId)\n                .collection(\"images\").get().then((snapshot) => {\n                    snapshot.forEach((doc) => {\n                        var ref = firebase.firestore().collection(\"public\").doc(this.props.bId)\n                            .collection(\"images\").doc(doc.id).delete();\n                    });\n                    for(var i=0; i<allImages.length; i++){\n                        firebase.firestore().collection('public').doc(this.props.bId)\n                        .collection('images').doc(String(i)).set(allImages[i]);        \n                    }\n        \n                }).then(\n                    this.setState({\n                        imageUploading: false\n                    })\n                );\n\n        }\n        else{\n            this.setState({\n                imageUploading: false\n            });\n        }\n\n        this.setState({viewPublishLink: true});\n    }\n\n    updateStoryEntities(block){\n        var entityPaneRef = firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n        .collection(\"users\").doc(this.state.uIdHash).collection(\"session\")\n        .doc(\"entityPane\");\n        var entities = block.entities;\n        \n        let scope = this;\n        if(entities){\n\n            let transc = firebase.firestore().runTransaction(function(transaction){\n                return transaction.get(entityPaneRef).then(function(doc){\n\n                    //populate map\n                    var entityMap = {};\n                    for(var i=0; i<entities.length;i++){\n                        entityMap[entities[i].title] = '';\n                    }\n                    //populate arr\n                    var entityArr = [];\n                    if(doc.exists){\n                        entityArr = doc.data().entities;\n                        for(var i=0;i<entityArr.length;i++){\n                            if(entityArr[i].label in entityMap){\n                                entityArr[i].canRemove = false;\n                                delete entityMap[entityArr[i].label];\n                            }\n                        }\n                    }\n                    Object.keys(entityMap).forEach(function(entityLabel) {\n                        entityArr.push({\n                            label: entityLabel,\n                            canRemove: false\n                        });\n                    });\n                    \n                    //commit array\n                    if(doc.exists)\n                         transaction.update(entityPaneRef, {entities: entityArr});\n                    else\n                        entityPaneRef.set({entities: entityArr});\n                    scope.initEntityPane();\n                });\n            });\n        }\n    }\n\n    addDraftBlock(block, isBulk=false){\n        if(isNullOrUndefined(block.timestamp))\n            block.timestamp = Date.now();\n        var newDraftBlockId = this.state.shajs('sha256').update(this.state.uIdHash+String(block.timestamp)).digest('hex');\n\n        if(isNullOrUndefined(block.blockState)){\n            block.blockState = \"DRAFT\";\n        }\n\n        //(uidHash + time)\n        block.key = newDraftBlockId;\n        block.actionType = \"ADD\";\n        block.bpID = this.props.bId;       \n        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n        .collection(\"users\").doc(this.state.uIdHash).collection(\"userBlocks\").\n        doc(block.key).set(block);\n\n        this.setState({isCreateBlockClicked:false});\n\n        if(!isBulk){\n            this.updateStoryEntities(block);\n        }\n    }\n\n    submitDraftBlock(block){\n        if(isNullOrUndefined(block.key)){\n            block.timestamp = Date.now();\n           var newDraftBlockId = this.state.shajs('sha256').update(this.state.uIdHash+String(block.timestamp)).digest('hex');\n\n            //(uidHash + time)\n            block.key = newDraftBlockId;\n            block.actionType = \"ADD\";\n        }\n        block.bpID = this.props.bId;\n\n        block.blockState = \"UNDER REVIEW\";\n        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n        .collection(\"users\").doc(this.state.uIdHash).collection(\"userBlocks\").\n        doc(block.key).set(block);\n\n        this.giveBlockToFirstReviewer(block);\n\n        this.setState({isCreateBlockClicked:false});\n        this.finishTooltip('draftBlock');\n    }\n\n    componentDidMount(){\n        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n        .collection(\"users\").doc(this.state.uIdHash).collection(\"userBlocks\").onSnapshot(\n            querySnapshot => {\n                querySnapshot.docChanges().forEach(change => {\n                    if (change.type === 'added') {\n                        this.modifyBlockListWrapper(change.doc,true);\n                      }\n                      if (change.type === 'modified') {\n                        this.modifyBlockListWrapper(change.doc,true);\n                      }\n                      if (change.type === 'removed') {\n                        this.modifyBlockListWrapper(change.doc,false);\n                      }\n                });\n\n            \n            }\n        );  \n        \n        this.initEntityPane();\n    }\n\n    changeSelectedBlock(draftBlockId){\n        this.setState({\n            selectedDraftBlockId: draftBlockId\n        });\n    }\n\n    renderSingleDraftBlock(block, scope, isNewBlock){\n        if(isNullOrUndefined(block)){\n            return null;\n        }\n\n        if(!isNullOrUndefined(block.blockState) && block.blockState==\"DRAFT\" && \n            !isNullOrUndefined(block.key) && !isNullOrUndefined(this.state.selectedDraftBlockId) \n                && this.state.selectedDraftBlockId==block.key){\n            return (\n                <SingleBlock \n                    block={block} \n                    bId={this.props.bId}\n                    uIdHash={this.state.uIdHash}\n                    selectBlock={this.selectBlock}\n                    investigationGraph={this.props.investigationGraph}\n                    isNewBlock={isNewBlock}\n                    deleteNewBlock={this.deleteNewBlock}\n                    deleteDraftBlock = {this.deleteDraftBlock}\n                    addDraftBlock = {this.addDraftBlock}\n                    updateDraftBlock = {this.updateDraftBlock}\n                    submitDraftBlock = {this.submitDraftBlock}\n                    commitBlockToBlockprobe = {this.commitBlockToBlockprobe}\n                    entityPane = {this.state.entityPaneList}\n                    draftBlockTooltip = {this.state.showTooltip.draftBlock}\n                    finishTooltip = {this.finishTooltip}\n                    selectedDraftBlockId = {this.state.selectedDraftBlockId}\n                    changeSelectedBlock = {this.changeSelectedBlock} \n                    bpDetails = {this.props.bpDetails}\n                    isMultiSelect = {false}\n                    multiSelectBlocks = {this.multiSelectBlocks}\n                    isBlockSelectedInMultiselect = {false}\n                    />\n            )\n\n        }\n        return null;\n    }\n\n    renderSingleBlock(block, scope, isNewBlock){\n\n        if(isNullOrUndefined(block)){\n            return null;\n        }\n        let isBlockSelectedInMultiselect = false;\n        if(this.state.multiSelectedBlocks[block.key])\n            isBlockSelectedInMultiselect = true;\n\n        return(\n            <SingleBlock \n            block={block} \n            bId={this.props.bId}\n            uIdHash={this.state.uIdHash}\n            selectBlock={this.selectBlock}\n            investigationGraph={this.props.investigationGraph}\n            isNewBlock={isNewBlock}\n            deleteNewBlock={this.deleteNewBlock}\n            deleteDraftBlock = {this.deleteDraftBlock}\n            addDraftBlock = {this.addDraftBlock}\n            updateDraftBlock = {this.updateDraftBlock}\n            submitDraftBlock = {this.submitDraftBlock}\n            commitBlockToBlockprobe = {this.commitBlockToBlockprobe}\n            entityPane = {this.state.entityPaneList}\n            draftBlockTooltip = {this.state.showTooltip.draftBlock}\n            finishTooltip = {this.finishTooltip}\n            selectedDraftBlockId = {null}\n            changeSelectedBlock = {this.changeSelectedBlock} \n            bpDetails = {this.props.bpDetails}\n            isMultiSelect = {this.state.multiSelectDraftBlockStatus}\n            multiSelectBlocks = {this.multiSelectBlocks}\n            isBlockSelectedInMultiselect = {isBlockSelectedInMultiselect}\n            />\n        );\n    }\n\n    selectBlock(block){\n        this.props.selectBlock(block);\n    }\n\n    multiSelectBlocks(blockKey){\n        let currMultiSelectedBlocks = this.state.multiSelectedBlocks;\n        if(!(blockKey in currMultiSelectedBlocks)){\n            currMultiSelectedBlocks[blockKey] = true;\n        }\n        else{\n            delete currMultiSelectedBlocks[blockKey];\n        }\n        this.setState({\n            multiSelectedBlocks: currMultiSelectedBlocks\n        });\n    }\n\n    createBlock(){\n        // var newDraftBlockId = this.state.shajs('sha256').update(this.props.uId+String(Date.now())).digest('hex');\n        this.setState({isCreateBlockClicked:true});\n    }\n\n    openEntityPane(){\n        ReactGA.event({\n            category: 'entity pane',\n            action: 'entity pane opened',\n            label: 'entity pane opened'\n          });\n        this.setState({isEntityPaneOpen: true});\n    }\n\n    closeEntityPane(hasTooltipsFinished){\n        if(hasTooltipsFinished)\n            this.finishTooltip('entity');\n        this.setState({isEntityPaneOpen: false});\n    }\n\n    openImagePane(){\n        this.setState({isImagePaneOpen: true});\n    }\n\n    closeImagePane(){\n        this.setState({isImagePaneOpen: false});\n    }\n\n    createBulkBlock(){\n        ReactGA.event({\n            category: 'bulk block pane',\n            action: 'bulk block pane opened',\n            label: 'bulk block pane opened'\n          });\n        this.setState({isCreateBulkBlockClicked:true});\n    }\n\n    cancelBulkBlock(){\n        this.setState({isCreateBulkBlockClicked:false});\n    }\n\n    deleteNewBlock(){\n        this.setState({isCreateBlockClicked:false});\n    }\n\n    initEntityPane(){        \n        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n        .collection(\"users\").doc(this.state.uIdHash).collection(\"session\")\n        .doc(\"entityPane\").get().then((snapshot) => {\n            if(snapshot.exists)\n                {\n                    var entities = snapshot.data().entities;\n                    // console.log(entities);\n                    this.setState({entityPaneList:entities});\n                }\n        });\n    }\n\n    async commitBlockToBlockprobe(block){\n        await this.props.commitBlockToBlockprobe(block);\n        await this.updateStoryEntities(block);\n        this.finishTooltip('commitBlock');\n        ReactGA.event({\n            category: 'commit_blocks',\n            action: 'Committed blocks',\n            label: this.props.bId\n          });          \n    }\n\n    finishTooltip(tooltip){\n        var showTooltip = this.state.showTooltip;\n        if(tooltip == 'entity'){            \n            if(showTooltip.entityPane){\n                showTooltip.entityPane = false;\n                showTooltip.addBlocks = true;\n            }\n        }\n        else if(tooltip == 'addBlocks'){            \n            if(showTooltip.addBlocks){\n                showTooltip.entityPane = false;\n                showTooltip.addBlocks = false;\n                showTooltip.draftBlock = true;\n            }\n        }\n        else if(tooltip == 'draftBlock'){            \n            if(showTooltip.draftBlock){\n                showTooltip.entityPane = false;\n                showTooltip.addBlocks = false;\n                showTooltip.draftBlock = false;\n                showTooltip.commitBlock = true;\n                this.props.finishBuildingStoryTooltip();\n            }\n        } \n        else if(tooltip == 'commitBlock'){\n            if(showTooltip.draftBlock){\n                showTooltip.entityPane = false;\n                showTooltip.addBlocks = false;\n                showTooltip.draftBlock = false;\n                showTooltip.commitBlock = false;\n                this.props.finishAddingBlockToStoryTooltip();\n            }\n        }\n\n        this.setState({\n            showTooltip: showTooltip\n        })\n    }\n\n    renderBlockOptions(){\n\n        if(this.state.isCreateBlockClicked){\n            return(\n                <div>\n                    {this.renderSingleBlock(this.state.newBlock,this, true)}\n                </div>\n            );\n        }\n        if(this.state.isCreateBulkBlockClicked){\n            return(\n                <div>\n                    <BulkDraftBlockComponent\n                        cancelBulkDraftBlock = {this.cancelBulkBlock}\n                        addDraftBlocksInBulk = {this.addDraftBlocksInBulk}\n                        investigationGraph = {this.props.investigationGraph}\n                        entityPane = {this.state.entityPaneList}\n                        addBlocksTooltip = {this.state.showTooltip.addBlocks}\n                        finishTooltip = {this.finishTooltip}\n                        uIdHash = {this.state.uIdHash}\n                        uId = {this.props.uId}\n                        bId = {this.props.bId}\n                        lang = {this.props.lang}\n                    />\n                </div>\n            )\n        }\n\n        if(this.state.isEntityPaneOpen){\n            return (\n                <EntityPaneView\n                    closeEntityPane = {this.closeEntityPane}\n                    investigationGraph = {this.props.investigationGraph}\n                    bId = {this.props.bId}\n                    uIdHash={this.state.uIdHash}\n                    updateEntityPaneList = {this.updateEntityPaneList}\n                    entityPaneTooltip = {this.state.showTooltip.entityPane}\n                    finishTooltip = {this.finishTooltip}/>\n            );\n        }\n\n        if(this.state.isImagePaneOpen){\n            return (\n                <ImagePaneView\n                    closeImagePane = {this.closeImagePane}\n                    investigationGraph = {this.props.investigationGraph}\n                    bId = {this.props.bId}\n                    uIdHash={this.state.uIdHash}\n                    imageMapping = {this.props.imageMapping}\n                    permit = {this.props.permit}\n                    refreshBlockprobe = {this.props.refreshBlockprobe}\n                    />\n            );\n        }        \n\n        return (\n        <div className=\"userblocks-header-container\">\n                <div className=\"userblocks-options-container\">   \n                   <Joyride\n                styles={{\n                    options: {\n                      arrowColor: '#e3ffeb',\n                      beaconSize: '3em',\n                      primaryColor: '#05878B',\n                      backgroundColor: '#e3ffeb',\n                      overlayColor: 'rgba(10,10,10, 0.4)',\n                      width: 900,\n                      zIndex: 1000,\n                    }\n                  }}\n                    steps={this.state.tooltipText.entityPane}\n                    run = {this.state.showTooltip.entityPane}                    \n                    />   \n                    <Joyride\n                styles={{\n                    options: {\n                      arrowColor: '#e3ffeb',\n                      beaconSize: '3em',\n                      primaryColor: '#05878B',\n                      backgroundColor: '#e3ffeb',\n                      overlayColor: 'rgba(10,10,10, 0.4)',\n                      width: 900,\n                      zIndex: 1000,\n                    }\n                  }}\n                    steps={this.state.tooltipText.addBlocks}\n                    run = {this.state.showTooltip.addBlocks}                    \n                    />    \n                    <div>\n                        <Button\n                        color=\"primary\"\n                        variant=\"contained\" \n                        className=\"addBulkBlockButton\" \n                        onClick={this.createBulkBlock}>\n                            <div>Contribute</div>\n                        </Button>                    \n                    </div>         \n                    \n                    <div>\n                        <Button \n                        color=\"primary\"\n                        variant=\"contained\"\n                        className=\"editEntitiesButton entityPaneButtonTooltip\" \n                        onClick={this.openEntityPane}>\n                            <div>Manage story entities</div>\n                        </Button>\n                    </div>                    \n                    \n                    <div>\n                        {Object.keys(this.props.investigationGraph).length > 0?\n                            <Button \n                            color=\"primary\"\n                            variant=\"contained\"\n                            className=\"editEntitiesButton\" \n                            onClick={this.openImagePane}>\n                                <div>Manage story images</div>\n                            </Button>\n                                :\n                            null}\n                    </div>\n                    \n                    {this.props.blockTree && Object.keys(this.props.blockTree).length>0?\n                        <div>\n                            <Button\n                            color=\"primary\"\n                            variant=\"contained\"\n                            className=\"editEntitiesButton\" \n                            onClick={this.publishStory}>\n                                <div>Publish</div>\n                            </Button>\n                        </div>\n                        :\n                        null\n                    }\n                </div>\n\n                {this.state.viewPublishLink?\n                    <div className=\"userBlocks-renderShare\">\n                        {this.renderShareScreen()}\n                    </div>\n                    :\n                    null\n                }\n\n                <div className=\"contributeOpenTooltipTextContainer\">\n                {Object.keys(this.state.successBlocks).length>0?\n                        <p className=\"contributeOpenTooltipText\">\n                            Click on the menu (top-left) and choose <a className='tooltip-selection' onClick={this.setDashboardVisualisation}>Dashboard</a> to visualise your contributions. <br/><br/>\n                            Click on the menu (top-left) and choose <a className='tooltip-selection' onClick={this.setShareVisualization}>Share</a> to share.<br/><br/>\n                        </p>                        \n                        :\n                        <div>\n                            {Object.keys(this.state.draftBlocks).length>0?\n                                <p className=\"contributeOpenTooltipText\">\n                                    Click on any block (para) that you just added from the Draft list.\n                                </p>\n                                :\n                                <p className=\"contributeOpenTooltipText\">\n                                    Click on <a className='tooltip-selection' onClick={this.createBulkBlock}>Contribute</a> to add content to your story.\n                                </p>\n                            }\n                        </div>\n                        }\n                </div>   \n        </div>\n        )\n    }\n\n    setDashboardVisualisation(){\n        this.props.setNewVisualisation('dashboard');\n    }\n\n    setShareVisualization(){\n        this.props.setNewVisualisation('publish_blockprobe');\n    }\n\n    sortBlocks(a, b, a_ts = 0, b_ts = 0){\n        a = a.trim();        \n        b = b.trim();\n\n        var aIndex = 0, bIndex = 0, isAExist = false, isBExist = false;\n        if(a.length>0 && a.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<a.length; i++){\n                \n                if((!isNaN(parseInt(a.charAt(i), 10))) || a[i]==='.'){\n                    num += a.charAt(i);\n                }\n                else{\n                    if(num.length > 0){\n                        aIndex = parseFloat(num);\n                        isAExist = true;\n                    }\n                }\n            }\n            if(num.length > 0){\n                aIndex = parseFloat(num);\n                isAExist = true;\n            }    \n        }\n\n        if(b.length>0 && b.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<b.length; i++){\n                \n                if((!isNaN(parseInt(b.charAt(i), 10))) || b[i]==='.'){\n                    num += b.charAt(i);\n                }\n                else{\n                    if(num.length > 0){\n                        bIndex = parseFloat(num);\n                        isBExist = true;\n                    }\n                }\n            }    \n            if(num.length > 0){\n                bIndex = parseFloat(num);\n                isBExist = true;\n            }\n        \n        }\n\n        // A comes after b\n        if(!isAExist && isBExist)\n            return 1;\n\n        // A comes before b\n        if(isAExist && !isBExist)\n            return -1;\n\n        // A comes before b\n        if(isAExist && isBExist){\n            if(aIndex > bIndex)\n                return 1;\n            return -1;\n        }\n\n        if(a_ts > b_ts)\n            return 1;\n        else if(b_ts > a_ts)\n            return -1;\n\n        if(a > b)\n            return 1;\n\n        return -1;\n    }\n\n    convertBlockMapToList(blockMap){\n        var blockTempList = [];\n        for (var blockId in blockMap) {\n            // check if the property/key is defined in the object itself, not in parent\n            if (blockId in blockMap) {           \n                blockTempList.push(blockMap[blockId]);\n            }\n        }\n        var scope = this;\n        blockTempList.sort(function(a, b){return scope.sortBlocks(a.title,b.title,a.timestamp,b.timestamp);});\n        return blockTempList;\n    }\n\n    isSummaryBlocksAvailable(){\n        if(isNullOrUndefined(this.props.summaryBlocks) || this.props.summaryBlocks.length==0)\n            return false;\n        return true;\n    }\n\n    isGraphAvailable(){\n        if(isNullOrUndefined(this.props.investigationGraph) || Object.keys(this.props.investigationGraph).length==0)\n            return false;\n        return true;\n    }\n\n    isTimelineAvailable(){\n        if(this.props.timeline && this.props.timeline.length > 0)\n            return true;\n        return false;\n    }\n\n    onSelectTab(index, lastIndex, event){\n        if(index==1){\n            this.setState({\n                multiSelectDraftBlockStatus: false\n            });\n        }\n    }\n\n    toggleMultiSelect(){\n        let multiselectFlag = this.state.multiSelectDraftBlockStatus;\n        if(multiselectFlag){\n            this.setState({\n                multiSelectDraftBlockStatus: false\n            });\n        }\n        else{\n            this.setState({\n                multiSelectDraftBlockStatus: true,\n                selectedDraftBlockId: ''\n            });\n        }\n    }\n\n    performAction(type){\n        if(type == 'delete'){\n            this.deleteMultipleDraftBlocks();\n        }\n        else if(type  == 'commit'){\n            this.commitMultipleDraftBlocks();   \n        }\n\n        this.setState({\n            dialog: false,\n            dialogType: null\n        });\n    }\n\n    selectGraphNode(node){\n        let graphNode = {\n            label: node\n        };\n        this.setState({\n            selectedGraphNode: graphNode\n        });\n        // console.log(graphNode);\n    }\n\n    toggleGraphOptionStyle(type){\n        this.setState({\n            graphViewAddType: type\n        });\n    }\n\n\n    renderShareScreen(){\n        let url = this.state.urlPrefix + this.props.bId;\n        let gameUrl = this.state.gameUrlPrefix + this.props.bId;\n        return (\n            <Paper elevation={6}>\n                <div className='userblocks-share-container'>\n                    <div className='userblocks-share-section-heading'>\n                        Public link to visualize                                             \n                    </div>\n                    <div className=\"userblocks-share-url-div\">\n                        <a href={url} target=\"_blank\" className=\"userblocks-share-url\">{url}</a>\n                    </div>\n                    <div className='userblocks-share-section-heading'>\n                        Public link to play game                     \n                    </div>\n                    <div className=\"userblocks-share-url-div\">\n                        <a href={gameUrl} target=\"_blank\" className=\"userblocks-share-url\">{gameUrl}</a>\n                    </div>  \n                    <Button \n                        color=\"primary\"\n                        variant=\"contained\"\n                        className=\"userblocks-share-close\"\n                        onClick={() =>{\n                            this.setState({\n                                viewPublishLink: false\n                            })\n                    }}>\n                        <div>Close</div>\n                    </Button>  \n                </div>\n            </Paper>\n        )\n    }\n\n    render(){\n\n        const scope = this;\n\n        var successBlocksList = this.convertBlockMapToList(this.state.successBlocks);\n        let successBlocksListRender = successBlocksList.map((block) => \n                    (scope.renderSingleBlock(block, scope, false)));\n        if(successBlocksList.length == 0){\n            successBlocksListRender = 'No succesful contributions.';\n        }            \n\n        var toReviewBlocksList = this.convertBlockMapToList(this.state.toReviewBlocks);\n        const toReviewBlocksListRender = toReviewBlocksList.map((block) => \n                                (scope.renderSingleBlock(block, scope, false)));\n\n        var draftBlocksList = this.convertBlockMapToList(this.state.draftBlocks);\n        let draftBlocksListRender = draftBlocksList.map((block) => \n                                            (scope.renderSingleBlock(block, scope, false)));\n\n        let singleDraftBlocksListRender = draftBlocksList.map((block) => \n                                            (scope.renderSingleDraftBlock(block, scope, false)));                                            \n\n        if(draftBlocksList.length == 0){\n            draftBlocksListRender = 'No contributions in draft.';\n        }\n                        \n        var inReviewBlocksList = this.convertBlockMapToList(this.state.inReviewBlocks);\n        const inReviewBlocksListRender = inReviewBlocksList.map((block) => \n                                                        (scope.renderSingleBlock(block, scope, false)));      \n                                        \n        return(\n            <div className=\"userBlocksDivContainer\">\n                     \n                {this.renderBlockOptions()}                              \n\n                <div>\n                    <Dialog\n                        open={this.state.dialog}\n                        TransitionComponent={Transition}\n                        keepMounted\n                        onClose={() => this.toggleDialog(false,'delete')}\n                        aria-labelledby=\"alert-dialog-slide-title\"\n                        aria-describedby=\"alert-dialog-slide-description\">\n                            <DialogTitle id=\"alert-dialog-slide-title\">{this.state.dialogText.selected.title}</DialogTitle>\n                            <DialogContent>\n                            <DialogContentText id=\"alert-dialog-slide-description\">\n                                {this.state.dialogText.selected.desc}\n                            </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                            <Button onClick={() => this.toggleDialog(false,this.state.dialogType)} color=\"primary\">\n                                No\n                            </Button>\n                            <Button onClick={() => this.performAction(this.state.dialogType)} color=\"primary\">\n                                Yes\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                    <div className=\"visualization-tabs-title\">My contributions</div>\n                    <Tabs className=\"blocksTab\" onSelect={this.onSelectTab}>\n                        <TabList>\n                        <Tab>DRAFT</Tab>\n\n                        <Tab>SUCCESSFUL</Tab>\n\n                        {Object.keys(this.state.inReviewBlocks).length>0?\n                            <Tab>IN REVIEW</Tab>\n                                :\n                                null}\n\n                        {Object.keys(this.state.toReviewBlocks).length>0?\n                            <Tab>TO REVIEW</Tab>\n                                :\n                                null}                   \n                        </TabList>\n                    \n                        <TabPanel>\n                        {Object.keys(this.state.draftBlocks).length>0?\n                            <div>\n                                <Joyride\n                            styles={{\n                                options: {\n                                arrowColor: '#e3ffeb',\n                                beaconSize: '3em',\n                                primaryColor: '#05878B',\n                                backgroundColor: '#e3ffeb',\n                                overlayColor: 'rgba(10,10,10, 0.4)',\n                                width: 900,\n                                zIndex: 1000,\n                                }\n                            }}\n                                steps={this.state.tooltipText.draftBlock}\n                                run = {this.state.showTooltip.draftBlock}                    \n                                />                                 \n                                <div className=\"multiselect-button-container\">\n                                    {this.state.multiSelectDraftBlockStatus?\n                                        <Button\n                                            variant=\"contained\" \n                                            className=\"multiSelectBlockButton\" \n                                            onClick={this.toggleMultiSelect}>\n                                                <div>Close multiselect</div>\n                                        </Button>\n                                        :\n                                        <Button \n                                            variant=\"contained\"\n                                            className=\"multiSelectBlockButton\" \n                                            onClick={this.toggleMultiSelect}>\n                                                <div>Multiselect</div>\n                                        </Button>\n                                    }\n\n                                    {Object.keys(this.state.multiSelectedBlocks).length > 0 &&\n                                        this.state.multiSelectDraftBlockStatus?\n                                        <Button\n                                            variant=\"contained\" \n                                            className=\"multiSelectDeleteBlockButton\" \n                                            onClick={() => {this.toggleDialog(true,'delete')}}>\n                                                <div>Delete</div>\n                                        </Button>\n                                        :\n                                        null\n                                    }\n\n                                    {Object.keys(this.state.multiSelectedBlocks).length > 0 &&\n                                        this.state.multiSelectDraftBlockStatus?\n                                        <Button\n                                            variant=\"contained\" \n                                            className=\"multiSelectCommitBlockButton\" \n                                            onClick={() => {this.toggleDialog(true,'commit')}}>\n                                                <div>Add to story</div>\n                                        </Button>\n                                        :\n                                        null\n                                    }\n                                    \n                                </div>                                                               \n                                <Paper className=\"block-list-content draftBlocksList\" elevation={3}>\n                                    <List>{draftBlocksListRender}</List>\n                                </Paper>\n                                <div>\n                                    {singleDraftBlocksListRender}\n                                </div> \n                            </div>\n                            :\n                            <div className=\"blocklist-message\">{draftBlocksListRender}</div>\n                            }\n                        </TabPanel> \n                        \n                        <TabPanel>\n                            {Object.keys(this.state.successBlocks).length>0?\n                            \n                                    <div>\n                                        <Paper className=\"block-list-content\" elevation={3}>\n                                            <List>{successBlocksListRender}</List>\n                                        </Paper>\n                                    </div>\n                                \n                                :\n                            <div className=\"blocklist-message\">{successBlocksListRender}</div>\n                            }\n                        </TabPanel>\n\n                        {Object.keys(this.state.inReviewBlocks).length>0?\n                            <TabPanel>\n                                <div>\n                                    <Joyride\n                                styles={{\n                                    options: {\n                                    arrowColor: '#e3ffeb',\n                                    beaconSize: '3em',\n                                    primaryColor: '#05878B',\n                                    backgroundColor: '#e3ffeb',\n                                    overlayColor: 'rgba(10,10,10, 0.4)',\n                                    width: 900,\n                                    zIndex: 1000,\n                                    }\n                                }}\n                                    steps={this.state.tooltipText.commitBlock}\n                                    run = {this.state.showTooltip.commitBlock}                    \n                                    /> \n                                    <Paper className=\"block-list-content inReviewBlockList\" elevation={3}>\n                                        <List>{inReviewBlocksListRender}</List>\n                                    </Paper>\n                                </div>\n                            </TabPanel>\n                            :\n                            null\n                            }\n                                        \n                        {Object.keys(this.state.toReviewBlocks).length>0?\n                            <TabPanel>\n                                <div>\n                                    <Paper className=\"block-list-content\" elevation={3}>\n                                        <List>{toReviewBlocksListRender}</List>\n                                    </Paper>\n                                </div>\n                            </TabPanel>\n                            :\n                            null\n                            }\n                        \n                                        \n                    </Tabs>\n                </div>\n\n                <div className=\"contributionVisualizationContainer\">\n                    <div className=\"visualization-tabs-title\">Visualizations</div>\n\n                    <Tabs style={{marginTop:'10px'}}>\n                    <TabList>\n                        <Tab>Graph</Tab>\n                        <Tab>Timeline</Tab>\n                        <Tab>Summary</Tab>\n                    </TabList>\n\n                    <TabPanel>\n                        <div className=\"graphVisualizationSingleEntity\">\n                            <div style={{flexWrap: 'wrap',  display:'flex'}}>\n                                <div>\n                                    <Checkbox \n                                        value={'single_connection'}\n                                        isChecked={this.state.graphViewAddType == 'single_connection'}\n                                        label={'Single connection'}  \n                                        toggleChange = {this.toggleGraphOptionStyle}                              \n                                        />\n                                </div>\n                                <div>\n                                    <Checkbox \n                                        value={'star_connections'}\n                                        isChecked={this.state.graphViewAddType == 'star_connections'}\n                                        label={'Multiple connections'}\n                                        toggleChange = {this.toggleGraphOptionStyle}\n                                        />\n                                </div>\n                                <div>\n                                    <Checkbox \n                                        value={'single_topic'}\n                                        isChecked={this.state.graphViewAddType == 'single_topic'}\n                                        label={'Single topic'}\n                                        toggleChange = {this.toggleGraphOptionStyle}\n                                        />\n                                </div>     \n                            </div>\n                            {this.state.graphViewAddType == 'single_connection'?\n                                <AddEdgeView\n                                    entityPane = {this.state.entityPaneList}                                        \n                                    commitBlockToBlockprobe = {this.props.commitBlockToBlockprobe}\n                                    investigationGraph = {this.props.investigationGraph}\n                                    lastIndexDraftBlocks = {this.state.lastIndexDraftBlocks}\n                                    lastIndex = {this.props.lastIndex}\n                                />\n                                :\n                                null\n                            }\n                            {this.state.graphViewAddType == 'star_connections'?\n                                <AddStarEdgesView\n                                    entityPane = {this.state.entityPaneList}                                        \n                                    commitBlockToBlockprobe = {this.props.commitBlockToBlockprobe}\n                                    investigationGraph = {this.props.investigationGraph}\n                                    lastIndexDraftBlocks = {this.state.lastIndexDraftBlocks}\n                                    lastIndex = {this.props.lastIndex}\n                                    commitMultipleBlocksToBlockprobe = {this.props.commitMultipleBlocksToBlockprobe}\n                                />\n                                :\n                                null\n                            }\n                            {this.state.graphViewAddType == 'single_topic'?\n                                <AddSingleTopicView\n                                    entityPane = {this.state.entityPaneList}                                        \n                                    commitBlockToBlockprobe = {this.props.commitBlockToBlockprobe}\n                                    investigationGraph = {this.props.investigationGraph}\n                                    lastIndexDraftBlocks = {this.state.lastIndexDraftBlocks}\n                                    lastIndex = {this.props.lastIndex}\n                                />\n                                :\n                                null\n                            }                            \n                        </div>\n                        {this.isGraphAvailable()?\n                            <div>                                \n                                {!isNullOrUndefined(this.state.selectedGraphNode) && this.state.displaySingleEntity?\n                                    <div className=\"graphVisualizationSingleEntity\">\n                                        <SingleEntityView                                        \n                                        entity = {this.state.selectedGraphNode}\n                                        commitBlockToBlockprobe = {this.props.commitBlockToBlockprobe}\n                                        />\n                                    </div>                                    \n                                    :\n                                    null\n                                }\n                                 \n                                <GraphComponent blockTree={this.props.blockTree} \n                                    investigationGraph={this.props.investigationGraph}\n                                    selectBlock={this.props.selectBlock}\n                                    imageMapping = {this.props.imageMapping}\n                                    multiSelectEntityList = {this.props.multiSelectEntityList}\n                                    lang = {this.props.lang}\n                                    selectNode = {this.selectGraphNode}/>                                                               \n                            </div>\n                            :\n                            <div className=\"blocklist-message\">No content available for graph.</div>\n                            }\n                    </TabPanel>\n\n                    <TabPanel>\n                        <div className=\"graphVisualizationSingleEntity\">\n                            <AddTimeView\n                                commitBlockToBlockprobe = {this.props.commitBlockToBlockprobe}\n                                lastIndexDraftBlocks = {this.state.lastIndexDraftBlocks}\n                                lastIndex = {this.props.lastIndex}\n                            />\n                        </div>\n                        {this.isTimelineAvailable()?\n                            <div class=\"contributions-timeline-container\">\n                                <TimelineComponent \n                                    timeline={this.props.timeline} \n                                    selectBlock={this.props.selectBlock}/>\n                            </div>\n                            :\n                            <div className=\"blocklist-message\">No content available for timeline.</div>\n                            }\n                    </TabPanel>\n\n                    <TabPanel>\n                        {this.isSummaryBlocksAvailable()?\n                            <div>                            \n                                <SummaryViewComponent\n                                    summaryBlocks = {this.props.summaryBlocks}\n                                    selectBlock={this.props.selectBlock}/>   \n                            </div>\n                            :\n                            <div className=\"blocklist-message\">No content available for summary.</div>\n                            }\n                    </TabPanel>\n                </Tabs>\n                </div>\n            </div>\n        );\n    }\n\n\n}\nexport default UserBlocksComponent;","import React, { Component } from 'react';\nimport { isNullOrUndefined } from 'util';\nimport Textarea from 'react-textarea-autosize';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport * as firebase from 'firebase';\nimport { stringify } from '@amcharts/amcharts4/.internal/core/utils/Utils';\nimport './BpDetails.css';\n\nclass BpDetail extends React.Component {\n\n    constructor(props){\n        super(props);\n        //type, value, addBlockToBlockprobe, blockprobePermit, lastTs\n\n        this.state={\n            newValue: '',\n            prevPropsValue: null,\n            clickedOnEdit: false,\n            limits: {\n                title: {\n                    char: 160\n                }\n            }\n        }\n\n        if(!isNullOrUndefined(props.value)){\n            let val = JSON.parse(JSON.stringify(props.value));\n            this.setState({\n                newValue: val,\n                prevPropsValue: val\n            });\n        }\n        this.isValid = this.isValid.bind(this);\n        this.clickOnButton = this.clickOnButton.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    clickOnButton(type){\n        if(type == 'edit'){\n            this.setState({\n                clickedOnEdit: true\n            });\n        }\n        else if(type == 'close'){\n            this.setState({\n                newValue: JSON.parse(JSON.stringify(this.state.prevPropsValue)),\n                clickedOnEdit: false\n            });\n        }\n        else if(type=='save'){\n            this.setState({\n                clickedOnEdit: false\n            });\n            let newblock = {\n                actionType: 'BpDetails',\n                timestamp: Date.now() \n            }\n\n            if(this.props.type == 'title'){\n                newblock['title'] = this.state.newValue;\n            }\n            this.props.commitBlockToBlockprobe(newblock);\n        }\n    }\n\n    handleChange(event, type) {\n\n        var shouldUpdate = true;\n      \n        var lastChar = event.target.value[event.target.value.length-1];\n        if(lastChar=='\\n' || lastChar=='\\t')\n            shouldUpdate=false;\n\n        if(shouldUpdate){\n            let value = this.state.newValue;\n            if(type==\"title\"){\n                    value = event.target.value;\n                    value = value.substring(0, this.state.limits.title.char - 1);\n                    this.setState({newValue: value});\n                }\n            else if(type==\"summary\"){\n                    value = event.target.value;\n                    this.setState({newValue: value});\n                }\n            }        \n    }\n\n    isValid(){\n        if(this.state.newValue.trim() == '')\n            return false;\n        return true;\n    }\n\n    componentDidUpdate(){\n        if(!this.state.clickedOnEdit && this.state.prevPropsValue!=this.props.value){\n            if(!isNullOrUndefined(this.props.value)){\n                let val = JSON.parse(JSON.stringify(this.props.value));\n                this.setState({\n                    newValue: val,\n                    prevPropsValue: val\n                });\n            }\n        }\n    }\n\n    render(){\n        return (\n            <div>                \n                    {!this.state.clickedOnEdit?\n                        <div>\n                            {this.props.type == 'title'?\n                                <h2>\n                                    {this.props.value}\n                                    {!isNullOrUndefined(this.props.value)\n                                        && this.props.permit == \"CREATOR\"?\n                                        <Button \n                                            color=\"primary\" \n                                            variant=\"contained\"\n                                            className=\"edit-bpDetail-button\"\n                                            onClick={() => { this.clickOnButton('edit')}}>\n                                            Edit {this.props.type}\n                                        </Button>\n                                            :\n                                        null\n                                    }                     \n                                </h2>\n                                :\n                                null\n                            }\n                        </div>\n                        \n                        :\n                        <div>\n                            <form className=\"newBlockprobeForm\">\n                                <label>\n                                    <TextField \n                                        type=\"text\"\n                                        variant=\"outlined\"\n                                        multiline\n                                        placeholder = {\"Enter \" + this.props.type}\n                                        value={this.state.newValue}\n                                        onChange={(e) => { this.handleChange(e,\"title\")}}\n                                        rowsMax=\"2\"\n                                        rows=\"1\"\n                                        style={{\n                                            background: 'white',\n                                            marginTop:'6px',\n                                            marginBottom:'6px',\n                                            textColor: 'black',\n                                            fontWeight: '600',\n                                            marginLeft: '1em',\n                                            width:'95%'\n                                            }}/>                            \n                                </label>\n                            </form>\n                            {this.isValid()?\n                                <Button\n                                color=\"primary\" \n                                variant=\"contained\"\n                                className=\"submit-bpDetail-button\"\n                                onClick={() => { this.clickOnButton('save')}}>\n                                    <div>Confirm</div>\n                                </Button>                    \n                            :\n                                null\n                            }\n                            <Button\n                                color=\"primary\" \n                                variant=\"contained\"\n                                className=\"close-bpDetail-button\"\n                                onClick={() => { this.clickOnButton('close')}}>\n                                    <div>Close</div>\n                                </Button>              \n                        </div>\n                    }                 \n            </div>\n        );\n    }\n}\nexport default BpDetail;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport ReactGA from 'react-ga';\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport './ViewBlockprobePrivate.css';\nimport ShareBlockprobeComponent from './shareBlockprobe/ShareBlockprobeView';\nimport TimelineComponent from '../viso/TimelineComponent';\nimport GraphComponent from '../viso/GraphComponent';\nimport DashboardViewComponent from \"../viso/dashboard/DashboardView\";\nimport SummaryViewComponent from \"../viso/summary/SummaryView\";\nimport FindConnectionsComponent from '../viso/FindConnectionsComponent';\nimport BlockprobeSettingsComponent from './BlockprobeSettings/BlockprobeSettings';\nimport ViewBlockComponent from '../viso/ViewBlock';\nimport Sidebar from \"react-sidebar\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SyncIcon from '@material-ui/icons/Sync';\nimport MoreIcon from '@material-ui/icons/More';\nimport VisualizeOptionsList from '../viso/VisoList';\nimport VisualizeOptionsListComponent from '../viso/VisoList';\nimport { red } from '@material-ui/core/colors';\nimport { timingSafeEqual } from 'crypto';\nimport { isNullOrUndefined } from 'util';\nimport UserBlocksComponent from '../user-session/UserBlocksComponent';\nimport Joyride from 'react-joyride';\nimport Loader from 'react-loader-spinner';\nimport BpDetail from './BpDetails/BpDetails';\nimport * as Utils from '../common/utilSvc';\nimport * as DbUtils from '../common/dbSvc';\nimport { utils } from '@amcharts/amcharts4/core';\n\nclass ViewBlockprobePrivateComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n        //permit, buildStorytooltip, uId, bId\n\n        this.state={\n            uIdHash: \"\",\n            shajs: null,\n            genesisBlockId: \"\",\n            blockprobeTitle: null,\n            bpDetailsLastTs: 0,\n            blockprobeSummary: \"\",\n            bpDetails: {},\n            lang: 'en',\n            langLoading: true,\n            modifyRef: {},\n            blockStatus: {},\n            selectedBlock:\"\", \n            blockTree: {},\n            investigationGraph: {},\n            imageMapping: {},\n            entityChanges: {},\n            timeline: [],\n            summaryList: [],\n            latestBlock: null,\n            selectedBlockSidebarOpen: false,\n            menuBarOpen: false,\n            selectedVisualisation: \"contributions\",\n            lastTitleIndex: 0,\n            coUsers: {},\n            multiSelectEntityList: [\n                {\n                    value: true, \n                    label: \"All\", \n                    id: 0\n                },\n                {\n                    value: false, \n                    label: \"None\", \n                    id: -1\n                }\n            ],\n            testList: [],\n            isloading: {\n                bpDetails: true,\n                blockprobe: true,\n                images: true\n            },\n            tooltipText:{\n                menuClickFirst:[\n                    {\n                        title: 'Let\\'s see your story!',\n                        target: '.menu-button',\n                        content: 'Click on the menu icon.',\n                        disableBeacon: true\n                    }\n                ],\n                preShareStory:[\n                    {\n                        title: 'Let\\'s share your story with friends!',\n                        target: '.menu-button',\n                        content: 'Click on the menu icon.',\n                        disableBeacon: false,\n                        placementBeacon: 'left',\n                        event: 'hover'\n                    }\n                ]\n            },\n            showTooltip:{\n                buildStory: JSON.parse(JSON.stringify(props.buildStorytooltip)),\n                preCommitToStory: false,\n                commitToStory: false,\n                menuClickFirst: false,\n                viewDashboardView: false,\n                preShareStory: false,\n                shareStory: false\n            }\n        }\n\n        //props include bId, uId, posts, updatePosts\n        var shajs = require('sha.js');\n        this.state.uIdHash = shajs('sha256').update(this.props.uId).digest('hex');\n        this.state.shajs = shajs;\n\n        if(!isNullOrUndefined(props.permit) && props.permit == 'VIEWER' ){\n            this.state.selectedVisualisation = 'dashboard';\n        }\n\n        this.bpDetailsDoc = null;\n        this.bpUsersRef = null;\n        this.bpLangRef = null;\n\n        ReactGA.initialize('UA-143383035-1');   \n        ReactGA.pageview('/userBlockprobePrivate');\n\n        this.changeSelectedBlock = this.changeSelectedBlock.bind(this);\n        this.onSetSelectedBlockSidebarOpen = this.onSetSelectedBlockSidebarOpen.bind(this);\n        this.onSetMenuBlockSidebarOpen = this.onSetMenuBlockSidebarOpen.bind(this);\n        this.renderVisualisation = this.renderVisualisation.bind(this);\n        this.setNewVisualisation = this.setNewVisualisation.bind(this);\n        this.addEdge = this.addEdge.bind(this);\n        this.createInvestigationGraph = this.createInvestigationGraph.bind(this);\n        this.closeSelectedBlockSidebar = this.closeSelectedBlockSidebar.bind(this);\n        this.getImages = this.getImages.bind(this);\n        this.refreshBlockprobe = this.refreshBlockprobe.bind(this);\n        this.sortBlocks = this.sortBlocks.bind(this);\n        this.isSummaryBlock = this.isSummaryBlock.bind(this);\n        this.createSummaryList = this.createSummaryList.bind(this);\n        this.generateMultiSelectEntityList = this.generateMultiSelectEntityList.bind(this);\n        this.finishBuildingStoryTooltip = this.finishBuildingStoryTooltip.bind(this);\n        this.startAddBlockToStoryTooltip = this.startAddBlockToStoryTooltip.bind(this);\n        this.finishAddingBlockToStoryTooltip = this.finishAddingBlockToStoryTooltip.bind(this);\n        this.finishOpenMenuForDashboard = this.finishOpenMenuForDashboard.bind(this);\n        this.finishDashboardView = this.finishDashboardView.bind(this);\n        this.startShowingShareStoryTooltip = this.startShowingShareStoryTooltip.bind(this);\n        this.finishShareStoryTooltip = this.finishShareStoryTooltip.bind(this);\n        \n        this.writeShortBlocktree = this.writeShortBlocktree.bind(this);   \n        this.getBlockTree = this.getBlockTree.bind(this);   \n        this.getLatestTimestamp = this.getLatestTimestamp.bind(this);\n        this.getLatestBlocks = this.getLatestBlocks.bind(this);\n        this.buildBlocktree = this.buildBlocktree.bind(this);   \n\n        this.commitBlockToBlockprobe = this.commitBlockToBlockprobe.bind(this);\n        this.commitMultipleBlocksToBlockprobe = this.commitMultipleBlocksToBlockprobe.bind(this);\n        this.commitSingleBlockToBlockprobe = this.commitSingleBlockToBlockprobe.bind(this);          \n    }\n\n    finishBuildingStoryTooltip(){\n        var showTooltip = this.state.showTooltip;\n        showTooltip.buildStory = false;\n        showTooltip.preCommitToStory = true;\n        showTooltip.commitToStory = false;\n        showTooltip.menuClickFirst = false;\n        showTooltip.viewDashboardView = false;\n        this.setState({\n            showTooltip: showTooltip\n        });\n    }\n\n    startAddBlockToStoryTooltip(){\n            var showTooltip = this.state.showTooltip;\n            showTooltip.buildStory = false;\n            showTooltip.preCommitToStory = false;\n            showTooltip.commitToStory = true;\n            showTooltip.menuClickFirst = false;\n            showTooltip.viewDashboardView = false;\n            this.setState({\n                showTooltip: showTooltip\n            });\n    }\n\n    finishAddingBlockToStoryTooltip(){\n        var showTooltip = this.state.showTooltip;\n        showTooltip.buildStory = false;\n        showTooltip.preCommitToStory = false;\n        showTooltip.commitToStory = false;\n        showTooltip.menuClickFirst = true;\n        showTooltip.viewDashboardView = false;\n        this.setState({\n            showTooltip: showTooltip\n        });\n        ReactGA.event({\n            category: 'open_menu_tooltip',\n            action: 'Open menu tooltip',\n            label: this.props.bId\n          });\n    }\n\n    finishOpenMenuForDashboard(){\n        var showTooltip = this.state.showTooltip;\n        showTooltip.buildStory = false;\n        showTooltip.preCommitToStory = false;\n        showTooltip.commitToStory = false;\n        showTooltip.menuClickFirst = false;\n        showTooltip.viewDashboardView = true;\n        this.setState({\n            showTooltip: showTooltip\n        });\n    }\n\n    finishDashboardView(){\n        var showTooltip = this.state.showTooltip;\n        showTooltip.buildStory = false;\n        showTooltip.commitToStory = false;\n        showTooltip.menuClickFirst = false;\n        showTooltip.viewDashboardView = false;\n        showTooltip.preShareStory = true;\n        showTooltip.shareStory = false;\n        this.setState({\n            showTooltip: showTooltip\n        });\n    }\n\n    startShowingShareStoryTooltip(){\n        var showTooltip = this.state.showTooltip;\n        showTooltip.buildStory = false;\n        showTooltip.commitToStory = false;\n        showTooltip.menuClickFirst = false;\n        showTooltip.viewDashboardView = false;\n        showTooltip.preShareStory = false;\n        showTooltip.shareStory = true;\n        this.setState({\n            showTooltip: showTooltip\n        });\n    }\n\n    finishShareStoryTooltip(){\n        var showTooltip = this.state.showTooltip;\n        showTooltip.buildStory = false;\n        showTooltip.commitToStory = false;\n        showTooltip.menuClickFirst = false;\n        showTooltip.viewDashboardView = false;\n        showTooltip.shareStory = false;\n        this.setState({\n            showTooltip: showTooltip\n        });\n    }\n\n    setNewVisualisation(newVisualisation){\n        if(this.state.visualisation != newVisualisation){\n\n            if(newVisualisation == 'publish_blockprobe'){\n                if(this.state.showTooltip.shareStory){\n                    this.finishShareStoryTooltip();\n                }\n            }\n            else{\n                if(this.state.showTooltip.shareStory){\n                    this.finishDashboardView();\n                }\n            }\n\n            if(newVisualisation == 'dashboard'){\n                if(this.state.showTooltip.viewDashboardView){\n                    this.finishDashboardView();\n                }\n            }\n            else{\n                if(this.state.showTooltip.viewDashboardView){\n                    this.finishAddingBlockToStoryTooltip();\n                }\n            }            \n\n            this.setState({\n                selectedVisualisation: newVisualisation,\n                menuBarOpen: false\n            });\n            // console.log(newVisualisation);\n        }\n    }\n\n    onSetSelectedBlockSidebarOpen(open) {\n        if(open){\n            if(this.state.showTooltip.preCommitToStory){\n                this.startAddBlockToStoryTooltip();\n            }\n        }\n        else{\n            if(this.state.showTooltip.commitToStory){\n                this.finishBuildingStoryTooltip();\n            }\n        }\n        this.setState({ selectedBlockSidebarOpen: open });\n    }\n\n    onSetMenuBlockSidebarOpen(open) {\n        if(open){\n            if(this.state.showTooltip.menuClickFirst){\n                this.finishOpenMenuForDashboard();\n            }\n            else if(this.state.showTooltip.preShareStory){\n                this.startShowingShareStoryTooltip();\n            }\n            ReactGA.event({\n                category: 'open_menu',\n                action: 'Opened menu',\n                label: this.props.bId\n              });\n        }\n        else{\n            if(this.state.selectedVisualisation!='dashboard' && this.state.showTooltip.viewDashboardView){\n                this.finishAddingBlockToStoryTooltip();\n            }\n            if(this.state.selectedVisualisation!='publish_blockprobe' && this.state.showTooltip.shareStory){\n                this.finishDashboardView();\n            }\n        }\n\n        this.setState({ menuBarOpen: open });\n        // console.log(this.state.menuBarOpen);\n    }\n\n    addBlocksToProbe(block){      \n\n        var tempState = this.state.blockTree;\n        \n        //If empty block exists\n        if(block.key in tempState){\n\n            //If children is not null or undefined, then add children to block\n            if(!isNullOrUndefined(tempState[block.key].children)){        \n                block.children = [...tempState[block.key].children];\n            }\n        }\n\n        tempState[block.key] = block;\n        \n\n        \n        //add parent if not there\n        var prevBlockId = block.previousKey;\n        if(prevBlockId in tempState){\n\n            //If parent does not have list\n            if(isNullOrUndefined(tempState[prevBlockId].children)){\n                tempState[prevBlockId].children = [];\n            }\n\n        }\n        else{\n            tempState[prevBlockId]= {\n                children:[]\n            };\n        }\n        tempState[prevBlockId].children.push(block.key);\n\n        var latestBlock = this.state.latestBlock;\n        if(isNullOrUndefined(latestBlock) || \n        (latestBlock.timestamp < block.timestamp )){\n            latestBlock = block;\n        }\n\n        //get Index\n        let currIndex = Utils.extractBlockIndex(block);\n        let latestIndex = this.state.lastTitleIndex;\n        latestIndex = Math.max(currIndex,latestIndex);\n\n        this.setState({\n                 blockTree:tempState,\n                 latestBlock: latestBlock,\n                 lastTitleIndex: latestIndex\n             });\n        if(block.actionType == \"genesis\"){\n            document.title = block.title;\n            this.setState({\n                genesisBlockId: block.key,\n                blockprobeTitle: block.title,\n                bpDetailsLastTs: 0,\n                blockprobeSummary: block.summary\n            })\n        }\n         \n    }\n\n    traverseBlockTree(nodeId, timelineList, timelineBlockStatus, blockList, blockStatus, modifyRef, entityChanges){\n        var currBlock = this.state.blockTree[nodeId];\n\n        if(isNullOrUndefined(currBlock))\n            return;\n            \n        try{\n            // console.log(nodeId);\n            if(currBlock.actionType==\"entityChange\"){\n                //contains entityMap\n                if(!isNullOrUndefined(currBlock.entityMap)){\n                    let currEntity = currBlock.entityMap.curr;\n                    let newEntity = currBlock.entityMap.new;\n                    let ts = currBlock.timestamp;\n                    if(!(currEntity in entityChanges)){\n                        entityChanges[currEntity] = [];\n                    }\n                    entityChanges[currEntity].push({\n                        ts: ts,\n                        change: newEntity\n                    });\n                }\n            }\n\n            //ONLY TITLE OR SUMMARY CHANGE\n            if(currBlock.actionType==\"BpDetails\"){\n                let currTs = currBlock.timestamp;\n                let prevTs = this.state.bpDetailsLastTs;\n\n                if(!isNullOrUndefined(currTs) && currTs > prevTs){\n                    this.setState({\n                        blockprobeTitle: currBlock.title,\n                        blockprobeSummary: currBlock.summary,\n                        bpDetailsLastTs: currTs\n                    })\n                }\n            }\n\n            //Generic block\n            if(currBlock.actionType!=\"REMOVE\"){\n                blockList.push(currBlock.key);\n                blockStatus[currBlock.key]=true;            \n            }\n            else{\n                blockStatus[currBlock.referenceBlock]=false;\n                \n                // If block is modified, then remove latest modification also\n                if(modifyRef[currBlock.referenceBlock]!=null && modifyRef[currBlock.referenceBlock]!=undefined){\n                    blockStatus[modifyRef[currBlock.referenceBlock]]=false\n                }\n            }\n            \n\n            if(currBlock.blockDate!=null || currBlock.blockTime!=null){\n                if(currBlock.actionType!=\"REMOVE\"){\n                    timelineList.push(currBlock.key);\n                    timelineBlockStatus[currBlock.key]=true;\n                    // console.log(\"ADD \"+ nodeId);\n                }\n                else{\n                    timelineBlockStatus[currBlock.referenceBlock]=false;\n                    // console.log(\"REM \"+ nodeId);\n                }\n            }\n\n            if(currBlock.actionType == \"MODIFY\"){\n                let prevKey = modifyRef[currBlock.referenceBlock]; \n                let currKey = currBlock.key;\n                let prevTs = this.state.blockTree[modifyRef[currBlock.referenceBlock]].timestamp;\n                let currTs = currBlock.timestamp;\n                if(!blockStatus[prevKey]){\n                    //The modified block has already been removed\n                    //Remove current block also\n                    blockStatus[currBlock.key] = false;\n                    timelineBlockStatus[currBlock.key] = false;\n                    modifyRef[currKey] = currBlock.referenceBlock;\n                }\n                else if(currTs > prevTs){\n                    //remove the older block; Also save the older version with later one \n                    blockStatus[prevKey] = false;\n                    timelineBlockStatus[prevKey] = false;\n                    modifyRef[prevKey] = currBlock.referenceBlock;\n                    modifyRef[currBlock.referenceBlock] = currKey;   \n                    modifyRef[currKey] = currKey;          \n                }\n                else{\n                    //remove the new block\n                    blockStatus[currKey] = false;\n                    timelineBlockStatus[currKey] = false;\n                    modifyRef[currKey] = currBlock.referenceBlock;\n                    modifyRef[currBlock.referenceBlock] = prevKey;                \n                }\n            }\n            else{\n                //Set current block as modify reference\n                modifyRef[currBlock.key] = currBlock.key;\n            }\n\n            this.setState({\n                timeline:timelineList\n            });\n        }\n        catch{\n\n        }\n\n        var checkedChildren = {};\n        if(!isNullOrUndefined(currBlock.children)){\n            currBlock.children.forEach((childBlockId) => {\n                \n                // Check for false children and duplicate children \n                if(this.state.blockTree[childBlockId].previousKey == nodeId && !(childBlockId in checkedChildren)){\n                    try{\n                        this.traverseBlockTree(childBlockId,timelineList,timelineBlockStatus,blockList,blockStatus,modifyRef,entityChanges);\n                    }\n                    catch{\n\n                    }\n                }\n                checkedChildren[childBlockId] = true;\n            });\n        }\n    }\n\n    addEdge(graph, block, entity_i, entity_j){\n\n        // edge from i to j\n        if(!(entity_j in graph[entity_i].edges)){\n            graph[entity_i].edges[entity_j]=[];\n        }\n        graph[entity_i].edges[entity_j].push(block.key);\n    }\n\n    sortBlocks(a, b){\n        a = a.trim();        \n        b = b.trim();\n  \n        var aIndex = 0, bIndex = 0, isAExist = false, isBExist = false;\n        if(a.length>0 && a.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<a.length; i++){\n                \n                if((!isNaN(parseInt(a.charAt(i), 10))) || a[i]==='.'){\n                    num += a.charAt(i);\n                }\n                else{\n                    if(num.length > 0){\n                        aIndex = parseFloat(num);\n                        isAExist = true;\n                    }\n                }\n            }    \n        }\n  \n        if(b.length>0 && b.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<b.length; i++){\n                \n                if((!isNaN(parseInt(b.charAt(i), 10))) || b[i]==='.'){\n                    num += b.charAt(i);\n                }\n                else{\n                    if(num.length > 0){\n                        bIndex = parseFloat(num);\n                        isBExist = true;\n                    }\n                }\n            }    \n        }\n  \n        // A comes after b\n        if(!isAExist && isBExist)\n            return 1;\n  \n        // A comes before b\n        if(isAExist && !isBExist)\n            return -1;\n        \n        // A comes before b\n        if(isAExist && isBExist){\n            if(aIndex > bIndex)\n                return 1;\n            return -1;\n        }\n  \n        if(a > b)\n            return 1;\n  \n        return -1;\n    }\n  \n\n    isSummaryBlock(block){\n        let a = block.title;\n        a = a.trim();\n\n        if(a.length>0 && a.charAt(0)==='#'){\n            var num = '';\n            for(var i=1; i<a.length; i++){\n                if(a.charAt(i)==' ')\n                    return false;\n                else if(a.charAt(i)=='s' || a.charAt(i)=='S')\n                    return true;\n            }\n        }\n\n        return false;\n    }\n\n    createSummaryList(blockList){\n        var sList = [];\n\n        blockList.forEach((blockKey) => {\n            var block = this.state.blockTree[blockKey];\n            if(this.isSummaryBlock(block)){\n                sList.push(block);\n            }\n        });\n        sList.sort((a, b) => this.sortBlocks(a.title,b.title));\n        this.setState({summaryList: sList});\n    }\n\n    createInvestigationGraph(blockList){\n        var graph = {};\n\n        blockList.forEach((blockKey) => {\n            var block = this.state.blockTree[blockKey];\n            if(block.entities!=null){\n\n                for(var i=0;i<block.entities.length;i++){\n                    var entityKey = block.entities[i].title;\n                    if(!(entityKey in graph)){\n                        graph[entityKey]={\n                            char: [],\n                            edges: {}\n                        }\n                    }\n                }\n\n                if(block.entities.length == 1){\n\n                    var entityKey = block.entities[0].title;\n                    graph[entityKey].char.push(block.key);\n                }\n                else if(block.entities.length > 1){\n\n                    for(var i=0;i<block.entities.length;i++){\n                        for(var j=i+1;j<block.entities.length;j++){\n                            this.addEdge(graph, block, \n                                block.entities[i].title, block.entities[j].title);\n                            this.addEdge(graph, block, \n                                block.entities[j].title, block.entities[i].title);\n                        }\n                    }\n                    \n                }\n            }\n        });\n \n        this.setState({\n            investigationGraph: graph\n        });\n        this.generateMultiSelectEntityList();\n        // console.log(this.state.investigationGraph);\n    }\n\n    generateMultiSelectEntityList(){\n        var count = 1;\n        var entityList = this.state.multiSelectEntityList;\n\n        var existingEntities = {};\n        for(var i=2;i<entityList.length; i++){\n            existingEntities[entityList[i].label] = true;\n            if(entityList[i].id >= count)\n                count = entityList[i].id + 1;\n        }\n\n        Object.keys(this.state.investigationGraph).forEach(function(entityLabel) {\n            if(!(entityLabel in existingEntities)){\n                entityList.push({                \n                        value: false, \n                        label: entityLabel, \n                        id: count             \n                });\n                count++;\n            }\n        });\n\n        // console.log(entityList);\n        entityList.sort(function(a,b){\n            if(a.label.toLocaleLowerCase() == 'all')\n                return -1;\n            if(b.label.toLocaleLowerCase() == 'all')\n                return 1;\n            if(a.label.toLocaleLowerCase() == 'none')\n                return -1;\n            if(b.label.toLocaleLowerCase() == 'none')\n                return 1;\n            if(a.label.toLocaleLowerCase() < b.label.toLocaleLowerCase())\n                return -1;\n            return 1;\n        });\n        this.setState({\n            multiSelectEntityList: entityList\n        });\n    }\n\n    getImages(snapshot){\n        var imageMapping = this.state.imageMapping;\n        snapshot.forEach((doc) => {\n            imageMapping[doc.data()['entity']] = doc.data()['url'];\n        });\n        this.setState({imageMapping: imageMapping});\n\n        let allImages = Utils.getShortenedListOfImages(imageMapping);  \n        if(allImages.length>0){\n\n            firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId).\n                        collection(\"users\").doc(this.state.uIdHash).collection(\"shortImages\").get().then((snapshot) => {\n                    snapshot.forEach((doc) => {\n                        var ref = firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId).\n                        collection(\"users\").doc(this.state.uIdHash).collection(\"shortImages\").doc(doc.id).delete();\n                    });\n                    for(var i=0; i<allImages.length; i++){\n                        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId).\n                        collection(\"users\").doc(this.state.uIdHash).collection(\"shortImages\").doc(String(i)).set(allImages[i]);        \n                    }        \n                });\n        }      \n    }\n\n    createBlockprobe(snapshot){\n        snapshot.forEach((singleBlock) => ( this.addBlocksToProbe(singleBlock)));        \n        var timelineList = [];\n        var timelineBlockStatus = {};\n        var blockList = [];\n        var blockStatus = {};\n        var modifyRef = {};\n        let entityChanges = {};\n\n        try{\n            this.traverseBlockTree(\n                this.state.genesisBlockId, \n                timelineList, \n                timelineBlockStatus,\n                blockList,\n                blockStatus,\n                modifyRef,\n                entityChanges); \n                \n                // console.log(this.props.prevTitle);\n                // console.log(this.state.blockprobeTitle);                \n\n                //sort entityChanges\n                for(let entity in entityChanges){\n                    entityChanges[entity].sort(function (a,b){\n                        return a.ts - b.ts;\n                    })\n                }\n                // console.log(entityChanges);\n                let newBlockTree  = Utils.modifyBlockEntities(blockList,this.state.blockTree,entityChanges);\n                // console.log(newBlockTree);\n\n                if(this.props.prevTitle != this.state.blockprobeTitle){\n                    let currBlockprobe = JSON.parse(JSON.stringify(this.props.currBlockprobe));\n                    currBlockprobe.title = this.state.blockprobeTitle;\n                    currBlockprobe.timestamp = this.state.bpDetailsLastTs;\n                    this.props.modifyBlockprobe('update', currBlockprobe);\n\n                    let posts = this.props.posts;\n                    let index = -1;\n                    for(let i=0; i<posts.length; i++){\n                        if(posts[i].bp == this.props.bId){\n                            index = i;\n                            break;\n                        }\n                    }        \n                    if(index > -1){\n                        posts[index].title = this.state.blockprobeTitle;\n                        this.props.updatePosts(posts,this.props.bId);\n                    }\n                \n                }\n        }\n        catch{\n        }\n\n        // console.log(blockList);\n        // console.log(blockStatus);\n        \n        var finalTimelineList = [];\n        timelineList.forEach((id) => {\n            if(timelineBlockStatus[id] && blockStatus[id])\n            {\n                finalTimelineList.push(this.state.blockTree[id]);\n            }\n        });\n        Utils.sortTimeline(finalTimelineList);\n        this.setState({\n            timeline:[...finalTimelineList],\n            modifyRef: modifyRef,\n            blockStatus: blockStatus,\n            entityChanges: entityChanges\n        });\n\n        var finalBlockList = [];\n        blockList.forEach((id) => {\n            if(blockStatus[id])\n            {                \n                finalBlockList.push(id);\n            }\n        });\n\n        this.createInvestigationGraph(finalBlockList);\n        this.createSummaryList(finalBlockList);\n\n        // console.log(finalBlockList);               \n    }\n\n    writeShortBlocktree(){\n        let allBlocks = Utils.getShortenedListOfBlockTree(this.state.blockTree);\n        if(allBlocks &&  allBlocks.length>0){\n            firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId).\n            collection(\"users\").doc(this.state.uIdHash).collection(\"shortBlockprobe\").get().then((snapshot) => {\n                    \n                snapshot.forEach((doc) => {\n                        var ref = firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId).\n                        collection(\"users\").doc(this.state.uIdHash).collection(\"shortBlockprobe\").doc(doc.id).delete();\n                    });\n                for(var i=0; i<allBlocks.length; i++){\n                        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId).\n                        collection(\"users\").doc(this.state.uIdHash).collection(\"shortBlockprobe\").\n                        doc(String(i)).set(allBlocks[i]);        \n                }       \n                });\n        }\n    }\n\n    changeSelectedBlock = (block) =>{\n        //check if block is modified. Then show latest\n        if(block.blockState == 'SUCCESSFUL' && this.state.modifyRef[block.key]){\n            block = this.state.blockTree[this.state.modifyRef[this.state.modifyRef[block.key]]];\n            block.blockState = 'SUCCESSFUL';\n            block.bpID = this.props.bId;\n    \n        }\n        this.setState({\n            selectedBlock:block\n        }); \n        this.onSetSelectedBlockSidebarOpen(true);\n    }\n\n    refreshBlockprobe(){\n        var loadingState = this.state.isloading;\n        loadingState.blockprobe = true;\n        loadingState.images = true;\n        this.setState({\n            blockTree: {},\n            investigationGraph: {},\n            timeline: [],\n            isloading: loadingState\n        });\n\n        this.getBlockTree();\n\n        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n        .collection(\"images\").get().then((snapshot) => {\n            this.getImages(snapshot);\n            var loadingState = this.state.isloading;\n            loadingState.images = false;\n            this.setState({\n                isloading: loadingState\n            });\n        });\n    }\n\n    getLatestTimestamp(snapshot){\n        let timestampLatest = 0;\n        snapshot.forEach((doc) => { \n            let data = doc.data().blocks;\n            for(let i=0; data && i<data.length; i++){\n                if(data[i].timestamp)\n                    timestampLatest = Math.max(timestampLatest, data[i].timestamp);\n            }\n        }); \n        return timestampLatest;\n      }\n\n      async getLatestBlocks(latestTimestamp, blockList){\n\n        let currTs = Date.now();\n        let latestBlocks = await firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n        .collection(\"fullBlocks\").where(\"timestamp\",\">\",latestTimestamp)\n        .where(\"timestamp\",\"<\",currTs)\n        .orderBy(\"timestamp\").get();\n        \n        if(latestBlocks){\n            latestBlocks.forEach((doc) => {\n                let block = doc.data();\n                blockList.push(block);\n            });\n        }\n      }\n\n      async buildBlocktree(snapshot){\n            let latestTime = this.getLatestTimestamp(snapshot);\n            let blockList = [];\n            snapshot.forEach((doc) => {\n                    let data =doc.data();\n                    for(let i=0; data && data.blocks && i<data.blocks.length;i++){\n                        blockList.push(data.blocks[i]);\n                    }\n\n                });\n            await this.getLatestBlocks(latestTime,blockList);                   \n            //console.log(blockList);\n\n            this.createBlockprobe(blockList);\n\n            this.writeShortBlocktree();\n            var loadingState = this.state.isloading;\n            loadingState.blockprobe = false;\n            this.setState({\n                isloading: loadingState\n            });           \n      }\n\n    getBlockTree(){\n        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId).\n        collection(\"users\").doc(this.state.uIdHash).collection(\"shortBlockprobe\").get().then((snapshot) => {\n                this.buildBlocktree(snapshot);\n        });\n    }\n\n\n    async componentDidMount(){        \n        this.bpDetailsDoc = firebase.firestore().collection(\"Blockprobes\").\n        doc(this.props.bId);\n        \n        this.bpDetailsDoc.onSnapshot((snapshot) => {\n            this.setState({\n                bpDetails: snapshot.data()\n            })\n            // console.log(snapshot.data())\n            var loadingState = this.state.isloading;\n            loadingState.bpDetails = false;\n            this.setState({\n                isloading: loadingState\n            });\n        });\n\n        this.getBlockTree();        \n\n        firebase.firestore().collection(\"Blockprobes\").doc(this.props.bId)\n        .collection(\"images\").get().then((snapshot) => {\n            this.getImages(snapshot);\n            var loadingState = this.state.isloading;\n            loadingState.images = false;\n            this.setState({\n                isloading: loadingState\n            });\n        });\n\n        let scope = this;\n        this.bpUsersRef = firebase.database().ref('Blockprobes/'+this.props.bId +'/users');\n        this.bpUsersRef.on('child_added', function(data){\n            let userVal = data.val();\n            let coUsers = scope.state.coUsers;\n            coUsers[userVal['id']] = userVal;\n            scope.setState({\n                coUsers: coUsers \n            });\n        });\n        this.bpUsersRef.on('child_changed', function(data){\n            let userVal = data.val();\n            let coUsers = scope.state.coUsers;\n            coUsers[userVal['id']] = userVal;\n            scope.setState({\n                coUsers: coUsers \n            });\n        });\n        this.bpUsersRef.on('child_removed', function(data){\n            let userVal = data.val();\n            let coUsers = scope.state.coUsers;\n            delete coUsers[userVal['id']];\n            scope.setState({\n                coUsers: coUsers \n            });\n        })\n\n        this.bpLangRef = firebase.firestore().collection(\"blprobeLang\").doc(this.props.bId);\n        this.bpLangRef.onSnapshot((snapshot) => {\n            let lang = 'en';\n            if(snapshot.exists){\n                if(!isNullOrUndefined(snapshot.data()) && !isNullOrUndefined(snapshot.data()['lang']))\n                    lang = snapshot.data()['lang'];\n            }\n            scope.setState({\n                lang: lang,\n                langLoading: false\n            });\n        },\n        (error) => {\n            scope.setState({\n                langLoading: false\n            });\n        });\n    }\n\n    componentWillUnmount(){\n        var unsub = this.bpDetailsDoc.onSnapshot(() => {});\n        unsub();\n\n        if(!isNullOrUndefined(this.bpUsersRef))\n            this.bpUsersRef.off();\n        if(!isNullOrUndefined(this.bpLangRef)){\n            var unsubLang = this.bpLangRef.onSnapshot(() => {})\n            unsubLang();\n        }\n    }\n\n    renderVisualisation(){\n        /*\n                            <SummaryViewComponent\n                        summaryBlocks = {this.state.summaryList}/>\n                        */\n        if(this.state.selectedVisualisation == \"timeline\")\n        {\n            return (\n                <div className=\"blockprobe-body\">\n                    <TimelineComponent \n                    timeline={this.state.timeline} \n                    selectBlock={this.changeSelectedBlock}/>\n                </div>\n            );\n        }\n        else if(this.state.selectedVisualisation == \"dashboard\"){\n            return(\n                <div style={{marginBottom: '40px'}}>\n                    <DashboardViewComponent\n                        summaryBlocks = {this.state.summaryList}\n                        blockTree={this.state.blockTree} \n                        investigationGraph={this.state.investigationGraph}\n                        imageMapping = {this.state.imageMapping}\n                        selectBlock={this.changeSelectedBlock}\n                        multiSelectEntityList = {this.state.multiSelectEntityList}\n                        lang = {this.state.lang}\n                        timeline={this.state.timeline}  \n                        setNewVisualisation = {this.setNewVisualisation}                   \n                    />\n                </div>\n            );\n        }\n        else if(this.state.selectedVisualisation == \"graph\"){\n            return(\n                <div>\n                    <GraphComponent blockTree={this.state.blockTree} \n                        investigationGraph={this.state.investigationGraph}\n                        selectBlock={this.changeSelectedBlock}\n                        imageMapping = {this.state.imageMapping}\n                        lang = {this.state.lang}\n                        multiSelectEntityList = {this.state.multiSelectEntityList}/>\n                </div>\n            );\n        }\n        else if(this.state.selectedVisualisation == \"find_connections\"){\n            return(\n                <div>\n                    <FindConnectionsComponent blockTree={this.state.blockTree} \n                        investigationGraph={this.state.investigationGraph}\n                        selectBlock={this.changeSelectedBlock}\n                        imageMapping = {this.state.imageMapping}\n                    />\n                </div>\n            );\n        }\n        else if(this.state.selectedVisualisation == \"contributions\"){\n            return(\n                <div>\n                    <UserBlocksComponent \n                    uId={this.props.uId}\n                    bId={this.props.bId}\n                    permit = {this.props.permit}\n                    bpDetails = {this.state.bpDetails}    \n                    selectBlock={this.changeSelectedBlock}\n                    imageMapping = {this.state.imageMapping}\n                    investigationGraph = {this.state.investigationGraph}\n                    buildStory = {this.state.showTooltip.buildStory}\n                    finishBuildingStoryTooltip = {this.finishBuildingStoryTooltip}\n                    commitBlockToBlockprobe = {this.commitBlockToBlockprobe}\n                    commitMultipleBlocksToBlockprobe = {this.commitMultipleBlocksToBlockprobe}\n                    finishAddingBlockToStoryTooltip = {this.finishAddingBlockToStoryTooltip}\n                    setNewVisualisation = {this.setNewVisualisation}   \n                    refreshBlockprobe = {this.refreshBlockprobe}  \n                    blockStatus = {this.state.blockStatus}  \n                    blockTree={this.state.blockTree} \n                    multiSelectEntityList = {this.state.multiSelectEntityList}\n                    timeline={this.state.timeline}  \n                    summaryBlocks = {this.state.summaryList}\n                    lastIndex = {this.state.lastTitleIndex} \n                    lang = {this.state.lang}          \n                    />\n                </div>\n            );\n        }\n        else if(this.state.selectedVisualisation == \"manage_blockprobe\"){\n            return(\n                <div>\n                    <BlockprobeSettingsComponent \n                    uId={this.props.uId}\n                    bpId={this.props.bId}\n                    details = {this.state.bpDetails}\n                    permit = {this.props.permit}\n                    coUsers = {this.state.coUsers}\n                    lang = {this.state.lang}\n                    />\n                </div>\n            )\n\n        }\n        else if(this.state.selectedVisualisation == \"publish_blockprobe\"){\n            return(\n                <div>\n                    <ShareBlockprobeComponent \n                    uId={this.props.uId}\n                    bpId={this.props.bId}\n                    details = {this.state.bpDetails}\n                    permit = {this.props.permit}\n                    blockTree = {this.state.blockTree}\n                    imageMapping = {this.state.imageMapping}\n                    posts = {this.props.posts}\n                    title = {this.state.blockprobeTitle}\n                    updatePosts = {this.props.updatePosts}\n                    setNewVisualisation = {this.setNewVisualisation}\n                    />\n                </div>\n            )\n\n        }\n\n        //ShareBlockprobeComponent\n\n        return (\n            <div style={{textAlign:\"center\"}}>\n                FEATURE TO BE IMPLEMENTED\n            </div>\n        );\n    }\n\n    closeSelectedBlockSidebar(){\n        this.onSetSelectedBlockSidebarOpen(false)\n    }\n\n    componentWillReceiveProps(newProps){\n        if(newProps.buildStorytooltip){\n            var showTooltip = this.state.showTooltip;\n            showTooltip.buildStory = JSON.parse(JSON.stringify(newProps.buildStorytooltip));\n            this.setState({showTooltip:showTooltip});\n        }\n    }\n\n    async commitMultipleBlocksToBlockprobe(blocks){\n        let currTime = Date.now();\n        var loadingState = this.state.isloading;\n        loadingState.blockprobe = true;\n        this.setState({            \n            isloading: loadingState\n        });\n\n        let tasks = [];\n        for(let i=0;!isNullOrUndefined(blocks) && i<blocks.length; i++){\n            let block = blocks[i];\n            let task = this.commitSingleBlockToBlockprobe(block,currTime);\n            tasks.push(task);\n            currTime = currTime + 10;\n        }\n        await Promise.all(tasks);\n        this.refreshBlockprobe();\n    }\n\n    async commitSingleBlockToBlockprobe(block, timestamp){\n        const oldKey = block.key;\n        //Deepcopy of block\n        const blockStr = JSON.stringify(block);\n        var newBlock = JSON.parse(blockStr);\n        //console.log(this.state);\n        var newBlockId = this.state.shajs('sha256').update(this.state.uIdHash+String(newBlock.timestamp)).digest('hex');\n        newBlock.timestamp = timestamp; \n        newBlock.verificationHash = newBlockId;\n        newBlock.previousKey = this.state.latestBlock.key;\n        if(!(\"bpID\" in newBlock)){\n            newBlock.bpID = this.props.bId;\n        }\n        if(!(\"entities\" in newBlock)){\n            newBlock.entities = [];\n        }\n        if(!(\"evidences\" in newBlock)){\n            newBlock.evidences = [];\n        }\n        if(newBlock.actionType == \"ADD\" || newBlock.actionType == \"BpDetails\"){\n            newBlock.referenceBlock = null;\n        }\n        if(newBlock.actionType == \"BpDetails\"){\n            if(!('title' in newBlock)){\n                newBlock.title = this.state.blockprobeTitle;\n            }\n            if(!('summary' in newBlock)){\n                newBlock.summary = this.state.blockprobeSummary;\n            }\n        }\n\n        newBlock.key = this.state.shajs('sha256').update(newBlockId + newBlock.previousKey).digest('hex');            \n        if(isNullOrUndefined(newBlock.blockDate)){\n            newBlock.blockDate = null;\n        }\n        if(isNullOrUndefined(newBlock.blockTime)){\n            newBlock.blockTime = null;\n        }\n        newBlock.blockState = \"SUCCESSFUL\";\n\n        var committedBlock = JSON.parse(JSON.stringify(newBlock));\n        delete committedBlock[\"blockState\"];\n        delete committedBlock[\"bpID\"];\n        delete committedBlock[\"children\"];\n        //console.log(newBlock);\n        //console.log(committedBlock);\n        \n        if(oldKey){\n            await firebase.database().ref(\"Blockprobes/\"+newBlock.bpID\n                +\"/reviewBlocks/\"+oldKey).remove();\n\n            await firebase.firestore().collection(\"Blockprobes\").\n                doc(newBlock.bpID).\n                collection(\"users\").doc(this.state.uIdHash).\n                collection(\"userBlocks\").\n                doc(oldKey).delete();\n        }\n        \n        if(!(newBlock.actionType == \"BpDetails\")){\n            await firebase.firestore().collection(\"Blockprobes\").\n                doc(newBlock.bpID).\n                collection(\"users\").doc(this.state.uIdHash).\n                collection(\"userBlocks\").\n                doc(newBlock.key).set(newBlock);\n        }\n        \n        await firebase.firestore().collection(\"Blockprobes\").\n            doc(newBlock.bpID).\n            collection(\"fullBlocks\").\n            doc(committedBlock.key).set(committedBlock);\n    }\n\n    async commitBlockToBlockprobe(block){\n\n        var loadingState = this.state.isloading;\n        loadingState.blockprobe = true;\n        this.setState({            \n            isloading: loadingState\n        });\n\n        const oldKey = block.key;\n            \n\n        //Deepcopy of block\n        const blockStr = JSON.stringify(block);\n        var newBlock = JSON.parse(blockStr);\n        //console.log(this.state);\n        var newBlockId = this.state.shajs('sha256').update(this.state.uIdHash+String(newBlock.timestamp)).digest('hex');\n        newBlock.timestamp = Date.now(); \n        newBlock.verificationHash = newBlockId;\n        newBlock.previousKey = this.state.latestBlock.key;\n        if(!(\"bpID\" in newBlock)){\n            newBlock.bpID = this.props.bId;\n        }\n        if(!(\"entities\" in newBlock)){\n            newBlock.entities = [];\n        }\n        if(!(\"evidences\" in newBlock)){\n            newBlock.evidences = [];\n        }\n        if(newBlock.actionType == \"ADD\" || newBlock.actionType == \"BpDetails\"){\n            newBlock.referenceBlock = null;\n        }\n        if(newBlock.actionType == \"BpDetails\"){\n            if(!('title' in newBlock)){\n                newBlock.title = this.state.blockprobeTitle;\n            }\n            if(!('summary' in newBlock)){\n                newBlock.summary = this.state.blockprobeSummary;\n            }\n        }\n\n        newBlock.key = this.state.shajs('sha256').update(newBlockId + newBlock.previousKey).digest('hex');            \n        if(isNullOrUndefined(newBlock.blockDate)){\n            newBlock.blockDate = null;\n        }\n        if(isNullOrUndefined(newBlock.blockTime)){\n            newBlock.blockTime = null;\n        }\n        newBlock.blockState = \"SUCCESSFUL\";\n\n        var committedBlock = JSON.parse(JSON.stringify(newBlock));\n        delete committedBlock[\"blockState\"];\n        delete committedBlock[\"bpID\"];\n        delete committedBlock[\"children\"];\n        //console.log(newBlock);\n        //console.log(committedBlock);\n        \n        if(oldKey){\n            await firebase.database().ref(\"Blockprobes/\"+newBlock.bpID\n                +\"/reviewBlocks/\"+oldKey).remove();\n\n            await firebase.firestore().collection(\"Blockprobes\").\n                doc(newBlock.bpID).\n                collection(\"users\").doc(this.state.uIdHash).\n                collection(\"userBlocks\").\n                doc(oldKey).delete();\n        }\n        \n        if(!(newBlock.actionType == \"BpDetails\")){\n            await firebase.firestore().collection(\"Blockprobes\").\n                doc(newBlock.bpID).\n                collection(\"users\").doc(this.state.uIdHash).\n                collection(\"userBlocks\").\n                doc(newBlock.key).set(newBlock);\n        }\n        \n        await firebase.firestore().collection(\"Blockprobes\").\n            doc(newBlock.bpID).\n            collection(\"fullBlocks\").\n            doc(committedBlock.key).set(committedBlock);\n\n        this.refreshBlockprobe();\n    }\n\n    render(){\n        return (\n            <div>\n\n            <Sidebar\n                sidebar={<div className=\"right-sidebar\">\n                <ViewBlockComponent \n                selectedBlock={this.state.selectedBlock}\n                uId={this.props.uId}\n                bpId={this.props.bId}\n                closeSideBar = {this.closeSelectedBlockSidebar}\n                bpDetails = {this.state.bpDetails}\n                latestBlock ={this.state.latestBlock}\n                refreshBlockprobe = {this.refreshBlockprobe}\n                commitToStoryTooltip = {this.state.showTooltip.commitToStory}\n                finishAddingBlockToStoryTooltip = {this.finishAddingBlockToStoryTooltip}\n                />\n                </div>}\n                open={this.state.selectedBlockSidebarOpen}\n                onSetOpen={this.onSetSelectedBlockSidebarOpen}\n                pullRight={true}\n                defaultSidebarWidth='200px'\n                styles={{ sidebar: { background: \"#fefefe\", position:'fixed' } }}\n            >\n\n            </Sidebar>\n\n            <Sidebar\n                sidebar={<div className=\"left-sidebar\">\n                    <VisualizeOptionsListComponent \n                    selectVisualisation={this.setNewVisualisation}\n                    selectedVisualisation={this.state.selectedVisualisation}\n                    permit = {this.props.permit}\n                    isViewOnly={false}\n                    dashboardTooltip={this.state.showTooltip.viewDashboardView}\n                    shareStoryTooltip={this.state.showTooltip.shareStory}/>\n                </div>}\n                open={this.state.menuBarOpen}\n                onSetOpen={this.onSetMenuBlockSidebarOpen}\n                pullRight={false}\n                defaultSidebarWidth='200px'\n                styles={{ sidebar: { background:\"white\", position:'fixed' } }}\n            >\n\n            <div style={{height:'100%',overflowY:'scroll'}}>\n                <div className=\"blockprobe-options-container\">\n                    <Joyride\n                        styles={{\n                            options: {\n                            arrowColor: '#e3ffeb',\n                            beaconSize: '3em',\n                            primaryColor: '#05878B',\n                            backgroundColor: '#e3ffeb',\n                            overlayColor: 'rgba(10,10,10, 0.4)',\n                            width: 900,\n                            zIndex: 1000,\n                            }\n                        }}\n                        steps={this.state.tooltipText.menuClickFirst}\n                        run = {this.state.showTooltip.menuClickFirst}                    \n                        /> \n                    <Joyride\n                        styles={{\n                            options: {\n                            arrowColor: '#e3ffeb',\n                            beaconSize: '3em',\n                            primaryColor: '#05878B',\n                            backgroundColor: '#e3ffeb',\n                            overlayColor: 'rgba(10,10,10, 0.4)',\n                            width: 900,\n                            zIndex: 1000,\n                            }\n                        }}\n                        steps={this.state.tooltipText.preShareStory}\n                        run = {this.state.showTooltip.preShareStory}                    \n                        /> \n                    <button onClick={() => { this.onSetMenuBlockSidebarOpen(true)}}\n                    className=\"menu-button\">\n                            <MenuIcon/>\n                    </button>\n                    <button onClick={() => { this.refreshBlockprobe()}}\n                    className=\"sync-button\">\n                            <SyncIcon/>\n                    </button>\n                </div>\n                <div className=\"blockprobe-header\"> \n                       {!isNullOrUndefined(this.state.blockprobeTitle)?\n                            <BpDetail \n                                type = \"title\"\n                                value = {this.state.blockprobeTitle}\n                                lastTs = {this.state.bpDetailsLastTs}\n                                permit = {this.props.permit}\n                                posts = {this.props.posts}\n                                commitBlockToBlockprobe = {this.commitBlockToBlockprobe}></BpDetail>\n                                :\n                            null\n                        }                                       \n                    <h4>{this.state.blockprobeSummary}</h4>\n                </div>\n\n                {this.state.isloading.blockprobe || this.state.isloading.bpDetails || this.state.langLoading?\n                    <div style={{width:'50px',margin:'auto'}}>\n                        <Loader \n                        type=\"TailSpin\"\n                        color=\"#00BFFF\"\n                        height=\"50\"\t\n                        width=\"50\"              \n                        /> \n                    </div>\n                    :\n                this.renderVisualisation()}\n            </div>\n            </Sidebar>\n\n\n            </div>\n        );\n    }\n\n\n}\nexport default ViewBlockprobePrivateComponent;","import React, { Component } from 'react';\nimport './UserWall.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Expand from 'react-expand-animated';\nimport Textarea from 'react-textarea-autosize';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { version } from 'punycode';\nimport { isNullOrUndefined } from 'util';\n\nclass UserWall extends React.Component {\n    constructor(props) {\n      super(props);\n      //posts\n\n      this.state = {\n          visualizedBps: {},\n          isEditSummary: {},\n          newSummary: {}\n      }\n\n      this.renderSinglePost = this.renderSinglePost.bind(this);\n      this.clickOnVisualizeButton = this.clickOnVisualizeButton.bind(this);\n      this.clickOnEdit = this.clickOnEdit.bind(this);\n      this.isValid = this.isValid.bind(this);\n    }\n\n    clickOnVisualizeButton(bp, val){\n        let visMap = this.state.visualizedBps;\n        visMap[bp] = val;\n        this.setState({\n            visualizedBps: visMap\n        });\n    }\n\n    clickOnEdit(type, value, post){\n        if(type == 'summary'){\n            let isEditSummary = this.state.isEditSummary;\n            isEditSummary = {};\n            isEditSummary[post.bp] = value;\n            let newSummary = this.state.newSummary;\n            newSummary[post.bp] = '';\n            if(!isNullOrUndefined(post.summary)){\n                newSummary[post.bp] = post.summary;\n            }\n            this.setState({\n                isEditSummary: isEditSummary,\n                newSummary: newSummary\n            });\n        }\n    }\n\n    isValid(newValue){\n        if(isNullOrUndefined(newValue) || newValue.trim() == '')\n            return false;\n        return true;\n    }\n\n    clickOnSave(type, post){\n        if(type == 'summary'){\n            let newSummary = this.state.newSummary;\n            let value = newSummary[post.bp];\n\n            //update db using value\n            let posts = this.props.posts;\n            for(let i=0; i<posts.length; i++){\n                if(posts[i].bp == post.bp){\n                    posts[i]['summary'] = value;\n                    break;\n                }\n            }\n            this.props.updatePosts(posts);\n\n            this.clickOnEdit('summary', false, post);\n        }\n    }\n\n    handleChange(event, type, post) {\n\n        var shouldUpdate = true;\n      \n        var lastChar = event.target.value[event.target.value.length-1];\n        if(lastChar=='\\n' || lastChar=='\\t')\n            shouldUpdate=false;\n        \n        if(shouldUpdate){\n            if(type==\"summary\" && event.target.value.length <= 288){\n                    let value = event.target.value;\n                    let newSummary = this.state.newSummary;\n                    newSummary[post.bp] = value;\n                    this.setState({newSummary: newSummary});\n                }\n            }        \n    }\n\n    renderSinglePost(post, scope){\n\n        const transitions = [\"height\", \"opacity\", \"background\"];\n        let link = '';\n        if(post && post.bp){\n            link = \"https://blprobe.com/tabs/\" + post.bp;\n        }\n        return (\n            <div className=\"wallPostContainer\">\n                <h5 className=\"wallPostTitle\">{post.title}</h5>\n                {this.state.isEditSummary[post.bp] && this.props.isPrivate?\n                    <div>\n                        <form className=\"newBlockprobeForm\">\n                                <label>\n                                    <TextField \n                                        type=\"text\"\n                                        variant=\"outlined\"\n                                        multiline\n                                        placeholder = {\"Enter details about this story\"}\n                                        value={this.state.newSummary[post.bp]}\n                                        onChange={(e) => { this.handleChange(e,\"summary\",post)}}\n                                        rowsMax=\"4\"\n                                        rows=\"2\"\n                                        style={{\n                                            background: 'white',\n                                            marginTop:'6px',\n                                            marginBottom:'6px',\n                                            textColor: 'black',\n                                            fontWeight: '600',\n                                            marginLeft: '1em',\n                                            width:'95%'\n                                            }}/>                            \n                                </label>\n                        </form>\n                        <div style={{display: 'flex'}}>\n                            {this.isValid(this.state.newSummary[post.bp])?\n                                <Button\n                                variant=\"contained\" \n                                className=\"summarySaveWallbutton\"\n                                onClick={() => { this.clickOnSave('summary', post)}}>\n                                    <div>Confirm</div>\n                                </Button>                    \n                            :\n                                null\n                            }\n                            <Button className=\"summaryCancelWallbutton\" \n                                variant=\"contained\" \n                                    onClick = {(e) => this.clickOnEdit('summary', false, post)}>\n                                Cancel\n                            </Button>\n                        </div>\n                    </div>\n                    \n                    :\n                    null\n                }\n                {!this.state.isEditSummary[post.bp] && this.props.isPrivate?\n                    <div>\n                        {post.summary && post.summary.length > 0? \n                            <p className=\"wallPostSummary\">{post.summary}</p>\n                            :\n                            <p className=\"wallPostSummaryPrompt\">Add a summary!</p> \n                            }\n                            <Button className=\"summaryChangeWallbutton\" \n                                onClick = {(e) => this.clickOnEdit('summary', true, post)}\n                                variant=\"contained\" >\n                                    Edit summary\n                            </Button>\n                    </div>\n                    :\n                    null\n                }\n\n                {!this.props.isPrivate && post.summary && post.summary.length > 0?\n                    <p className=\"wallPostSummary\">{post.summary}</p>\n                    :\n                    null\n                }\n\n                <div className=\"wallPostBody\">                           \n                    {\n                        this.state.visualizedBps[post.bp]?\n                        <div className=\"wallShowViso\">\n                            <div>\n                                <Button className=\"visualizeWallBpButton\" \n                                onClick = {(e) => this.clickOnVisualizeButton(post.bp, false)}\n                                variant=\"contained\" >\n                                    Close\n                                </Button>\n                            </div>\n                        </div>                  \n                        :\n                        <div className=\"wallHideViso\">\n                            <Button className=\"visualizeWallBpButton\" \n                            onClick = {(e) => this.clickOnVisualizeButton(post.bp, true)}\n                            variant=\"contained\">\n                                Visualize\n                            </Button>\n                        </div>\n                    }\n                        <Expand \n                                open={this.state.visualizedBps[post.bp]}\n                                duration={400}\n                                transitions={transitions}>\n                                <div className=\"wallPostVisoContainer\">\n                                    {this.state.visualizedBps[post.bp]?\n                                        <iframe src={link} className=\"wallPostViso\"></iframe>\n                                            :\n                                            null\n                                    }                                    \n                                </div>                         \n                        </Expand>\n                </div>\n                 \n            </div>\n        )\n    }\n\n    render() {\n        let scope = this;\n        const postsRender = this.props.posts.map((post) => \n                    (scope.renderSinglePost(post, scope)));\n        return (\n          <div>\n              {postsRender}\n          </div>\n        );\n      }\n}\nexport default UserWall;","import React, { Component } from 'react';\nimport './UserNotifications.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport * as DbUtils from '../../common/dbSvc';\nimport { isNullOrUndefined } from 'util';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n\n\nclass UserNotifications extends React.Component {\n    constructor(props) {\n      super(props);\n      //notifications,userId\n      //console.log(props.notifications);\n\n      this.state = {\n        dialogType: null,\n        dialog: false,\n        dialogText:{\n            selected:{\n                title: null,\n                desc: null\n            }\n        },\n        selectedNotificationId: null,\n        uIdHash: null,\n        shajs: null\n      }\n\n        var shajs = require('sha.js');\n        this.state.uIdHash = shajs('sha256').update(this.props.userId).digest('hex');\n        this.state.shajs = shajs;\n\n      this.renderSingleNotification = this.renderSingleNotification.bind(this);\n      this.renderStoryInviteNotifications = this.renderStoryInviteNotifications.bind(this);\n      this.clickOnNotification = this.clickOnNotification.bind(this);\n      this.toggleDialog = this.toggleDialog.bind(this);\n      this.performAction = this.performAction.bind(this);\n    }\n\n    toggleDialog(value, type, notification){\n        let dialogText = this.state.dialogText;\n        if(type == 'storyInvite'){\n            dialogText.selected.title = `Contribute to story \\n\"${notification.title}\"`;\n            dialogText.selected.desc = \"You have been invited to contribute to this story. Do you accept?\";\n        }\n        else if(type=='all'){\n \n        }\n        \n        this.setState({\n            dialog: value,\n            dialogType: type,\n            dialogText: dialogText\n        });\n    }\n\n    renderStoryInviteNotifications(notifications){\n\n        let renderStr = null;\n        if(!isNullOrUndefined(notifications)){\n            renderStr = Object.keys(notifications).map((key) => {\n                let notification = notifications[key];\n                let title = notification.title;\n                let summary = \"You have been invited to contribute to this story as admin.\"\n                return this.renderSingleNotification(title, summary, 'storyInvite', notification);\n            });\n        }\n        return (\n            <div>\n                {renderStr}\n            </div>\n        )\n    }\n\n    async clickOnNotification(type, notification){\n        let notificationId = notification.id;\n        await this.setState({\n            selectedNotificationId: notificationId\n        });\n        this.toggleDialog(true,'storyInvite',notification);\n    }\n\n    renderSingleNotification(title, summary, type, notification){\n        let notif = {title:title,  id:notification.id}\n       return(\n            <ListItem button \n                onClick={() => { this.clickOnNotification(type,notif)}}\n                style={{width:'100%'}}\n                >\n                <ListItemText \n                 primary={title} \n                 secondary={summary}/>\n            </ListItem>                    \n        );\n        \n    }\n\n    async performAction(value){\n        let type = this.state.dialogType;\n        if(type == 'storyInvite' && !isNullOrUndefined(this.state.selectedNotificationId)){        \n            let notification = this.props.notifications[this.state.selectedNotificationId];\n            let userId = this.props.userId;\n            if(value){\n                //Add user to story    \n                //console.log('Add user ',this.state.selectedNotificationId);\n                let addUserToBlockprobe = DbUtils.addUserToBlockprobe(notification,userId,this.state.uIdHash);\n                await Promise.all(addUserToBlockprobe);\n                await DbUtils.removeNotification(notification,userId);\n            }\n            else{\n                //Remove notification\n                await DbUtils.removeInviteStoryNotification(notification,userId,this.state.uIdHash);\n                await DbUtils.removeNotification(notification,userId);\n            }\n        }\n\n        this.toggleDialog(false,'all',null);\n    }\n\n    render(){\n\n        return (\n            <div>\n                <h2 style={{textAlign:'center'}}>Notifications</h2>\n                <Tabs className=\"notificationsTab\">\n                    <TabList>\n                        <Tab>Story invites</Tab>\n                    </TabList>\n\n                    <TabPanel>\n                        <List>{this.renderStoryInviteNotifications(this.props.notifications)}</List>\n                    </TabPanel>\n                </Tabs>\n                <Dialog\n                    open={this.state.dialog}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    onClose={() => this.toggleDialog(false,'all',null)}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\">\n                        <DialogTitle id=\"alert-dialog-slide-title\">{this.state.dialogText.selected.title}</DialogTitle>\n                        <DialogContent>\n                        <DialogContentText id=\"alert-dialog-slide-description\">\n                            {this.state.dialogText.selected.desc}\n                        </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                        <Button onClick={() => this.performAction(true)} color=\"primary\">\n                            Yes\n                        </Button>\n                        <Button onClick={() => this.performAction(false)} color=\"primary\">\n                            No\n                        </Button>\n                        <Button onClick={() => this.toggleDialog(false,'all',null)} color=\"primary\">\n                            Cancel\n                        </Button>                        \n                        </DialogActions>\n                </Dialog>\n            </div>\n        )\n    }\n}\nexport default UserNotifications;\n","import React, { Component } from 'react';\nimport { Button, Card, Grid } from '@material-ui/core';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport ViewBlockprobePublicComponent from '../../../view/ViewBlockprobePublic';\nimport * as Const from '../../../common/constants';\nimport * as firebase from 'firebase';\nimport './SingleGameElement.css';\nimport { isNullOrUndefined } from 'util';\n\nclass SingleGameListItemComponent extends React.Component {\n\n    constructor(props){\n      super(props);\n      //title, id\n\n      this.state = {\n          playGame: false\n      }\n      this.playGame = this.playGame.bind(this);\n      this.viewResults = this.viewResults.bind(this);\n    }\n\n    playGame(value){\n /*       this.setState({\n            playGame: value\n        });\n        */\n        let link = Const.blockprobeUrl + `/game/${this.props.id}`;\n        window.open(link, \"_blank\");       \n    }\n\n    viewResults(){\n        let link = Const.blockprobeUrl + `/gameResults/${this.props.id}`;\n        window.open(link, \"_blank\")\n    }\n\n    render(){\n\n        return (\n            <Grid item xs={12} spacing={4}>\n                <Card elevation={6}>\n                    <CardContent>\n                        <Typography variant=\"h6\">{this.props.title}</Typography>\n                        {!isNullOrUndefined(this.props.summary)?\n                            <Typography variant=\"body2\" component=\"p\" gutterBottom>\n                                {this.props.summary}\n                            </Typography>    \n                            :\n                            null\n                        }                                                            \n                    </CardContent>\n                    <CardActions>\n                        <Button size=\"small\" onClick={() => { this.playGame(true)}}>Play</Button>\n                        <Button size=\"small\" onClick={() => { this.viewResults()}}>View results</Button>\n                        {this.props.isPrivate && this.props.removeGame?\n                            <Button size=\"small\" onClick={() => { this.props.removeGame(this.props.id)}}>Remove</Button>\n                            :\n                            null\n                        }\n                    </CardActions>\n                </Card>\n            </Grid>\n        );\n       /* return (\n            <div className=\"singleGameElementContainer\">\n                <h4 style={{textAlign:'center'}}>{this.props.title}</h4>\n                <div>\n                    {this.state.playGame?\n                    <Button\n                        variant=\"contained\" \n                        className=\"playGameListItembutton\"\n                        onClick={() => { this.playGame(false)}}> \n                        Close</Button>\n                        :\n                    <Button\n                        variant=\"contained\" \n                        className=\"playGameListItembutton\"\n                        onClick={() => { this.playGame(true)}}> \n                        Play Game</Button>\n                    }\n\n                    <Button\n                        variant=\"contained\" \n                        className=\"viewResultGameListItembutton\"\n                        onClick={() => { this.viewResults()}}> \n                        View Results</Button>\n                \n                </div>\n                              \n            </div>\n        )\n        */\n    }\n}\nexport default SingleGameListItemComponent;","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport { isNullOrUndefined } from 'util';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport * as Utils from '../../../common/utilSvc';\nimport * as Const from '../../../common/constants';\nimport Loader from 'react-loader-spinner';\nimport SingleGameListItemComponent from '../../../viso/gameList/singleGameElement/SingleGameElement';\nimport './GameListPrivate.css';\n\nclass GameListPrivate extends React.Component {\n\n    constructor(props) {\n      super(props);\n      //gameListId\n\n      this.state={\n          list: [],\n          title: null,\n          isLoading: true,\n          currGameList: {},\n          addGameList: false,\n          newGame: {\n              title: '',\n              id: ''\n          }\n      }\n\n      this.removeGame = this.removeGame.bind(this);\n      this.addGame = this.addGame.bind(this);\n      this.writeToDb = this.writeToDb.bind(this);\n      this.singleGameListItem = this.singleGameListItem.bind(this);\n      this.renderGameListFull = this.renderGameListFull.bind(this);\n      this.confirmGame = this.confirmGame.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.isValidGame = this.isValidGame.bind(this);\n    }\n\n    removeGame(gameId){\n        let list = this.state.list;\n        let ans = [];\n        for(let i=0; i<list.length; i++){\n            if(list[i].id != gameId){\n                ans.push(list[i]);\n            }\n        }\n        this.writeToDb(ans,this.state.title);\n    }\n\n    addGame(game){\n        let list = this.state.list;\n        if(list.length < Const.maxLengthOfGamelist){\n            list.push(game);\n            this.writeToDb(list,this.state.title);\n        }\n    }\n\n    async writeToDb(list, title){\n        let currGameList = this.state.currGameList;\n        currGameList['games'] = list;\n        delete currGameList['list'];\n        currGameList['title'] = title;\n        await firebase.firestore().collection('publicGameList').doc(this.props.gameListId).set(currGameList);\n    }\n\n    singleGameListItem(game){\n        return (\n            <div className=\"singleGameListItemContainer\">\n                <SingleGameListItemComponent\n                    title={game.title}\n                    id={game.id}\n                    isPrivate={true}\n                    removeGame={this.removeGame}\n                />\n            </div>\n        )\n    }\n\n    handleChange(event, type) {\n\n        var shouldUpdate = true;\n        if(type!=\"date\" && type!=\"time\"){\n            let newStr = event.target.value;\n            if(!Utils.shouldUpdateText(newStr, '\\n\\t')){\n                shouldUpdate=false;\n            }\n        }\n\n        if(shouldUpdate){\n            var game = this.state.newGame;\n            if(type==\"title\"){\n                game.title = event.target.value;\n                this.setState({newGame: game});\n            }\n            else if(type==\"id\"){\n                game.id = event.target.value;\n                this.setState({newGame: game});\n            }\n        }\n    }\n\n    componentDidMount(){\n        if(!isNullOrUndefined(this.props.gameListId)){\n            //get gameList\n\n            let scope = this;\n            firebase.firestore().collection('publicGameList').doc(this.props.gameListId).onSnapshot(doc => {\n                if(doc.exists){\n                    let title = doc.data().title;\n                    let list = doc.data().games;\n                    let currGameList = doc.data();\n    \n                    scope.setState({\n                        list: list,\n                        title: title,\n                        currGameList: currGameList\n                    });\n                }\n                scope.setState({\n                    isLoading: false\n                });\n            },\n            error =>{\n                scope.setState({\n                    isLoading: false\n                });\n            });\n        }\n    }\n\n    confirmGame(){\n        let newGame = this.state.newGame;\n        this.addGame(newGame);\n        this.setState({\n            addGameList: false,\n            newGame: {\n                title: '',\n                id: ''\n            }\n        })\n    }\n\n    isValidGame(){\n        if(isNullOrUndefined(this.state.newGame.id) || this.state.newGame.id.trim()=='')\n            return false;\n        if(isNullOrUndefined(this.state.newGame.title) || this.state.newGame.title.trim()=='')\n            return false;\n        return true;\n    }\n\n    returnNewGame(){\n        return (\n            <div>\n                <Grid xs={12}>\n                    <div className=\"newGameFormContainer\">\n                        <form>\n                            <label>\n                                <TextField \n                                    type=\"text\"\n                                    variant=\"outlined\"\n                                    multiline\n                                    label = \"Game title\"\n                                    value={this.state.newGame.title}\n                                    onChange={(e) => { this.handleChange(e,\"title\")}}\n                                    rowsMax=\"2\"\n                                    rowsMin=\"1\"\n                                    style={{\n                                        background: 'white',\n                                        marginTop:'6px',\n                                        marginBottom:'6px',\n                                        width:'95%'\n                                        }}/>\n                                <TextField \n                                type=\"text\"\n                                variant=\"outlined\"\n                                multiline\n                                label = \"Game ID\"\n                                value={this.state.newGame.id}\n                                onChange={(e) => { this.handleChange(e,\"id\")}}\n                                rowsMax=\"2\"\n                                rows=\"1\"\n                                style={{\n                                    background: 'white',\n                                    marginTop:'6px',\n                                    marginBottom:'6px',\n                                    width:'95%'\n                                    }}/>\n                            </label>\n                        </form>\n                        <div className=\"newGamePrivateOptionsContainer\">\n                            {\n                                this.isValidGame()?\n                                <Button\n                                    className=\"addGameButton\"\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                    onClick={() => { this.confirmGame() }}>\n                                        Add\n                                </Button>\n                                :\n                                null\n                            }\n                            <Button\n                                className=\"addGameButton\"\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => { \n                                    this.setState({\n                                        addGameList: false,\n                                        newGame: {\n                                            title: '',\n                                            id: ''\n                                        }})\n                                    }}>\n                                    Close\n                            </Button>\n                        </div>                       \n                    </div>\n                </Grid>\n            </div>\n        )\n    }\n\n    renderGameListFull(){\n        let list = this.state.list;\n        let displayList = list.map(game => {\n            return this.singleGameListItem(game);\n        });\n        let shareUrl = Const.blockprobeUrl + '/gameList/' + this.props.gameListId;\n        \n        return (\n            <div>\n                <h2 className=\"gameListTitle\">{this.state.title}</h2>\n\n                <div className=\"gameListPrivateOptionsContainer\">\n                    <Button\n                        className=\"addGameButton\"\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={() => { this.props.return()}}>\n                            Back to gameLists\n                    </Button>\n                    {!this.state.addGameList?\n                        <Button\n                            className=\"addGameButton\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            onClick={() => { this.setState({addGameList: true})}}>\n                                Add new game\n                        </Button>\n                            : \n                        null \n                    }\n                </div>\n\n                {this.state.addGameList?\n                    this.returnNewGame()\n                    :\n                    null\n                }\n\n                <div className=\"shareUrlContainer\">\n                    <p>\n                        Public link to view game list: <br />                        \n                    </p>\n                    <div className=\"shareUrlDiv\">\n                        <a href={shareUrl} target=\"_blank\">{shareUrl}</a>\n                    </div>\n                </div>\n\n                {this.state.list.length > 0?\n                    <div style={{marginBottom:'40px'}}>{displayList}</div>\n                    :\n                    null\n                }                \n            </div>\n        );\n    }\n\n    render(){\n        return (\n            <div>\n                {this.state.isLoading?\n                    <div style={{width:'50px',margin:'auto'}}>\n                        <Loader \n                        type=\"TailSpin\"\n                        color=\"#00BFFF\"\n                        height=\"50\"\t\n                        width=\"50\"              \n                        /> \n                    </div>\n                    :\n                    this.renderGameListFull()\n                }\n            </div>\n        );\n    }\n\n}\nexport default GameListPrivate;","import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Loader from 'react-loader-spinner';\nimport TextField from '@material-ui/core/TextField';\nimport * as firebase from 'firebase';\nimport * as Utils from '../../common/utilSvc';\nimport * as Const from '../../common/constants';\nimport './UserGames.css';\nimport { isNullOrUndefined } from 'util';\nimport { Button } from '@material-ui/core';\nimport GameListPrivate from './GameListPrivate/GameListPrivate';\n\nclass UserGames extends React.Component {\n    constructor(props) {\n      super(props);\n      //userId (has to be there)\n      \n      this.state = {\n          shajs:null,\n          areGameListsLoading: true,\n          userGameLists: {},\n          createGameList: false,\n          draftGameList: {\n              title: ''\n          }\n      }\n\n        var shajs = require('sha.js');\n        this.state.shajs = shajs;\n\n        this.selectGame = this.selectGame.bind(this);\n        this.addGameList = this.addGameList.bind(this);\n        this.removeGameList = this.removeGameList.bind(this);\n        this.getList = this.getList.bind(this);\n        this.toggleCreateGameList = this.toggleCreateGameList.bind(this);\n        this.createGameList = this.createGameList.bind(this);\n        this.renderGameLists = this.renderGameLists.bind(this);\n        this.renderNewGameForm = this.renderNewGameForm.bind(this);\n        this.isValidGameList = this.isValidGameList.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.returnToGameLists = this.returnToGameLists.bind(this);\n\n        this.getLatestTimestamp = this.getLatestTimestamp.bind(this);\n        this.getGameLists = this.getGameLists.bind(this);\n        this.getGameListsShort = this.getGameListsShort.bind(this);\n        this.updateShortenedGameListsToDb = this.updateShortenedGameListsToDb.bind(this);\n        this.getNewGameListsTillThisSession = this.getNewGameListsTillThisSession.bind(this);\n        this.listenToGameListsDuringSession = this.listenToGameListsDuringSession.bind(this);\n    }\n\n    getLatestTimestamp(snapshot){\n        let timestampLatest = 0;\n        snapshot.forEach((doc) => { \n            let data = doc.data().gameLists;\n            for(let i=0; data && i<data.length; i++){\n                if(data[i].timestamp)\n                    timestampLatest = Math.max(timestampLatest, data[i].timestamp);\n            }\n        }); \n        return timestampLatest;\n    }\n\n    getGameListsShort(){\n        firebase.firestore().collection('Users').doc(this.props.userId)\n            .collection('shortGameLists').get().then((snapshot) => {\n        let latestTs = this.getLatestTimestamp(snapshot);                                 \n        let allGameLists = [];\n        snapshot.forEach((doc) => {\n                let data = doc.data();\n                if(data.gameLists){\n                    for(let i=0; i<data.gameLists.length; i++){\n                        allGameLists.push(data.gameLists[i]);\n                        this.addGameList(data.gameLists[i]);\n                    }\n                }\n            });\n        this.getNewGameListsTillThisSession(latestTs);                                \n        });  \n    }\n\n    updateShortenedGameListsToDb(){\n        let allGameLists = Utils.getShortenedListOfGameLists(this.state.userGameLists);\n        if(allGameLists &&  allGameLists.length>0){\n            firebase.firestore().collection('Users').doc(this.props.userId)\n            .collection('shortGameLists').get().then((snapshot) => {\n                    \n                snapshot.forEach((doc) => {\n                        var ref = firebase.firestore().collection(\"Users\").doc(this.props.userId)\n                        .collection(\"shortGameLists\").doc(doc.id).delete();\n                    });\n                    \n                for(var i=0; i<allGameLists.length; i++){\n                    firebase.firestore().collection(\"Users\").doc(this.props.userId)\n                    .collection(\"shortGameLists\").doc(String(i)).set(allGameLists[i]);        \n                }       \n                });\n        }\n      }\n\n    getNewGameListsTillThisSession(latestTimestamp){\n\n        let currTime = Date.now();\n\n        //Get short gamelists\n        firebase.firestore().collection('Users').doc(this.props.userId)\n        .collection('gameLists').where(\"timestamp\", \">\", latestTimestamp).where(\"timestamp\", \"<=\", currTime)\n        .orderBy(\"timestamp\").get().then((snapshot) => {\n                                \n            snapshot.forEach((doc) => {\n                let data = doc.data();\n                if(data){\n                    this.addGameList(data);\n                }\n            });\n\n            this.updateShortenedGameListsToDb();\n            this.setState({\n                areGameListsLoading: false\n            });\n            this.listenToGameListsDuringSession(currTime);\n        });          \n    }\n\n    listenToGameListsDuringSession(latestTimestamp){\n\n        firebase.firestore().collection('Users').doc(this.props.userId)\n        .collection('gameLists').where(\"timestamp\", \">\", latestTimestamp).orderBy(\"timestamp\").onSnapshot(\n            querySnapshot => {\n                querySnapshot.docChanges().forEach(change => {\n                    if (change.type === 'added') {\n                        let data = change.doc.data();\n                        if(data){\n                            this.addGameList(data,true);\n                        }\n                        //console.log('New block: ', change.doc.data().timestamp);\n                    }\n                    else if (change.type == 'removed'){\n                        let data = change.doc.data();\n                        if(data){\n                            this.removeGameList(data,false);\n                        }\n                    }\n                }); \n            });\n    }\n\n    handleChange(event, type) {\n\n        var shouldUpdate = true;\n      \n        let newStr = event.target.value;\n        if(!Utils.shouldUpdateText(newStr, '\\n\\t'))\n            shouldUpdate=false;\n\n        if(shouldUpdate){\n            var gameList = this.state.draftGameList;\n            if(type==\"title\"){\n                gameList.title = event.target.value;\n                gameList.title = gameList.title.substring(0, Const.maxGameListChar - 1);\n                this.setState({draftGameList: gameList});\n            }\n        }          \n    }\n\n    async createGameList(){\n        let timestamp = Date.now();\n        let title = this.state.draftGameList.title;\n        let id = this.state.shajs('sha256').update(this.props.userId + \"_\" + String(timestamp)).digest('hex');\n\n        let gameListSoft = {\n            title: title,\n            timestamp: timestamp,\n            id: id\n        };\n        let gameListPublic = {\n            title: title,\n            games: [],\n            timestamp: timestamp,\n            id: id\n        };\n        await firebase.firestore().collection('Users').doc(this.props.userId)\n        .collection('gameLists').doc(id).set(gameListSoft);\n\n        await firebase.firestore().collection('publicGameList').doc(id).set(gameListPublic);\n\n        this.setState({\n            draftGameList: {\n                title: ''\n            },\n            createGameList: false\n        });\n    }\n\n    isValidGameList(){\n        if(this.state.draftGameList.title.trim() == '')\n            return false;\n        return true;\n    }\n\n    renderNewGameForm(){\n\n        return (\n            <div>\n                 <form className=\"newGameListForm\">\n                    <label>\n                        <TextField \n                            type=\"text\"\n                            label = \"Title\"\n                            variant=\"outlined\"\n                            value={this.state.draftGameList.title}\n                            onChange={(e) => { this.handleChange(e,\"title\")}}\n                            multiline\n                            rowsMax=\"2\"\n                            rows=\"1\"\n                            style={{\n                                background: 'white',\n                                marginTop:'6px',\n                                marginBottom:'6px',\n                                textColor: 'black',\n                                fontWeight: '600',\n                                marginLeft: '1em',\n                                width:'95%'\n                                }}/>                            \n                    </label>\n                </form>\n               \n                <div className=\"createValidGameOptions\">\n                    {this.isValidGameList()?\n                        <Button\n                        className=\"submitGameListButton\"\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={this.createGameList}>\n                            Confirm\n                        </Button>\n                        :\n                        null\n                    }\n                        <Button \n                            className=\"createGameListButton\"\n                            color=\"primary\"\n                            variant=\"contained\"\n                            onClick={this.toggleCreateGameList}>\n                                Close\n                        </Button>\n                        \n                </div>                                                                \n            </div>\n        )\n    }\n\n    selectGame(id){\n        this.props.selectGameList(id);\n    }\n\n    renderSingleUserGame(game){\n        let scope = this;\n        return (\n            <ListItem button \n                selected={scope.props.selectedUserGame == game.id}\n                onClick={() => { scope.selectGame(game.id)}}\n                style={{width:'100%'}}\n                >\n                <ListItemText primary={game.title} secondary={''}/>\n            </ListItem>\n        );\n    }\n\n    addGameList(game){\n        if(!isNullOrUndefined(game)){\n            let userGameLists = this.state.userGameLists;\n            userGameLists[game.id] = game;\n            this.setState({\n                userGameLists: userGameLists\n            });\n        }\n    }\n\n    removeGameList(game){\n        if(!isNullOrUndefined(game)){\n            let userGameLists = this.state.userGameLists;\n            delete userGameLists[game.id];\n            this.setState({\n                userGameLists: userGameLists\n            });\n        }\n    }\n\n    getGameLists(){\n        this.setState({\n            areGameListsLoading: false\n        });\n\n        this.getGameListsShort();\n    }\n\n    componentDidMount(){\n        this.getGameLists();\n    }\n\n    getList(gameMap){\n        let list = [];\n        for(let key in gameMap){\n            list.push(gameMap[key]);\n        }\n        return list;\n    }\n\n    toggleCreateGameList(){\n        this.setState({\n            createGameList: !this.state.createGameList\n        });\n    }\n\n    renderGameLists(){\n        let scope = this;\n        let userGamesTempList = this.getList(this.state.userGameLists);\n        userGamesTempList.sort(function(a, b){if(a.title.toLowerCase()>b.title.toLowerCase()){return 1} return -1;});\n        let userGamesRender = userGamesTempList.map((game) => {\n            return scope.renderSingleUserGame(game);\n        });\n\n        return (\n            <div className=\"gameListsViewContainer\">\n            <h2 style={{textAlign:'center'}}>My game lists</h2>\n                <div className=\"createGameListOptions\">\n                {!this.state.createGameList?\n                    <Button \n                        className=\"createGameListButton\"\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={this.toggleCreateGameList}>\n                            <div>Create gamelist</div>\n                    </Button>\n                    :\n                    null\n                }                    \n                </div>\n                {this.state.createGameList?\n                    <div>\n                        {this.renderNewGameForm()}\n                    </div>\n                    :\n                    null\n                }\n                <div>\n                    <List>\n                        {userGamesRender}\n                    </List>\n                </div>\n            </div>\n        )\n    }\n\n    returnToGameLists(){\n        this.props.selectGameList(null);\n    }\n\n    render(){\n        \n        return (\n            <div>\n                {\n                    isNullOrUndefined(this.props.selectedUserGame) || this.props.selectedUserGame==''?\n                    <div>\n                        {this.state.areGameListsLoading?\n                                <div style={{margin:'auto',width:'50px'}}>\n                                    <Loader \n                                    type=\"TailSpin\"\n                                    color=\"#00BFFF\"\n                                    height=\"50\"\t\n                                    width=\"50\"\n                                    /> \n                                </div>\n                                :\n                                <div>\n                                    {this.renderGameLists()}\n                                </div>\n                        }\n                    </div>\n                    :\n                    <div>\n                        <GameListPrivate\n                            gameListId={this.props.selectedUserGame}\n                            return={this.returnToGameList}\n                        />\n                    </div>\n                }\n            </div>\n        )\n    }\n}\nexport default UserGames;","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport StyleFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport { isNullOrUndefined } from 'util';\nimport * as Utils from '../common/utilSvc';\nimport * as DbUtils from \"../common/dbSvc\";\nimport './UserSession.css';\nimport UserBlockprobesComponent from './UserBlockprobes';\nimport ViewBlockprobePrivateComponent from '../view/ViewBlockprobePrivate';\nimport Loader from 'react-loader-spinner';\nimport GoogleFontLoader from 'react-google-font-loader';\nimport Img from 'react-image';\nimport JournalistBackground from \"./backgrounds/Journalist.jpg\";\nimport TeacherBackground from \"./backgrounds/Teacher.jpg\";\nimport LawmakerBackground from \"./backgrounds/lawmaker.jpg\";\nimport MainLogo from \"./icons/logo.png\";\nimport UserWall from \"./userWall/UserWall\";\nimport UserNotifications from \"./userNotif/UserNotifications\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport SchoolIcon from '@material-ui/icons/School';\nimport PolicyIcon from '@material-ui/icons/Policy';\nimport PersonPinIcon from '@material-ui/icons/PersonPin';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports';\nimport NotificactionsIcon from '@material-ui/icons/Notifications';\nimport UserGames from './userGames/UserGames';\n\nclass UserSession extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state={\n            isUserSignedIn: this.getItemWrapper('isUserSignedIn',false), //false,\n            showLogin: true,\n            isWallOpened: false,\n            isGameListOpened: false,\n            isNotificationsOpened: false,\n            selectedBlockprobeId: '',\n            selectedGameListId: null,\n            userId: this.getItemWrapper('userId',''),//'',\n            providerId: this.getItemWrapper('providerId',''),//'',\n            blockprobes: {},\n            posts: [],\n            notifications: {},\n            areBlockprobesLoading: false,\n            tooltip:{\n                buildStory: false\n            },\n            landingPage:{\n                journalist:{\n                    logo: '',\n                    text: 'As a journalist, you can build your story using blockprobe, visualise your story and better engage your audience with your story.',\n                    background: JournalistBackground\n                },\n                police:{\n                    logo: '',\n                    text: 'As a law enforcement agent, detective or police officer, you can build your investigation using blockprobe, visualise your investigation and better engage the general public with your investigation.'\n                },\n                politician:{\n                    logo: '',\n                    text: 'As a lawmaker, you can visualise your proposals and laws using blockprobe, and better engage your constituents with your proposals.',\n                    background: LawmakerBackground\n                },\n                teacher:{\n                    logo: '',\n                    text: 'As a teacher, you can visualise your chapters in history, science and english using blockprobe, and better engage your students with these subjects.',\n                    background: TeacherBackground\n                }\n            },\n            currBackgroundIndex: 0,\n            allBackgrounds: [\n                'teacher',\n                'journalist',\n                'politician'\n            ],\n            tabValue: 0 \n        }\n\n        if(this.state.userId == ''){\n            this.state.isUserSignedIn = false;\n        }\n        \n        this.getUiConfig = this.getUiConfig.bind(this);\n        this.getItemWrapper = this.getItemWrapper.bind(this);\n        this.getAndSetUser = this.getAndSetUser.bind(this);\n        this.loggedInView = this.loggedInView.bind(this);\n        this.loggedInContent = this.loggedInContent.bind(this);\n        this.loggedOutView = this.loggedOutView.bind(this);\n        this.clickLoginOption = this.clickLoginOption.bind(this);\n        this.getBlockprobes = this.getBlockprobes.bind(this);\n        this.getBlockprobesShort = this.getBlockprobesShort.bind(this);\n        this.getNewBlockprobesTillThisSession = this.getNewBlockprobesTillThisSession.bind(this);\n        this.listenToBlockprobesDuringSession = this.listenToBlockprobesDuringSession.bind(this);\n        this.updateShortenedBlockprobesListToDb = this.updateShortenedBlockprobesListToDb.bind(this);\n        this.selectBlockprobe = this.selectBlockprobe.bind(this);\n        this.createBlockprobeList = this.createBlockprobeList.bind(this);\n        this.addBlockprobeToList = this.addBlockprobeToList.bind(this);\n        this.addNotificationToList = this.addNotificationToList.bind(this);\n        this.removeBlockprobeFromList = this.removeBlockprobeFromList.bind(this);\n        this.cueCardViewV2 = this.cueCardViewV2.bind(this);\n        this.getLatestTimestamp = this.getLatestTimestamp.bind(this);\n        this.returnToViewBlockprobes = this.returnToViewBlockprobes.bind(this);\n        this.modifyBlockprobe = this.modifyBlockprobe.bind(this);\n        this.getUserWall = this.getUserWall.bind(this);\n        this.getUserNotifications = this.getUserNotifications.bind(this);\n        this.buildUserWall = this.buildUserWall.bind(this);\n        this.viewWall = this.viewWall.bind(this);\n        this.viewNotifications = this.viewNotifications.bind(this);\n        this.viewGameList = this.viewGameList.bind(this);\n        this.updatePosts = this.updatePosts.bind(this);\n        this.renderGeneralLoggedInView = this.renderGeneralLoggedInView.bind(this);\n        this.handleTabChange = this.handleTabChange.bind(this);\n        this.changeOpacity = this.changeOpacity.bind(this);\n        this.selectGameList = this.selectGameList.bind(this);\n        this.onBackButtonPressed = this.onBackButtonPressed.bind(this);\n    }\n\n    onBackButtonPressed(){\n        if(this.state.selectedBlockprobeId != '' || this.state.isNotificationsOpened){\n            this.returnToViewBlockprobes();\n        }\n\n        if(this.state.isGameListOpened){\n            if(this.state.selectedGameListId == null){\n                this.returnToViewBlockprobes();\n            }\n            else{\n                //Go to all game lists only\n                this.setState({\n                    selectedGameListId: null\n                })\n            }\n        }\n    }\n\n    selectGameList(listId){\n        this.setState({\n            selectedGameListId: listId\n        });\n    }\n\n    getItemWrapper(key, defaultVal){\n        if(!isNullOrUndefined(localStorage.getItem(key))){\n            return localStorage.getItem(key);\n        }\n        return defaultVal;\n    }\n\n    getUiConfig(){\n        let uiConfig = {\n            signInFlow: \"popup\",\n            signInOptions: [\n                {\n                    provider: firebase.auth.PhoneAuthProvider.PROVIDER_ID,\n                    defaultCountry: 'IN'                \n                }            \n            ],\n            callbacks:{\n              signInSuccess: () => false,\n              signInSuccessWithAuthResult: function(authResult, redirectUrl) {\n                \n                //...\n              }      \n            }\n          }\n\n        if(window.innerWidth > 768){\n            uiConfig.signInOptions.push(firebase.auth.GoogleAuthProvider.PROVIDER_ID);\n            uiConfig.signInOptions.push(firebase.auth.EmailAuthProvider.PROVIDER_ID);\n        }\n        return uiConfig;\n    }\n\n      clickLoginOption(){\n          this.setState({\n              showLogin: true\n          });\n      }\n\n      returnToViewBlockprobes(){\n          this.setState({\n              selectedBlockprobeId: '',\n              isWallOpened: false,\n              isNotificationsOpened: false,\n              isGameListOpened: false\n          });\n      }\n\n      viewWall(){\n          this.setState({\n              isWallOpened: true,\n              isNotificationsOpened: false,\n              selectedBlockprobeId: '',\n              isGameListOpened: false\n          });\n      }\n\n      viewNotifications(){\n            this.setState({\n                isWallOpened: false,\n                isNotificationsOpened: true,\n                selectedBlockprobeId: '',\n                isGameListOpened: false\n            });\n      }\n\n      viewGameList(){\n        this.setState({\n            isWallOpened: false,\n            isNotificationsOpened: false,\n            selectedBlockprobeId: '',\n            isGameListOpened: true\n        });\n      }\n\n      addBlockprobeToList(doc){\n        var blockprobeDic = this.state.blockprobes;\n        var newBlockprobe = {\n            id: doc.id,\n            title: doc.title,\n            summary: doc.summary,\n            timestamp: doc.timestamp,\n            isActive: doc.isActive,\n            active: doc.active,\n            permit: doc.permit\n        };\n        if(newBlockprobe.permit ==  \"EXIT\")\n        {\n            delete blockprobeDic[doc.id];\n        }\n        else\n            blockprobeDic[doc.id]=newBlockprobe;\n        this.setState({\n            blockprobes:blockprobeDic\n        });\n      }\n\n      removeBlockprobeFromList(doc){\n        var blockprobeDic = this.state.blockprobes;\n        if(doc.id in blockprobeDic)\n        {\n            delete blockprobeDic[doc.id];\n        }\n        this.setState({\n            blockprobes:blockprobeDic\n        });\n      }\n\n      createBlockprobeList(snapshot){\n          snapshot.forEach((doc) => ( this.addBlockprobeToList(doc))); \n      }\n\n      getBlockprobes(){\n        if(this.state.isUserSignedIn && (this.state.selectedBlockprobeId == '')){\n            this.setState({areBlockprobesLoading: true});                       \n                this.getBlockprobesShort();\n        }\n      }\n\n    getLatestTimestamp(snapshot){\n        let timestampLatest = 0;\n        snapshot.forEach((doc) => { \n            let data = doc.data().blockprobe;\n            for(let i=0; data && i<data.length; i++){\n                if(data[i].timestamp)\n                    timestampLatest = Math.max(timestampLatest, data[i].timestamp);\n            }\n        }); \n        return timestampLatest;\n      }\n\n    addNotificationToList(notification, shouldAdd){\n        let notifications = this.state.notifications;\n        let id = notification['id'];\n        if(isNullOrUndefined(id))\n            return;\n        if(shouldAdd){\n            //notification.add(notification);\n            notifications[id] = notification;\n        }\n        else{\n            if(id in notifications)\n                delete notifications[id];            \n        }\n        this.setState({\n            notifications: notifications\n        });\n    }\n\n    getUserNotifications(){\n        let scope = this;\n        firebase.firestore().collection(\"Users\").doc(this.state.userId)\n        .collection(\"notifications\").onSnapshot(\n            querySnapshot => {\n                querySnapshot.docChanges().forEach(change => {\n                    if (change.type === 'added') {\n                        let data = change.doc.data();\n                        if(data){\n                            this.addNotificationToList(data,true);\n                        }\n                        //console.log('New block: ', change.doc.data().timestamp);\n                    }\n                    else if (change.type == 'removed'){\n                        let data = change.doc.data();\n                        if(data){\n                            this.addNotificationToList(data,false);\n                        }\n                    }\n                }); \n            });\n    }\n\n    getUserWall(){\n        firebase.firestore().collection(\"publicWall\").doc(this.state.userId).\n        collection(\"userPosts\").get().then((snapshot) => {\n                this.buildUserWall(snapshot);\n        });\n    }\n    \n    buildUserWall(snapshot){\n        let postList = [];\n        snapshot.forEach((doc) => {\n                let data =doc.data();\n                for(let i=0; data && data.posts && i<data.posts.length;i++){\n                    postList.push(data.posts[i]);\n                }\n            });   \n        this.setState({\n            posts: postList\n        });        \n    }\n\n      updateShortenedBlockprobesListToDb(){\n        let allBlockprobes = Utils.getShortenedListOfBlockprobes(this.state.blockprobes);\n        if(allBlockprobes &&  allBlockprobes.length>0){\n            firebase.firestore().collection(\"Users\").doc(this.state.userId)\n                    .collection(\"shortBlockprobes\").get().then((snapshot) => {\n                    \n                snapshot.forEach((doc) => {\n                        var ref = firebase.firestore().collection(\"Users\").doc(this.state.userId)\n                        .collection(\"shortBlockprobes\").doc(doc.id).delete();\n                    });\n                    \n                for(var i=0; i<allBlockprobes.length; i++){\n                    firebase.firestore().collection(\"Users\").doc(this.state.userId)\n                    .collection(\"shortBlockprobes\").doc(String(i)).set(allBlockprobes[i]);        \n                }       \n                });\n        }\n      }\n\n      listenToBlockprobesDuringSession(latestTimestamp){\n            firebase.firestore().collection(\"Users\").doc(this.state.userId)\n            .collection(\"blockprobes\").where(\"timestamp\", \">\", latestTimestamp).orderBy(\"timestamp\").onSnapshot(\n                querySnapshot => {\n                    querySnapshot.docChanges().forEach(change => {\n                        if (change.type === 'added') {\n                            let data = change.doc.data();\n                            if(data){\n                                this.addBlockprobeToList(data);\n                            }\n                            //console.log('New block: ', change.doc.data().timestamp);\n                        }\n                        else if (change.type == 'modified'){\n                            let data = change.doc.data();\n                            if(data){\n                                this.addBlockprobeToList(data);\n                            }\n                        }\n                    }); \n                });\n      }\n\n     getNewBlockprobesTillThisSession(latestTimestamp){\n\n        let currTime = Date.now();\n        //Get short blockprobes\n        firebase.firestore().collection(\"Users\").doc(this.state.userId)\n        .collection(\"blockprobes\").where(\"timestamp\", \">\", latestTimestamp).where(\"timestamp\", \"<=\", currTime).\n        orderBy(\"timestamp\").get().then((snapshot) => {\n                                \n            snapshot.forEach((doc) => {\n                let data = doc.data();\n                if(data){\n                    this.addBlockprobeToList(data);\n                }\n            });\n\n            this.updateShortenedBlockprobesListToDb();\n            this.setState({\n                areBlockprobesLoading: false\n            });\n            this.listenToBlockprobesDuringSession(currTime);\n        });          \n    }\n\n      getBlockprobesShort(){         \n        //Get short blockprobes\n        firebase.firestore().collection(\"Users\").doc(this.state.userId)\n                                    .collection(\"shortBlockprobes\").get().then((snapshot) => {\n\n                                let latestTs = this.getLatestTimestamp(snapshot);                                 \n                                let allBlockprobes = [];\n                                snapshot.forEach((doc) => {\n                                        let data = doc.data();\n                                        if(data.blockprobe){\n                                            for(let i=0; i<data.blockprobe.length; i++){\n                                                allBlockprobes.push(data.blockprobe[i]);\n                                                this.addBlockprobeToList(data.blockprobe[i]);\n                                            }\n                                        }\n                                    });\n                                this.getNewBlockprobesTillThisSession(latestTs);                                \n                                });                                                      \n      }\n\n      selectBlockprobe(blockprobeId, buildStory){\n          var tooltip = this.state.tooltip;\n          tooltip.buildStory = buildStory;\n          this.setState({\n              selectedBlockprobeId: blockprobeId,\n              isWallOpened: false,\n              isNotificationsOpened: false,\n              isGameListOpened: false,\n              tooltip: tooltip\n          })\n\n      }\n\n      getAndSetUser(){\n        if(this.state.isUserSignedIn){\n            var uId = this.state.userId;\n            var scope = this;\n            firebase.firestore().collection(\"Users\").\n                doc(this.state.userId).get().then(function(doc) {\n                    if (!doc.exists) {\n                        \n                        var userData = {\n                            ID: uId\n                        };\n                        firebase.firestore().collection(\"Users\").\n                                doc(uId).set(userData);\n                        var tooltip = scope.state.tooltip;\n\n                        //Toggle tooltip here for new logins\n                        tooltip.buildStory = false; //true;\n                        scope.setState({tooltip: tooltip});\n                    }\n                    else{\n                        // console.log(doc.data());\n                       /* var tooltip = scope.state.tooltip;\n                        tooltip.buildStory = true;\n                        console.log(tooltip);\n                        scope.setState({tooltip: tooltip});\n                        */\n                    }\n                });\n        }\n      }\n\n      async logout(){\n        await firebase.auth().signOut();\n        await localStorage.setItem('isUserSignedIn',false);\n        await localStorage.removeItem('userId');\n        await localStorage.removeItem('providerId');\n        await this.setState({\n            isUserSignedIn: false,\n            isWallOpened: false,\n            isNotificationsOpened: false,\n            isGameListOpened: false\n        });        \n        window.location.href = \"/\";\n      }\n\n      componentDidMount(){\n\n        if(this.state.isUserSignedIn){\n            this.getAndSetUser();\n            this.getBlockprobes();\n            this.getUserWall();\n            this.getUserNotifications();\n        }\n\n            firebase.auth().onAuthStateChanged(user =>{\n\n                var oldState = this.state.isUserSignedIn;\n                this.setState({\n                    isUserSignedIn: !!user\n                });\n                localStorage.setItem('isUserSignedIn',!!user);\n\n                var providerId = '';\n                var uId = '';\n                \n                if(!isNullOrUndefined(firebase.auth().currentUser) && \n                !isNullOrUndefined(firebase.auth().currentUser.providerData) &&\n                firebase.auth().currentUser.providerData.length>0){\n                    providerId = firebase.auth().currentUser.providerData[0].providerId;\n                }\n                if(providerId==\"phone\"){\n                    uId = firebase.auth().currentUser.phoneNumber;\n                }\n                else if(providerId=='google.com'){\n                    uId = firebase.auth().currentUser.email;\n                }\n                else if(providerId=='password'){\n                    uId = firebase.auth().currentUser.email;\n                }\n\n                this.setState({\n                    providerId: providerId,\n                    userId: uId\n                });\n                localStorage.setItem('providerId',providerId);\n                localStorage.setItem('userId',uId);\n            // console.log(firebase.auth().currentUser);\n\n                if(!!user && !isNullOrUndefined(firebase.auth().currentUser) && !oldState){\n                    \n                    this.getAndSetUser();\n                    this.getBlockprobes();\n                    this.getUserWall();\n                    this.getUserNotifications();\n                }\n            });\n\n      }\n\n      updatePosts(posts){\n         DbUtils.writePostListToDb(posts, this.state.userId);\n          this.setState({\n              posts: posts\n          });\n      }\n\n      async modifyBlockprobe(type, blockprobe){\n          if(type=='update'){\n             // console.log('Users/'+ this.state.userId +'/blockprobes/'+blockprobe.id);\n             // console.log(blockprobe);\n                await firebase.firestore().collection('Users').doc(this.state.userId)\n                    .collection('blockprobes').doc(blockprobe.id).set(blockprobe);\n          }\n      }\n\n      renderGeneralLoggedInView(){\n          if(this.state.isWallOpened){\n              return (\n                  <UserWall\n                    posts = {this.state.posts}\n                    isPrivate = {true}\n                    updatePosts={this.updatePosts}\n                  />\n              );\n          }\n          else if(this.state.isNotificationsOpened){\n              return (\n                  <UserNotifications\n                    notifications = {this.state.notifications}\n                    userId = {this.state.userId}\n                    />\n              );\n          }\n          else if(this.state.isGameListOpened){\n              return (\n                <UserGames \n                    userId = {this.state.userId}\n                    selectedUserGame = {this.state.selectedGameListId}\n                    selectGameList = {this.selectGameList}\n                />\n              );\n          }\n\n          return(\n            <UserBlockprobesComponent \n                blockprobes={this.state.blockprobes}\n                selectedBlockprobe = {this.state.selectedBlockprobeId}\n                selectBlockprobe = {this.selectBlockprobe}\n                uId={this.state.userId}\n                buildStorytooltip={this.state.tooltip.buildStory}\n                />\n          );\n      }\n\n      loggedInContent(){\n         // console.log(this.state.blockprobes);\n         if(this.state.userId!=''){\n            return (\n                <div className=\"blockprobe-list-container\">\n                    {this.state.blockprobes?\n                    <div>\n                        {this.state.areBlockprobesLoading?\n                                <div style={{margin:'auto',width:'50px'}}>\n                                    <Loader \n                                    type=\"TailSpin\"\n                                    color=\"#00BFFF\"\n                                    height=\"50\"\t\n                                    width=\"50\"\n                                    /> \n                                </div>\n                                :\n                                <div>\n                                    {this.renderGeneralLoggedInView()}\n                                </div>\n                        }\n                    </div>\n                        : \n                    null                  \n                }\n                </div>\n            );\n        }\n\n        return null;\n      }\n\n\n      //<Button color=\"inherit\" onClick={() => this.viewWall()}>Wall</Button>\n      loggedInView(){\n          \n        let notificationNumber = null;\n        if(Object.keys(this.state.notifications).length > 0)\n            notificationNumber = Object.keys(this.state.notifications).length;\n\n          return (\n            <div>\n                <div style={{display: 'block'}}>\n                <header className=\"toolbar\">\n                    <AppBar position=\"static\">\n                        <Toolbar> \n                            {this.state.selectedBlockprobeId != '' || this.state.isGameListOpened || this.state.isNotificationsOpened?\n                                <IconButton color=\"inherit\" onClick={() => this.onBackButtonPressed()}>\n                                    <ArrowBackIcon/>\n                                </IconButton> \n                                :\n                                null \n                            } \n                        <Typography className=\"toolbar__logo\">\n                            Blockprobe\n                        </Typography>                      \n                        <div style={{flexGrow: '1'}}></div>\n                        <IconButton color=\"inherit\" onClick={() => this.returnToViewBlockprobes()}>\n                            <HomeIcon/>\n                        </IconButton>  \n                        <IconButton color=\"inherit\" onClick={() => this.viewGameList()}>\n                            <SportsEsportsIcon/>\n                        </IconButton>                      \n                        <IconButton color=\"inherit\" onClick={() => this.viewNotifications()}>\n                            <Badge badgeContent={notificationNumber} color=\"secondary\">\n                                <NotificactionsIcon />\n                            </Badge>                           \n                        </IconButton>                        \n                        <Typography className=\"userName\">\n                            {this.state.userId}\n                        </Typography>\n                        <Button color=\"inherit\" onClick={() => this.logout()}>Logout</Button>\n                        </Toolbar>\n                    </AppBar>                   \n                </header>\n                </div>\n                <div>\n                <div className=\"logged-in-content\">\n                    {this.state.selectedBlockprobeId == '' || !(this.state.selectedBlockprobeId in this.state.blockprobes)?\n                        this.loggedInContent()\n                        :\n                        <div className=\"blockprobe-list-container\">\n                        <ViewBlockprobePrivateComponent \n                            bId={this.state.selectedBlockprobeId} \n                            uId={this.state.userId}\n                            permit={this.state.blockprobes[this.state.selectedBlockprobeId].permit}\n                            buildStorytooltip={this.state.tooltip.buildStory}\n                            prevTitle={this.state.blockprobes[this.state.selectedBlockprobeId].title}\n                            currBlockprobe={this.state.blockprobes[this.state.selectedBlockprobeId]}\n                            modifyBlockprobe={this.modifyBlockprobe}\n                            posts={this.state.posts}\n                            updatePosts={this.updatePosts}/>\n                        </div>    \n                    }\n                </div>\n                </div>\n            </div>\n          );\n      }\n\n      cueCardViewV2(icon, content){\n        return(\n            <div className=\"cue-card-container-v2\" style={{width:'100%', display:'flex'}}>\n                <div style={{padding:'10px 10px 10px 10px'}}>\n                    <div className=\"cue-card-text\" style={{fontFamily: 'Lora, bold-italic', textAlign:'justify'}}>\n                            {content}\n                    </div>\n                </div>\n            </div>              \n            );\n      }\n\n      handleTabChange(event, newValue){\n        this.setState({\n            tabValue: newValue,\n            currBackgroundIndex: newValue\n        });\n      }\n\n      /*\n      OLD TEXT\n      <div style={{fontFamily: 'Lora, bold-italic', textAlign:'justify', marginTop:'20px'}}>\n                                    For example, a story on Nirav Modi has been built using the tool. You can view it <a href='https://blprobe.com/view/6790279f4c45b5c9ff7e4f90f2b398eca2a3eb296bcc82604a3def599865b782' target='blank'>here</a>.\n                                </div>\n                                <div style={{fontFamily: 'Lora, bold-italic', textAlign:'justify', marginTop:'20px'}}>\n                                    A brief history of Otto von Bismarck has been built using the tool. You can view it <a href='https://blprobe.com/view/09f190bf8d3e2f71ea2463c8ce98e68639080fd3ce3d3021fb04d17e62215ead' target='blank'>here</a>.\n                                </div>\n                                <div style={{fontFamily: 'Lora, bold-italic', textAlign:'justify', marginTop:'20px'}}>\n                                    To use blockprobe, login with your mobile and get started!\n                                </div>\n      */\n\n      changeOpacity(index){  \n        try{\n            document.querySelector(\".teacherImage\").style.opacity = 0;\n            document.querySelector(\".journalistImage\").style.opacity = 0;\n            document.querySelector(\".politicianImage\").style.opacity = 0;\n\n            let selectedStr =\".\" + this.state.allBackgrounds[index] + \"Image\";\n            document.querySelector(selectedStr).style.opacity = 1;\n        }\n        catch(e){\n\n        }\n      }\n\n      loggedOutView(){\n          var url = 'https://blockprobe-32644.firebaseapp.com/';\n          var mainLogoList = [MainLogo]\n          let imgUrl = this.state.landingPage[this.state.allBackgrounds[this.state.currBackgroundIndex]].background;\n          let currDetails = this.state.landingPage[this.state.allBackgrounds[this.state.currBackgroundIndex]];\n          this.changeOpacity(this.state.currBackgroundIndex);\n          return (\n              <div>                \n                <main style={{height:'100vh',overflow:'hidden'}}>\n                \n                    <div style={{height:'100vh',overflow:'auto'}}>\n                        <img class=\"background-image teacherImage\" src={TeacherBackground}></img>\n                        <img class=\"background-image journalistImage\" src={JournalistBackground}></img>\n                        <img class=\"background-image politicianImage\" src={LawmakerBackground}></img>\n                        <GoogleFontLoader\n                            fonts={[\n                                {\n                                font: 'Roboto',\n                                weights: [400, '400i'],\n                                },\n                                {\n                                font: 'Roboto Mono',\n                                weights: [400, 700],\n                                },\n                                {\n                                    font: 'Bungee Inline',\n                                    weights: [400]\n                                },\n                                {\n                                    font:'Lora',\n                                    weights: [400]\n                                }\n                            ]}\n                            subsets={['cyrillic-ext', 'greek']}\n                            />                        \n\n                        <div className=\"landing-view-container\">                       \n                        <div style={{paddingTop:'10px', textAlign:'center'}}>\n                                    <Img src={mainLogoList}\n                                    style={{width:'50%'}}></Img>\n                                </div>\n                                <div style={{fontFamily: 'Lora, bold-italic', textAlign:'center', fontSize: '26px', fontWeight:'bold'}}><span>Visually engage your audience and yourself with your work.</span></div>\n                                <div className=\"lpTabContainer\">\n                                    <Paper square className=\"lpTabPaper\">\n                                        <Tabs\n                                            value={this.state.tabValue}\n                                            onChange={this.handleTabChange}\n                                            variant=\"fullWidth\"\n                                            indicatorColor=\"primary\"\n                                            textColor=\"primary\"\n                                            aria-label=\"icon tabs example\"\n                                        >\n                                            <Tab icon={<SchoolIcon />} value={0} aria-label=\"phone\" label=\"TEACHERS\"/>\n                                            <Tab icon={<PersonPinIcon />} value={1} aria-label=\"person\" label=\"JOURNALISTS\"/>\n                                            <Tab icon={<PolicyIcon />} value={2} aria-label=\"favorite\" label=\"LAWMAKERS\"/>                                            \n                                        </Tabs>\n                                    </Paper>\n                                </div>\n                                <div style={{marginTop:'16px'}}>\n                                    {this.cueCardViewV2(currDetails.logo, currDetails.text)}\n                                </div>                        \n                                {this.state.showLogin?\n                                <div className=\"user-session-login-container-v2\">                                     \n                                    <div className='user-session-shadow-view-v2'>\n                                        <div>\n                                            <span className=\"userSessionLoginHeader\">Login</span>\n                                        </div>                                        \n                                        <StyleFirebaseAuth\n                                        uiConfig={this.getUiConfig()}\n                                        firebaseAuth={firebase.auth()}                            \n                                        />\n                                    </div>\n                                </div> : \n                                    null \n                                }\n                                <div style={{marginTop:'3%'}}>\n                                    <a style={{fontFamily: 'Roboto, sans-serif', margin:'3%'}} href=\"https://sites.google.com/view/blockprobe/quickstart\" target=\"blank\">Quickstart</a>\n                                    <a style={{fontFamily: 'Roboto, sans-serif', margin:'3%'}} href=\"https://sites.google.com/view/blockprobe/home\" target=\"blank\">About</a>\n                                    <a style={{fontFamily: 'Roboto, sans-serif', margin:'3%'}} href=\"https://sites.google.com/view/blockprobe/privacy-policy\" target=\"blank\">Privacy Policy</a>\n                                    <a style={{fontFamily: 'Roboto, sans-serif', margin:'3%'}} href=\"https://sites.google.com/view/blockprobe/terms-of-service\" target=\"blank\">Terms of Service</a>                                    \n                                </div>                                \n                            </div>\n                            <div>                                                    \n                            </div>\n                        </div>\n                        \n                </main>\n              </div>\n          );\n      }\n      /*\n      <div className='shareContainer'>\n                                    <div className='shareIcons'>\n                                        <FacebookShareButton                        \n                                            children={<FacebookIcon round={true}/>} \n                                            url={url} \n                                            hashtag = '#blockprobe'/>\n                                    </div>\n                                    <div className='shareIcons'>\n                                        <WhatsappShareButton\n                                            children={<WhatsappIcon round={true}/>} \n                                            url={url} \n                                        />\n                                    </div>\n                                </div>\n                                */\n    render(){\n        return (\n            <div>\n                {this.state.isUserSignedIn?\n                    this.loggedInView()\n                        :\n                    this.loggedOutView()\n                }\n            </div>\n        );\n    }\n\n\n}\nexport default UserSession;","import React, { Component } from 'react';\nimport { isNullOrUndefined } from 'util';\nimport * as firebase from 'firebase';\nimport GamifiedGraphStats from './gamifiedGraphStats';\nimport Loader from 'react-loader-spinner';\nimport './gamifiedResults.css';\n\nclass GamifiedResultsComponent extends React.Component {\n    constructor(props) {\n      super(props);\n      //gameId, userId \n\n      this.state={\n          topPerformance: [],\n          latestPerformances: [],\n          topTimelinePerformance: [],\n          title: null,\n          isLoading: true\n      }\n      this.formatEntityStats = this.formatEntityStats.bind(this);\n      this.renderSinglePerformance = this.renderSinglePerformance.bind(this);\n      this.getData = this.getData.bind(this);\n\n    }\n\n    getData(userId){\n        if(isNullOrUndefined(userId))\n            return;\n\n        let bpId = this.props.gameId;\n\n        let db = firebase.firestore();\n        let allScores = db.collection(\"Users\").doc(userId)\n        .collection('gameScores');\n\n        let queryTop = allScores.where('bpId', '==', bpId).orderBy('score','desc').limit(1).get();\n        let queryTimelineTop = allScores.where('bpId', '==', String(bpId + '_ts')).orderBy('score','desc').limit(1).get();\n        let queryLatest = allScores.where('bpId', '==', bpId).orderBy('ts','desc').limit(5).get();\n\n        let promises = [queryTop, queryLatest, queryTimelineTop];\n        let scope = this;\n        Promise.all(promises).then(results => {\n            const [resultTop, resultLatest, resultTimelineTop] = results;\n            let topScores = [];\n            resultTop.forEach((doc) => {\n                let scoreDetails = doc.data();\n                topScores.push(scoreDetails);\n            });\n\n            let timelineTopScores = [];\n            resultTimelineTop.forEach((doc) => {\n                let scoreDetails = doc.data();\n                timelineTopScores.push(scoreDetails);\n            });\n\n            let latestPerformances = [];\n            resultLatest.forEach((doc) => {\n                let scoreDetails = doc.data();\n                latestPerformances.push(scoreDetails);\n            }); \n\n            // console.log(topScores);\n            // console.log(latestPerformances);\n            if(latestPerformances.length > 0){\n                let title = latestPerformances[0].bpTitle;\n                scope.setState({\n                    title: title\n                });\n            }\n\n            scope.setState({\n                topPerformance: topScores,\n                topTimelinePerformance: timelineTopScores,\n                latestPerformances: latestPerformances,\n                isLoading: false\n            });\n        },\n        error => {\n            scope.setState({\n                topPerformance: [],\n                latestPerformances: [],\n                isLoading: false\n            });\n        });\n    }\n\n    componentDidMount(){\n        if(!isNullOrUndefined(this.props.userId))\n            this.getData(this.props.userId);\n    }\n\n    componentWillReceiveProps(nextProps){\n        if(this.props.userId != nextProps.userId){\n            this.setState({\n                isLoading: true\n            });\n            this.getData(nextProps.userId);\n        }\n    }\n\n    formatEntityStats(entityStats){\n        //Get rid  of  this function later\n        let newEntityStats = {};\n        if(isNullOrUndefined(entityStats))\n            return {};\n        for(let entity in entityStats){\n            if(entityStats[entity])\n                newEntityStats[entity] = entityStats[entity].mistakes;\n        }\n        return newEntityStats;\n    }\n\n    isEntityStatsNewType(entityStats){\n        if(isNullOrUndefined(entityStats))\n            return false;\n        for(let key in entityStats){\n            if(isNullOrUndefined(entityStats[key].mistakes))\n                return false;\n        }\n        return true;\n    }\n\n    renderSinglePerformance(stats, type, gameType){\n        if(this.isEntityStatsNewType(stats.entityStats))\n            stats.entityStats = this.formatEntityStats(stats.entityStats);\n        return (\n            <div>\n                <GamifiedGraphStats\n                    stats = {stats}\n                    bpId={this.props.gameId}\n                    title={this.state.title}\n                    id = {String(stats.ts) + \"_\" + type + \"_\"+ gameType}\n                    ts = {stats.ts}\n                    canSave = {false}\n                    type = {gameType}\n                    />\n            </div>\n        )\n    }\n\n\n    render(){\n        let scope = this;\n        let latestPerformanceRender = this.state.latestPerformances.map(performance => {\n            return scope.renderSinglePerformance(performance,'latest','graphGame');\n        })\n        let topPerformanceRender = this.state.topPerformance.map(performance => {\n            return scope.renderSinglePerformance(performance,'top','graphGame');\n        })\n        let topTimelinePerformanceRender = this.state.topTimelinePerformance.map(performance => {\n            return scope.renderSinglePerformance(performance,'top','timeline');\n        })\n        return (\n            <div>\n                {this.state.isLoading?\n                    <div style={{width:'50px',margin:'auto'}}>\n                        <Loader \n                        type=\"TailSpin\"\n                        color=\"#00BFFF\"\n                        height=\"50\"\t\n                        width=\"50\"              \n                        /> \n                    </div>\n                    :\n                    <div style={{paddingTop:'20px'}}>\n                         {this.state.topPerformance.length==0?\n                                <h4 className=\"gamePerformanceHeader\">User has not played game yet</h4>\n                                :\n                                <div>\n                                    {this.state.topPerformance.length > 0?\n                                        <div>\n                                            <h4 className=\"gamePerformanceHeader\">Match the topics</h4>\n                                            <div className=\"gamePerformanceContent\">\n                                                {topPerformanceRender}                            \n                                            </div>\n                                        </div>\n                                        :\n                                        null\n                                    }\n                                    {this.state.topTimelinePerformance.length > 0?\n                                        <div>\n                                            <h4 className=\"gamePerformanceHeader\">Fill the dates</h4>\n                                            <div className=\"gamePerformanceContent\">\n                                                {topTimelinePerformanceRender}                            \n                                            </div>\n                                        </div>\n                                        :\n                                        null\n                                    }\n                                </div>\n                        }\n                    </div>\n                }\n                \n            </div>\n        )\n    }\n}\nexport default GamifiedResultsComponent;","import React, { Component } from 'react';\nimport { isNullOrUndefined } from 'util';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport GamifiedResultsComponent from './gamifiedResults';\nimport * as Utils from '../../common/utilSvc';\nimport './gamifiedResults.css';\n\nclass GamifiedResultsWrapper extends React.Component {\n    constructor(props) {\n      super(props);\n      //gameId \n\n      this.state = {\n          userId: '',\n          displayedUserId: ''\n      }\n\n      this.isValidUserId = this.isValidUserId.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.displayUserScore = this.displayUserScore.bind(this);\n    }\n\n\n    isValidUserId(userId){\n        if(!isNullOrUndefined(userId) && userId.length>0)\n            return true;\n        return false;\n    }\n\n    handleChange(event, type) {\n\n        var shouldUpdate = false;\n        let str = event.target.value;\n        if(type=='userId' && Utils.shouldUpdateText(str,['\\n','\\t'])){\n            shouldUpdate = true;\n        }\n\n        if(shouldUpdate){\n            \n            if(type==\"userId\"){\n                let id = event.target.value;\n                this.setState({\n                    userId: id\n                });\n            }\n        }\n      }\n\n    displayUserScore(){\n        this.setState({\n            displayedUserId: this.state.userId.trim()\n        });\n    }\n\n    render(){\n        return (\n            <div>\n                 <div className=\"input-userId-getScore-container\">\n                     <h3>Input userId</h3>\n                    <form>\n                    <label>\n                        <TextField \n                            type=\"text\"\n                            variant=\"outlined\"\n                            multiline\n                            placeholder = \"Enter userId\"\n                            value={this.state.userId}\n                            onChange={(e) => { this.handleChange(e,\"userId\")}}\n                            rowsMax=\"1\"\n                            rows=\"1\"\n                            style={{\n                                background: 'white',\n                                marginTop:'6px',\n                                marginBottom:'6px',\n                                width:'30%'\n                                }}/>\n                    </label>\n                    </form>\n                    <div className=\"viewGameResultsOptionsContainer\">\n                        {this.isValidUserId(this.state.userId)?                        \n                            <Button \n                                variant=\"contained\"\n                                className=\"displayUserGameScoreButton\" \n                                style={{marginTop:'1em'}}\n                                onClick={(e) => this.displayUserScore(\"creator\",true)}>\n                                    <div>Confirm</div>\n                            </Button>\n                            :\n                            null\n                        }\n                    </div>\n                 </div>\n\n                {!isNullOrUndefined(this.props.match.params.gameId) && this.isValidUserId(this.state.displayedUserId)? \n                    <GamifiedResultsComponent\n                        gameId = {this.props.match.params.gameId}\n                        userId = {this.state.displayedUserId}\n                        />\n                    :\n                    null\n                }                \n            </div>\n        )\n    }\n}\nexport default GamifiedResultsWrapper;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport * as firebase from 'firebase';\nimport { isNullOrUndefined } from 'util';\nimport UserWall from '../../user-session/userWall/UserWall';\nimport GoogleFontLoader from 'react-google-font-loader';\nimport Loader from 'react-loader-spinner';\nimport './PublicWall.css';\n\nclass PublicWallComponent extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            userId: '',\n            posts: [],\n            doesNotExist: false,\n            isLoading: true\n        }\n\n        if(!isNullOrUndefined(props.match.params.userId)){\n                this.state.userId = JSON.parse(JSON.stringify(props.match.params.userId));\n          }\n\n        this.getUserWall = this.getUserWall.bind(this);\n        this.buildUserWall = this.buildUserWall.bind(this);\n    }\n\n\n    getUserWall(){\n        firebase.firestore().collection(\"publicWall\").doc(this.state.userId).\n        collection(\"userPosts\").get().then((snapshot) => {\n                this.buildUserWall(snapshot);\n        },\n        (error) => {\n            this.setState({\n                posts: [],\n                doesNotExist: true,\n                isLoading: false\n            }); \n        });\n    }\n    \n    buildUserWall(snapshot){\n        let postList = [];\n        snapshot.forEach((doc) => {\n                let data =doc.data();\n                for(let i=0; data && data.posts && i<data.posts.length;i++){\n                    postList.push(data.posts[i]);\n                }\n            });   \n        \n        let doesNotExist = this.state.doesNotExist;\n        if(postList.length == 0)\n            doesNotExist = true;\n        this.setState({\n            posts: postList,\n            doesNotExist: doesNotExist,\n            isLoading: false\n        });        \n    }\n\n    componentDidMount(){\n        this.getUserWall();\n    }\n\n    render(){\n        return(\n            <div>\n                <GoogleFontLoader\n                                fonts={[                             \n                                    {\n                                        font:'Lora',\n                                        weights: [400]\n                                    }\n                                ]}\n                                subsets={['cyrillic-ext', 'greek']}\n                />\n                <h2 style={{fontFamily: 'Lora, bold-italic', textAlign:'center', fontSize: '26px'}}>{this.state.userId}</h2>\n                \n                {this.state.isLoading?\n                    <div style={{width:'50px',margin:'auto'}}>\n                        <Loader \n                        type=\"TailSpin\"\n                        color=\"#00BFFF\"\n                        height=\"50\"\t\n                        width=\"50\"              \n                        /> \n                    </div>\n                    :\n                    <div>\n                        {!this.state.doesNotExist?\n                            <UserWall\n                                posts = {this.state.posts}\n                                isPrivate = {false}\n                            />\n                            :\n                            <div className='noWallInfoMessage'>\n                                <p>This user either does not exist or does not have any posts on their wall!</p>\n                            </div>\n                        }\n                    </div>\n                }                \n            </div>\n        );\n    }\n}\nexport default PublicWallComponent;","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\nimport * as Const from '../../common/constants';\nimport SingleGameListItemComponent from './singleGameElement/SingleGameElement';\nimport YouTube from 'react-youtube';\nimport Paper from '@material-ui/core/Paper';\nimport Loader from 'react-loader-spinner';\nimport './GameListComponent.css';\nimport { isNullOrUndefined } from 'util';\nimport Grid from '@material-ui/core/Grid';\n\nconst opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 0,\n    },\n};\n\nclass GameListComponent extends React.Component {\n    \n    constructor(props){\n      super(props);\n\n      this.state = {\n          gameListId: this.props.match.params.gameListId,\n          list: [],\n          title: null,\n          isLoading: true\n      }\n\n      this.singleGameListItem = this.singleGameListItem.bind(this);\n      this.renderGameListFull = this.renderGameListFull.bind(this);\n    }\n\n    async componentDidMount(){\n        if(!isNullOrUndefined(this.state.gameListId)){\n            //get gameList\n\n            let docs = await firebase.firestore().collection('publicGameList').doc(this.state.gameListId).get();\n            if(docs.exists){\n                let title = docs.data().title;\n                let list = docs.data().games;\n\n                this.setState({\n                    list: list,\n                    title: title,\n                    isLoading: false\n                });\n            }\n            else{\n                this.setState({\n                    isLoading: false\n                });\n            }\n        }\n    }\n\n    singleGameListItem(game){\n        return (\n            <div className=\"singleGameListItemContainer\">\n                <SingleGameListItemComponent\n                    title={game.title}\n                    id={game.id}\n                />\n            </div>\n        )\n    }\n\n    renderGameListFull(){\n        let list = this.state.list;\n\n        let displayList = list.map(game => {\n            return this.singleGameListItem(game);\n        })\n        return (\n            <div>\n                <h2 className=\"gameListTitle\">{this.state.title}</h2>\n\n                {this.state.list.length > 0?\n                    <div style={{marginBottom:'40px'}}>{displayList}</div>\n                    :\n                    null\n                }\n                                \n                <div className=\"gameVideoLink\">\n                    <h3>Create your own game</h3>\n                    <p>Follow the steps in this video tutorial to create your own visualized game using <a href={Const.blockprobeUrl} target=\"_blank\">Blockprobe</a>.</p>\n                    <div className=\"gameVideoContainer\">\n                        <Grid item xs={12} md={6} className=\"videoPadding\">\n                            <Paper elevation={3}>\n                                <YouTube videoId=\"esZCwWauxV4\" opts={opts} onReady={this._onReady} />\n                            </Paper>\n                        </Grid> \n                        <Grid item xs={12} md={6} className=\"videoPadding\">\n                            <Paper elevation={3}>\n                                <YouTube videoId=\"AY74YJ697Ec\" opts={opts} onReady={this._onReady} />\n                            </Paper>\n                        </Grid>                        \n                    </div>                    \n                </div>\n            </div>\n        );\n    }\n\n    render(){\n        return (\n            <div>\n                {this.state.isLoading?\n                    <div style={{width:'50px',margin:'auto'}}>\n                        <Loader \n                        type=\"TailSpin\"\n                        color=\"#00BFFF\"\n                        height=\"50\"\t\n                        width=\"50\"              \n                        /> \n                    </div>\n                    :\n                    this.renderGameListFull()\n                }\n            </div>\n        )\n    }\n}\nexport default GameListComponent;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, Link,Redirect } from \"react-router-dom\";\nimport ViewBlockprobePublicComponent from \"./view/ViewBlockprobePublic\";\nimport ViewBlockprobePublicWrapper from './wrapper/public/ViewBlockprobePublicWrapper';\nimport UserSession from \"./user-session/UserSession\";\nimport GamifiedResultsWrapper from './viso/gamifiedStats/gamifiedResultsWrapper';\nimport PublicWallComponent from './view/viewWall/PublicWall';\nimport GameListComponent from './viso/gameList/GameListComponent';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Switch>\n          <Route path=\"/wall/:userId\"  \n                        component={PublicWallComponent}\n              />\n            <Route path=\"/gameList/:gameListId\"  \n                      component={GameListComponent}\n            />\n           <Route path='/gameResults/:gameId'   \n              component={GamifiedResultsWrapper}\n              />\n            <Route path=\"/:viewType/:bId\"  \n                        component={ViewBlockprobePublicWrapper}\n              />           \n\n            <Route exact path=\"/\"  \n                        component={UserSession}\n              />\n\n            <Redirect from=\"*\" to=\"/\" />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport *  as firebase from 'firebase';\n\n  // Initialize Firebase\n  var config = {\n    apiKey: \"AIzaSyBW_45Sz2fY7v5_obQr_WqXGLsLlfcjOGQ\",\n    authDomain: \"blockprobe-32644.firebaseapp.com\",\n    databaseURL: \"https://blockprobe-32644.firebaseio.com\",\n    projectId: \"blockprobe-32644\",\n    storageBucket: \"blockprobe-32644.appspot.com\",\n    messagingSenderId: \"217518052082\"\n  };\n  firebase.initializeApp(config);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/well_done.ee86f2ec.mp3\";","module.exports = __webpack_public_path__ + \"static/media/try_again.c4b2f20c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Journalist.fa9d5e95.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Teacher.08d8cb9c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lawmaker.66d4da4e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.409a67ba.png\";"],"sourceRoot":""}